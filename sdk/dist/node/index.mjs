var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __copyProps = (to, from4, except, desc) => {
  if (from4 && typeof from4 === "object" || typeof from4 === "function") {
    for (let key of __getOwnPropNames(from4))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from4[key], enumerable: !(desc = __getOwnPropDesc(from4, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// node_modules/@polkadot/wasm-crypto-wasm/cjs/bytes.js
var require_bytes = __commonJS({
  "node_modules/@polkadot/wasm-crypto-wasm/cjs/bytes.js"(exports) {
    "use strict";
    exports.lenIn = 171005;
    exports.lenOut = 339466;
    exports.bytes = "";
  }
});

// node_modules/rxjs/dist/cjs/internal/util/isFunction.js
var require_isFunction = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/util/isFunction.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isFunction = void 0;
    function isFunction(value) {
      return typeof value === "function";
    }
    exports.isFunction = isFunction;
  }
});

// node_modules/rxjs/dist/cjs/internal/util/createErrorClass.js
var require_createErrorClass = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/util/createErrorClass.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createErrorClass = void 0;
    function createErrorClass(createImpl) {
      var _super = function(instance) {
        Error.call(instance);
        instance.stack = new Error().stack;
      };
      var ctorFunc = createImpl(_super);
      ctorFunc.prototype = Object.create(Error.prototype);
      ctorFunc.prototype.constructor = ctorFunc;
      return ctorFunc;
    }
    exports.createErrorClass = createErrorClass;
  }
});

// node_modules/rxjs/dist/cjs/internal/util/UnsubscriptionError.js
var require_UnsubscriptionError = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/util/UnsubscriptionError.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UnsubscriptionError = void 0;
    var createErrorClass_1 = require_createErrorClass();
    exports.UnsubscriptionError = createErrorClass_1.createErrorClass(function(_super) {
      return function UnsubscriptionErrorImpl(errors) {
        _super(this);
        this.message = errors ? errors.length + " errors occurred during unsubscription:\n" + errors.map(function(err, i) {
          return i + 1 + ") " + err.toString();
        }).join("\n  ") : "";
        this.name = "UnsubscriptionError";
        this.errors = errors;
      };
    });
  }
});

// node_modules/rxjs/dist/cjs/internal/util/arrRemove.js
var require_arrRemove = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/util/arrRemove.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.arrRemove = void 0;
    function arrRemove(arr, item) {
      if (arr) {
        var index = arr.indexOf(item);
        0 <= index && arr.splice(index, 1);
      }
    }
    exports.arrRemove = arrRemove;
  }
});

// node_modules/rxjs/dist/cjs/internal/Subscription.js
var require_Subscription = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/Subscription.js"(exports) {
    "use strict";
    var __values = exports && exports.__values || function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    var __spreadArray = exports && exports.__spreadArray || function(to, from4) {
      for (var i = 0, il = from4.length, j = to.length; i < il; i++, j++)
        to[j] = from4[i];
      return to;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isSubscription = exports.EMPTY_SUBSCRIPTION = exports.Subscription = void 0;
    var isFunction_1 = require_isFunction();
    var UnsubscriptionError_1 = require_UnsubscriptionError();
    var arrRemove_1 = require_arrRemove();
    var Subscription = function() {
      function Subscription2(initialTeardown) {
        this.initialTeardown = initialTeardown;
        this.closed = false;
        this._parentage = null;
        this._finalizers = null;
      }
      Subscription2.prototype.unsubscribe = function() {
        var e_1, _a, e_2, _b;
        var errors;
        if (!this.closed) {
          this.closed = true;
          var _parentage = this._parentage;
          if (_parentage) {
            this._parentage = null;
            if (Array.isArray(_parentage)) {
              try {
                for (var _parentage_1 = __values(_parentage), _parentage_1_1 = _parentage_1.next(); !_parentage_1_1.done; _parentage_1_1 = _parentage_1.next()) {
                  var parent_1 = _parentage_1_1.value;
                  parent_1.remove(this);
                }
              } catch (e_1_1) {
                e_1 = { error: e_1_1 };
              } finally {
                try {
                  if (_parentage_1_1 && !_parentage_1_1.done && (_a = _parentage_1.return))
                    _a.call(_parentage_1);
                } finally {
                  if (e_1)
                    throw e_1.error;
                }
              }
            } else {
              _parentage.remove(this);
            }
          }
          var initialFinalizer = this.initialTeardown;
          if (isFunction_1.isFunction(initialFinalizer)) {
            try {
              initialFinalizer();
            } catch (e) {
              errors = e instanceof UnsubscriptionError_1.UnsubscriptionError ? e.errors : [e];
            }
          }
          var _finalizers = this._finalizers;
          if (_finalizers) {
            this._finalizers = null;
            try {
              for (var _finalizers_1 = __values(_finalizers), _finalizers_1_1 = _finalizers_1.next(); !_finalizers_1_1.done; _finalizers_1_1 = _finalizers_1.next()) {
                var finalizer = _finalizers_1_1.value;
                try {
                  execFinalizer(finalizer);
                } catch (err) {
                  errors = errors !== null && errors !== void 0 ? errors : [];
                  if (err instanceof UnsubscriptionError_1.UnsubscriptionError) {
                    errors = __spreadArray(__spreadArray([], __read(errors)), __read(err.errors));
                  } else {
                    errors.push(err);
                  }
                }
              }
            } catch (e_2_1) {
              e_2 = { error: e_2_1 };
            } finally {
              try {
                if (_finalizers_1_1 && !_finalizers_1_1.done && (_b = _finalizers_1.return))
                  _b.call(_finalizers_1);
              } finally {
                if (e_2)
                  throw e_2.error;
              }
            }
          }
          if (errors) {
            throw new UnsubscriptionError_1.UnsubscriptionError(errors);
          }
        }
      };
      Subscription2.prototype.add = function(teardown) {
        var _a;
        if (teardown && teardown !== this) {
          if (this.closed) {
            execFinalizer(teardown);
          } else {
            if (teardown instanceof Subscription2) {
              if (teardown.closed || teardown._hasParent(this)) {
                return;
              }
              teardown._addParent(this);
            }
            (this._finalizers = (_a = this._finalizers) !== null && _a !== void 0 ? _a : []).push(teardown);
          }
        }
      };
      Subscription2.prototype._hasParent = function(parent) {
        var _parentage = this._parentage;
        return _parentage === parent || Array.isArray(_parentage) && _parentage.includes(parent);
      };
      Subscription2.prototype._addParent = function(parent) {
        var _parentage = this._parentage;
        this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;
      };
      Subscription2.prototype._removeParent = function(parent) {
        var _parentage = this._parentage;
        if (_parentage === parent) {
          this._parentage = null;
        } else if (Array.isArray(_parentage)) {
          arrRemove_1.arrRemove(_parentage, parent);
        }
      };
      Subscription2.prototype.remove = function(teardown) {
        var _finalizers = this._finalizers;
        _finalizers && arrRemove_1.arrRemove(_finalizers, teardown);
        if (teardown instanceof Subscription2) {
          teardown._removeParent(this);
        }
      };
      Subscription2.EMPTY = function() {
        var empty = new Subscription2();
        empty.closed = true;
        return empty;
      }();
      return Subscription2;
    }();
    exports.Subscription = Subscription;
    exports.EMPTY_SUBSCRIPTION = Subscription.EMPTY;
    function isSubscription(value) {
      return value instanceof Subscription || value && "closed" in value && isFunction_1.isFunction(value.remove) && isFunction_1.isFunction(value.add) && isFunction_1.isFunction(value.unsubscribe);
    }
    exports.isSubscription = isSubscription;
    function execFinalizer(finalizer) {
      if (isFunction_1.isFunction(finalizer)) {
        finalizer();
      } else {
        finalizer.unsubscribe();
      }
    }
  }
});

// node_modules/rxjs/dist/cjs/internal/config.js
var require_config = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/config.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.config = void 0;
    exports.config = {
      onUnhandledError: null,
      onStoppedNotification: null,
      Promise: void 0,
      useDeprecatedSynchronousErrorHandling: false,
      useDeprecatedNextContext: false
    };
  }
});

// node_modules/rxjs/dist/cjs/internal/scheduler/timeoutProvider.js
var require_timeoutProvider = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/scheduler/timeoutProvider.js"(exports) {
    "use strict";
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    var __spreadArray = exports && exports.__spreadArray || function(to, from4) {
      for (var i = 0, il = from4.length, j = to.length; i < il; i++, j++)
        to[j] = from4[i];
      return to;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.timeoutProvider = void 0;
    exports.timeoutProvider = {
      setTimeout: function(handler, timeout) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
          args[_i - 2] = arguments[_i];
        }
        var delegate = exports.timeoutProvider.delegate;
        if (delegate === null || delegate === void 0 ? void 0 : delegate.setTimeout) {
          return delegate.setTimeout.apply(delegate, __spreadArray([handler, timeout], __read(args)));
        }
        return setTimeout.apply(void 0, __spreadArray([handler, timeout], __read(args)));
      },
      clearTimeout: function(handle) {
        var delegate = exports.timeoutProvider.delegate;
        return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearTimeout) || clearTimeout)(handle);
      },
      delegate: void 0
    };
  }
});

// node_modules/rxjs/dist/cjs/internal/util/reportUnhandledError.js
var require_reportUnhandledError = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/util/reportUnhandledError.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.reportUnhandledError = void 0;
    var config_1 = require_config();
    var timeoutProvider_1 = require_timeoutProvider();
    function reportUnhandledError(err) {
      timeoutProvider_1.timeoutProvider.setTimeout(function() {
        var onUnhandledError = config_1.config.onUnhandledError;
        if (onUnhandledError) {
          onUnhandledError(err);
        } else {
          throw err;
        }
      });
    }
    exports.reportUnhandledError = reportUnhandledError;
  }
});

// node_modules/rxjs/dist/cjs/internal/util/noop.js
var require_noop = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/util/noop.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.noop = void 0;
    function noop() {
    }
    exports.noop = noop;
  }
});

// node_modules/rxjs/dist/cjs/internal/NotificationFactories.js
var require_NotificationFactories = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/NotificationFactories.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createNotification = exports.nextNotification = exports.errorNotification = exports.COMPLETE_NOTIFICATION = void 0;
    exports.COMPLETE_NOTIFICATION = function() {
      return createNotification("C", void 0, void 0);
    }();
    function errorNotification(error) {
      return createNotification("E", void 0, error);
    }
    exports.errorNotification = errorNotification;
    function nextNotification(value) {
      return createNotification("N", value, void 0);
    }
    exports.nextNotification = nextNotification;
    function createNotification(kind, value, error) {
      return {
        kind,
        value,
        error
      };
    }
    exports.createNotification = createNotification;
  }
});

// node_modules/rxjs/dist/cjs/internal/util/errorContext.js
var require_errorContext = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/util/errorContext.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.captureError = exports.errorContext = void 0;
    var config_1 = require_config();
    var context = null;
    function errorContext(cb) {
      if (config_1.config.useDeprecatedSynchronousErrorHandling) {
        var isRoot = !context;
        if (isRoot) {
          context = { errorThrown: false, error: null };
        }
        cb();
        if (isRoot) {
          var _a = context, errorThrown = _a.errorThrown, error = _a.error;
          context = null;
          if (errorThrown) {
            throw error;
          }
        }
      } else {
        cb();
      }
    }
    exports.errorContext = errorContext;
    function captureError(err) {
      if (config_1.config.useDeprecatedSynchronousErrorHandling && context) {
        context.errorThrown = true;
        context.error = err;
      }
    }
    exports.captureError = captureError;
  }
});

// node_modules/rxjs/dist/cjs/internal/Subscriber.js
var require_Subscriber = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/Subscriber.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EMPTY_OBSERVER = exports.SafeSubscriber = exports.Subscriber = void 0;
    var isFunction_1 = require_isFunction();
    var Subscription_1 = require_Subscription();
    var config_1 = require_config();
    var reportUnhandledError_1 = require_reportUnhandledError();
    var noop_1 = require_noop();
    var NotificationFactories_1 = require_NotificationFactories();
    var timeoutProvider_1 = require_timeoutProvider();
    var errorContext_1 = require_errorContext();
    var Subscriber = function(_super) {
      __extends(Subscriber2, _super);
      function Subscriber2(destination) {
        var _this = _super.call(this) || this;
        _this.isStopped = false;
        if (destination) {
          _this.destination = destination;
          if (Subscription_1.isSubscription(destination)) {
            destination.add(_this);
          }
        } else {
          _this.destination = exports.EMPTY_OBSERVER;
        }
        return _this;
      }
      Subscriber2.create = function(next, error, complete) {
        return new SafeSubscriber(next, error, complete);
      };
      Subscriber2.prototype.next = function(value) {
        if (this.isStopped) {
          handleStoppedNotification(NotificationFactories_1.nextNotification(value), this);
        } else {
          this._next(value);
        }
      };
      Subscriber2.prototype.error = function(err) {
        if (this.isStopped) {
          handleStoppedNotification(NotificationFactories_1.errorNotification(err), this);
        } else {
          this.isStopped = true;
          this._error(err);
        }
      };
      Subscriber2.prototype.complete = function() {
        if (this.isStopped) {
          handleStoppedNotification(NotificationFactories_1.COMPLETE_NOTIFICATION, this);
        } else {
          this.isStopped = true;
          this._complete();
        }
      };
      Subscriber2.prototype.unsubscribe = function() {
        if (!this.closed) {
          this.isStopped = true;
          _super.prototype.unsubscribe.call(this);
          this.destination = null;
        }
      };
      Subscriber2.prototype._next = function(value) {
        this.destination.next(value);
      };
      Subscriber2.prototype._error = function(err) {
        try {
          this.destination.error(err);
        } finally {
          this.unsubscribe();
        }
      };
      Subscriber2.prototype._complete = function() {
        try {
          this.destination.complete();
        } finally {
          this.unsubscribe();
        }
      };
      return Subscriber2;
    }(Subscription_1.Subscription);
    exports.Subscriber = Subscriber;
    var _bind = Function.prototype.bind;
    function bind(fn, thisArg) {
      return _bind.call(fn, thisArg);
    }
    var ConsumerObserver = function() {
      function ConsumerObserver2(partialObserver) {
        this.partialObserver = partialObserver;
      }
      ConsumerObserver2.prototype.next = function(value) {
        var partialObserver = this.partialObserver;
        if (partialObserver.next) {
          try {
            partialObserver.next(value);
          } catch (error) {
            handleUnhandledError(error);
          }
        }
      };
      ConsumerObserver2.prototype.error = function(err) {
        var partialObserver = this.partialObserver;
        if (partialObserver.error) {
          try {
            partialObserver.error(err);
          } catch (error) {
            handleUnhandledError(error);
          }
        } else {
          handleUnhandledError(err);
        }
      };
      ConsumerObserver2.prototype.complete = function() {
        var partialObserver = this.partialObserver;
        if (partialObserver.complete) {
          try {
            partialObserver.complete();
          } catch (error) {
            handleUnhandledError(error);
          }
        }
      };
      return ConsumerObserver2;
    }();
    var SafeSubscriber = function(_super) {
      __extends(SafeSubscriber2, _super);
      function SafeSubscriber2(observerOrNext, error, complete) {
        var _this = _super.call(this) || this;
        var partialObserver;
        if (isFunction_1.isFunction(observerOrNext) || !observerOrNext) {
          partialObserver = {
            next: observerOrNext !== null && observerOrNext !== void 0 ? observerOrNext : void 0,
            error: error !== null && error !== void 0 ? error : void 0,
            complete: complete !== null && complete !== void 0 ? complete : void 0
          };
        } else {
          var context_1;
          if (_this && config_1.config.useDeprecatedNextContext) {
            context_1 = Object.create(observerOrNext);
            context_1.unsubscribe = function() {
              return _this.unsubscribe();
            };
            partialObserver = {
              next: observerOrNext.next && bind(observerOrNext.next, context_1),
              error: observerOrNext.error && bind(observerOrNext.error, context_1),
              complete: observerOrNext.complete && bind(observerOrNext.complete, context_1)
            };
          } else {
            partialObserver = observerOrNext;
          }
        }
        _this.destination = new ConsumerObserver(partialObserver);
        return _this;
      }
      return SafeSubscriber2;
    }(Subscriber);
    exports.SafeSubscriber = SafeSubscriber;
    function handleUnhandledError(error) {
      if (config_1.config.useDeprecatedSynchronousErrorHandling) {
        errorContext_1.captureError(error);
      } else {
        reportUnhandledError_1.reportUnhandledError(error);
      }
    }
    function defaultErrorHandler(err) {
      throw err;
    }
    function handleStoppedNotification(notification, subscriber) {
      var onStoppedNotification = config_1.config.onStoppedNotification;
      onStoppedNotification && timeoutProvider_1.timeoutProvider.setTimeout(function() {
        return onStoppedNotification(notification, subscriber);
      });
    }
    exports.EMPTY_OBSERVER = {
      closed: true,
      next: noop_1.noop,
      error: defaultErrorHandler,
      complete: noop_1.noop
    };
  }
});

// node_modules/rxjs/dist/cjs/internal/symbol/observable.js
var require_observable = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/symbol/observable.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.observable = void 0;
    exports.observable = function() {
      return typeof Symbol === "function" && Symbol.observable || "@@observable";
    }();
  }
});

// node_modules/rxjs/dist/cjs/internal/util/identity.js
var require_identity = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/util/identity.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.identity = void 0;
    function identity(x) {
      return x;
    }
    exports.identity = identity;
  }
});

// node_modules/rxjs/dist/cjs/internal/util/pipe.js
var require_pipe = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/util/pipe.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.pipeFromArray = exports.pipe = void 0;
    var identity_1 = require_identity();
    function pipe() {
      var fns = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        fns[_i] = arguments[_i];
      }
      return pipeFromArray(fns);
    }
    exports.pipe = pipe;
    function pipeFromArray(fns) {
      if (fns.length === 0) {
        return identity_1.identity;
      }
      if (fns.length === 1) {
        return fns[0];
      }
      return function piped(input) {
        return fns.reduce(function(prev, fn) {
          return fn(prev);
        }, input);
      };
    }
    exports.pipeFromArray = pipeFromArray;
  }
});

// node_modules/rxjs/dist/cjs/internal/Observable.js
var require_Observable = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/Observable.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Observable = void 0;
    var Subscriber_1 = require_Subscriber();
    var Subscription_1 = require_Subscription();
    var observable_1 = require_observable();
    var pipe_1 = require_pipe();
    var config_1 = require_config();
    var isFunction_1 = require_isFunction();
    var errorContext_1 = require_errorContext();
    var Observable = function() {
      function Observable2(subscribe) {
        if (subscribe) {
          this._subscribe = subscribe;
        }
      }
      Observable2.prototype.lift = function(operator) {
        var observable = new Observable2();
        observable.source = this;
        observable.operator = operator;
        return observable;
      };
      Observable2.prototype.subscribe = function(observerOrNext, error, complete) {
        var _this = this;
        var subscriber = isSubscriber(observerOrNext) ? observerOrNext : new Subscriber_1.SafeSubscriber(observerOrNext, error, complete);
        errorContext_1.errorContext(function() {
          var _a = _this, operator = _a.operator, source = _a.source;
          subscriber.add(operator ? operator.call(subscriber, source) : source ? _this._subscribe(subscriber) : _this._trySubscribe(subscriber));
        });
        return subscriber;
      };
      Observable2.prototype._trySubscribe = function(sink) {
        try {
          return this._subscribe(sink);
        } catch (err) {
          sink.error(err);
        }
      };
      Observable2.prototype.forEach = function(next, promiseCtor) {
        var _this = this;
        promiseCtor = getPromiseCtor(promiseCtor);
        return new promiseCtor(function(resolve, reject) {
          var subscriber = new Subscriber_1.SafeSubscriber({
            next: function(value) {
              try {
                next(value);
              } catch (err) {
                reject(err);
                subscriber.unsubscribe();
              }
            },
            error: reject,
            complete: resolve
          });
          _this.subscribe(subscriber);
        });
      };
      Observable2.prototype._subscribe = function(subscriber) {
        var _a;
        return (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber);
      };
      Observable2.prototype[observable_1.observable] = function() {
        return this;
      };
      Observable2.prototype.pipe = function() {
        var operations = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          operations[_i] = arguments[_i];
        }
        return pipe_1.pipeFromArray(operations)(this);
      };
      Observable2.prototype.toPromise = function(promiseCtor) {
        var _this = this;
        promiseCtor = getPromiseCtor(promiseCtor);
        return new promiseCtor(function(resolve, reject) {
          var value;
          _this.subscribe(function(x) {
            return value = x;
          }, function(err) {
            return reject(err);
          }, function() {
            return resolve(value);
          });
        });
      };
      Observable2.create = function(subscribe) {
        return new Observable2(subscribe);
      };
      return Observable2;
    }();
    exports.Observable = Observable;
    function getPromiseCtor(promiseCtor) {
      var _a;
      return (_a = promiseCtor !== null && promiseCtor !== void 0 ? promiseCtor : config_1.config.Promise) !== null && _a !== void 0 ? _a : Promise;
    }
    function isObserver(value) {
      return value && isFunction_1.isFunction(value.next) && isFunction_1.isFunction(value.error) && isFunction_1.isFunction(value.complete);
    }
    function isSubscriber(value) {
      return value && value instanceof Subscriber_1.Subscriber || isObserver(value) && Subscription_1.isSubscription(value);
    }
  }
});

// node_modules/rxjs/dist/cjs/internal/util/lift.js
var require_lift = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/util/lift.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.operate = exports.hasLift = void 0;
    var isFunction_1 = require_isFunction();
    function hasLift(source) {
      return isFunction_1.isFunction(source === null || source === void 0 ? void 0 : source.lift);
    }
    exports.hasLift = hasLift;
    function operate(init) {
      return function(source) {
        if (hasLift(source)) {
          return source.lift(function(liftedSource) {
            try {
              return init(liftedSource, this);
            } catch (err) {
              this.error(err);
            }
          });
        }
        throw new TypeError("Unable to lift unknown Observable type");
      };
    }
    exports.operate = operate;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/OperatorSubscriber.js
var require_OperatorSubscriber = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/OperatorSubscriber.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OperatorSubscriber = exports.createOperatorSubscriber = void 0;
    var Subscriber_1 = require_Subscriber();
    function createOperatorSubscriber(destination, onNext, onComplete, onError, onFinalize) {
      return new OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize);
    }
    exports.createOperatorSubscriber = createOperatorSubscriber;
    var OperatorSubscriber = function(_super) {
      __extends(OperatorSubscriber2, _super);
      function OperatorSubscriber2(destination, onNext, onComplete, onError, onFinalize, shouldUnsubscribe) {
        var _this = _super.call(this, destination) || this;
        _this.onFinalize = onFinalize;
        _this.shouldUnsubscribe = shouldUnsubscribe;
        _this._next = onNext ? function(value) {
          try {
            onNext(value);
          } catch (err) {
            destination.error(err);
          }
        } : _super.prototype._next;
        _this._error = onError ? function(err) {
          try {
            onError(err);
          } catch (err2) {
            destination.error(err2);
          } finally {
            this.unsubscribe();
          }
        } : _super.prototype._error;
        _this._complete = onComplete ? function() {
          try {
            onComplete();
          } catch (err) {
            destination.error(err);
          } finally {
            this.unsubscribe();
          }
        } : _super.prototype._complete;
        return _this;
      }
      OperatorSubscriber2.prototype.unsubscribe = function() {
        var _a;
        if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {
          var closed_1 = this.closed;
          _super.prototype.unsubscribe.call(this);
          !closed_1 && ((_a = this.onFinalize) === null || _a === void 0 ? void 0 : _a.call(this));
        }
      };
      return OperatorSubscriber2;
    }(Subscriber_1.Subscriber);
    exports.OperatorSubscriber = OperatorSubscriber;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/refCount.js
var require_refCount = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/refCount.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.refCount = void 0;
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    function refCount() {
      return lift_1.operate(function(source, subscriber) {
        var connection = null;
        source._refCount++;
        var refCounter = OperatorSubscriber_1.createOperatorSubscriber(subscriber, void 0, void 0, void 0, function() {
          if (!source || source._refCount <= 0 || 0 < --source._refCount) {
            connection = null;
            return;
          }
          var sharedConnection = source._connection;
          var conn = connection;
          connection = null;
          if (sharedConnection && (!conn || sharedConnection === conn)) {
            sharedConnection.unsubscribe();
          }
          subscriber.unsubscribe();
        });
        source.subscribe(refCounter);
        if (!refCounter.closed) {
          connection = source.connect();
        }
      });
    }
    exports.refCount = refCount;
  }
});

// node_modules/rxjs/dist/cjs/internal/observable/ConnectableObservable.js
var require_ConnectableObservable = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/observable/ConnectableObservable.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ConnectableObservable = void 0;
    var Observable_1 = require_Observable();
    var Subscription_1 = require_Subscription();
    var refCount_1 = require_refCount();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    var lift_1 = require_lift();
    var ConnectableObservable = function(_super) {
      __extends(ConnectableObservable2, _super);
      function ConnectableObservable2(source, subjectFactory) {
        var _this = _super.call(this) || this;
        _this.source = source;
        _this.subjectFactory = subjectFactory;
        _this._subject = null;
        _this._refCount = 0;
        _this._connection = null;
        if (lift_1.hasLift(source)) {
          _this.lift = source.lift;
        }
        return _this;
      }
      ConnectableObservable2.prototype._subscribe = function(subscriber) {
        return this.getSubject().subscribe(subscriber);
      };
      ConnectableObservable2.prototype.getSubject = function() {
        var subject = this._subject;
        if (!subject || subject.isStopped) {
          this._subject = this.subjectFactory();
        }
        return this._subject;
      };
      ConnectableObservable2.prototype._teardown = function() {
        this._refCount = 0;
        var _connection = this._connection;
        this._subject = this._connection = null;
        _connection === null || _connection === void 0 ? void 0 : _connection.unsubscribe();
      };
      ConnectableObservable2.prototype.connect = function() {
        var _this = this;
        var connection = this._connection;
        if (!connection) {
          connection = this._connection = new Subscription_1.Subscription();
          var subject_1 = this.getSubject();
          connection.add(this.source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subject_1, void 0, function() {
            _this._teardown();
            subject_1.complete();
          }, function(err) {
            _this._teardown();
            subject_1.error(err);
          }, function() {
            return _this._teardown();
          })));
          if (connection.closed) {
            this._connection = null;
            connection = Subscription_1.Subscription.EMPTY;
          }
        }
        return connection;
      };
      ConnectableObservable2.prototype.refCount = function() {
        return refCount_1.refCount()(this);
      };
      return ConnectableObservable2;
    }(Observable_1.Observable);
    exports.ConnectableObservable = ConnectableObservable;
  }
});

// node_modules/rxjs/dist/cjs/internal/scheduler/performanceTimestampProvider.js
var require_performanceTimestampProvider = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/scheduler/performanceTimestampProvider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.performanceTimestampProvider = void 0;
    exports.performanceTimestampProvider = {
      now: function() {
        return (exports.performanceTimestampProvider.delegate || performance).now();
      },
      delegate: void 0
    };
  }
});

// node_modules/rxjs/dist/cjs/internal/scheduler/animationFrameProvider.js
var require_animationFrameProvider = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/scheduler/animationFrameProvider.js"(exports) {
    "use strict";
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    var __spreadArray = exports && exports.__spreadArray || function(to, from4) {
      for (var i = 0, il = from4.length, j = to.length; i < il; i++, j++)
        to[j] = from4[i];
      return to;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.animationFrameProvider = void 0;
    var Subscription_1 = require_Subscription();
    exports.animationFrameProvider = {
      schedule: function(callback) {
        var request = requestAnimationFrame;
        var cancel = cancelAnimationFrame;
        var delegate = exports.animationFrameProvider.delegate;
        if (delegate) {
          request = delegate.requestAnimationFrame;
          cancel = delegate.cancelAnimationFrame;
        }
        var handle = request(function(timestamp) {
          cancel = void 0;
          callback(timestamp);
        });
        return new Subscription_1.Subscription(function() {
          return cancel === null || cancel === void 0 ? void 0 : cancel(handle);
        });
      },
      requestAnimationFrame: function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        var delegate = exports.animationFrameProvider.delegate;
        return ((delegate === null || delegate === void 0 ? void 0 : delegate.requestAnimationFrame) || requestAnimationFrame).apply(void 0, __spreadArray([], __read(args)));
      },
      cancelAnimationFrame: function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        var delegate = exports.animationFrameProvider.delegate;
        return ((delegate === null || delegate === void 0 ? void 0 : delegate.cancelAnimationFrame) || cancelAnimationFrame).apply(void 0, __spreadArray([], __read(args)));
      },
      delegate: void 0
    };
  }
});

// node_modules/rxjs/dist/cjs/internal/observable/dom/animationFrames.js
var require_animationFrames = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/observable/dom/animationFrames.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.animationFrames = void 0;
    var Observable_1 = require_Observable();
    var performanceTimestampProvider_1 = require_performanceTimestampProvider();
    var animationFrameProvider_1 = require_animationFrameProvider();
    function animationFrames(timestampProvider) {
      return timestampProvider ? animationFramesFactory(timestampProvider) : DEFAULT_ANIMATION_FRAMES;
    }
    exports.animationFrames = animationFrames;
    function animationFramesFactory(timestampProvider) {
      return new Observable_1.Observable(function(subscriber) {
        var provider = timestampProvider || performanceTimestampProvider_1.performanceTimestampProvider;
        var start = provider.now();
        var id = 0;
        var run = function() {
          if (!subscriber.closed) {
            id = animationFrameProvider_1.animationFrameProvider.requestAnimationFrame(function(timestamp) {
              id = 0;
              var now = provider.now();
              subscriber.next({
                timestamp: timestampProvider ? now : timestamp,
                elapsed: now - start
              });
              run();
            });
          }
        };
        run();
        return function() {
          if (id) {
            animationFrameProvider_1.animationFrameProvider.cancelAnimationFrame(id);
          }
        };
      });
    }
    var DEFAULT_ANIMATION_FRAMES = animationFramesFactory();
  }
});

// node_modules/rxjs/dist/cjs/internal/util/ObjectUnsubscribedError.js
var require_ObjectUnsubscribedError = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/util/ObjectUnsubscribedError.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ObjectUnsubscribedError = void 0;
    var createErrorClass_1 = require_createErrorClass();
    exports.ObjectUnsubscribedError = createErrorClass_1.createErrorClass(function(_super) {
      return function ObjectUnsubscribedErrorImpl() {
        _super(this);
        this.name = "ObjectUnsubscribedError";
        this.message = "object unsubscribed";
      };
    });
  }
});

// node_modules/rxjs/dist/cjs/internal/Subject.js
var require_Subject = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/Subject.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __values = exports && exports.__values || function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AnonymousSubject = exports.Subject = void 0;
    var Observable_1 = require_Observable();
    var Subscription_1 = require_Subscription();
    var ObjectUnsubscribedError_1 = require_ObjectUnsubscribedError();
    var arrRemove_1 = require_arrRemove();
    var errorContext_1 = require_errorContext();
    var Subject = function(_super) {
      __extends(Subject2, _super);
      function Subject2() {
        var _this = _super.call(this) || this;
        _this.closed = false;
        _this.currentObservers = null;
        _this.observers = [];
        _this.isStopped = false;
        _this.hasError = false;
        _this.thrownError = null;
        return _this;
      }
      Subject2.prototype.lift = function(operator) {
        var subject = new AnonymousSubject(this, this);
        subject.operator = operator;
        return subject;
      };
      Subject2.prototype._throwIfClosed = function() {
        if (this.closed) {
          throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
        }
      };
      Subject2.prototype.next = function(value) {
        var _this = this;
        errorContext_1.errorContext(function() {
          var e_1, _a;
          _this._throwIfClosed();
          if (!_this.isStopped) {
            if (!_this.currentObservers) {
              _this.currentObservers = Array.from(_this.observers);
            }
            try {
              for (var _b = __values(_this.currentObservers), _c = _b.next(); !_c.done; _c = _b.next()) {
                var observer = _c.value;
                observer.next(value);
              }
            } catch (e_1_1) {
              e_1 = { error: e_1_1 };
            } finally {
              try {
                if (_c && !_c.done && (_a = _b.return))
                  _a.call(_b);
              } finally {
                if (e_1)
                  throw e_1.error;
              }
            }
          }
        });
      };
      Subject2.prototype.error = function(err) {
        var _this = this;
        errorContext_1.errorContext(function() {
          _this._throwIfClosed();
          if (!_this.isStopped) {
            _this.hasError = _this.isStopped = true;
            _this.thrownError = err;
            var observers = _this.observers;
            while (observers.length) {
              observers.shift().error(err);
            }
          }
        });
      };
      Subject2.prototype.complete = function() {
        var _this = this;
        errorContext_1.errorContext(function() {
          _this._throwIfClosed();
          if (!_this.isStopped) {
            _this.isStopped = true;
            var observers = _this.observers;
            while (observers.length) {
              observers.shift().complete();
            }
          }
        });
      };
      Subject2.prototype.unsubscribe = function() {
        this.isStopped = this.closed = true;
        this.observers = this.currentObservers = null;
      };
      Object.defineProperty(Subject2.prototype, "observed", {
        get: function() {
          var _a;
          return ((_a = this.observers) === null || _a === void 0 ? void 0 : _a.length) > 0;
        },
        enumerable: false,
        configurable: true
      });
      Subject2.prototype._trySubscribe = function(subscriber) {
        this._throwIfClosed();
        return _super.prototype._trySubscribe.call(this, subscriber);
      };
      Subject2.prototype._subscribe = function(subscriber) {
        this._throwIfClosed();
        this._checkFinalizedStatuses(subscriber);
        return this._innerSubscribe(subscriber);
      };
      Subject2.prototype._innerSubscribe = function(subscriber) {
        var _this = this;
        var _a = this, hasError = _a.hasError, isStopped = _a.isStopped, observers = _a.observers;
        if (hasError || isStopped) {
          return Subscription_1.EMPTY_SUBSCRIPTION;
        }
        this.currentObservers = null;
        observers.push(subscriber);
        return new Subscription_1.Subscription(function() {
          _this.currentObservers = null;
          arrRemove_1.arrRemove(observers, subscriber);
        });
      };
      Subject2.prototype._checkFinalizedStatuses = function(subscriber) {
        var _a = this, hasError = _a.hasError, thrownError = _a.thrownError, isStopped = _a.isStopped;
        if (hasError) {
          subscriber.error(thrownError);
        } else if (isStopped) {
          subscriber.complete();
        }
      };
      Subject2.prototype.asObservable = function() {
        var observable = new Observable_1.Observable();
        observable.source = this;
        return observable;
      };
      Subject2.create = function(destination, source) {
        return new AnonymousSubject(destination, source);
      };
      return Subject2;
    }(Observable_1.Observable);
    exports.Subject = Subject;
    var AnonymousSubject = function(_super) {
      __extends(AnonymousSubject2, _super);
      function AnonymousSubject2(destination, source) {
        var _this = _super.call(this) || this;
        _this.destination = destination;
        _this.source = source;
        return _this;
      }
      AnonymousSubject2.prototype.next = function(value) {
        var _a, _b;
        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.next) === null || _b === void 0 ? void 0 : _b.call(_a, value);
      };
      AnonymousSubject2.prototype.error = function(err) {
        var _a, _b;
        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.call(_a, err);
      };
      AnonymousSubject2.prototype.complete = function() {
        var _a, _b;
        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.complete) === null || _b === void 0 ? void 0 : _b.call(_a);
      };
      AnonymousSubject2.prototype._subscribe = function(subscriber) {
        var _a, _b;
        return (_b = (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber)) !== null && _b !== void 0 ? _b : Subscription_1.EMPTY_SUBSCRIPTION;
      };
      return AnonymousSubject2;
    }(Subject);
    exports.AnonymousSubject = AnonymousSubject;
  }
});

// node_modules/rxjs/dist/cjs/internal/BehaviorSubject.js
var require_BehaviorSubject = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/BehaviorSubject.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BehaviorSubject = void 0;
    var Subject_1 = require_Subject();
    var BehaviorSubject = function(_super) {
      __extends(BehaviorSubject2, _super);
      function BehaviorSubject2(_value) {
        var _this = _super.call(this) || this;
        _this._value = _value;
        return _this;
      }
      Object.defineProperty(BehaviorSubject2.prototype, "value", {
        get: function() {
          return this.getValue();
        },
        enumerable: false,
        configurable: true
      });
      BehaviorSubject2.prototype._subscribe = function(subscriber) {
        var subscription = _super.prototype._subscribe.call(this, subscriber);
        !subscription.closed && subscriber.next(this._value);
        return subscription;
      };
      BehaviorSubject2.prototype.getValue = function() {
        var _a = this, hasError = _a.hasError, thrownError = _a.thrownError, _value = _a._value;
        if (hasError) {
          throw thrownError;
        }
        this._throwIfClosed();
        return _value;
      };
      BehaviorSubject2.prototype.next = function(value) {
        _super.prototype.next.call(this, this._value = value);
      };
      return BehaviorSubject2;
    }(Subject_1.Subject);
    exports.BehaviorSubject = BehaviorSubject;
  }
});

// node_modules/rxjs/dist/cjs/internal/scheduler/dateTimestampProvider.js
var require_dateTimestampProvider = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/scheduler/dateTimestampProvider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.dateTimestampProvider = void 0;
    exports.dateTimestampProvider = {
      now: function() {
        return (exports.dateTimestampProvider.delegate || Date).now();
      },
      delegate: void 0
    };
  }
});

// node_modules/rxjs/dist/cjs/internal/ReplaySubject.js
var require_ReplaySubject = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/ReplaySubject.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ReplaySubject = void 0;
    var Subject_1 = require_Subject();
    var dateTimestampProvider_1 = require_dateTimestampProvider();
    var ReplaySubject = function(_super) {
      __extends(ReplaySubject2, _super);
      function ReplaySubject2(_bufferSize, _windowTime, _timestampProvider) {
        if (_bufferSize === void 0) {
          _bufferSize = Infinity;
        }
        if (_windowTime === void 0) {
          _windowTime = Infinity;
        }
        if (_timestampProvider === void 0) {
          _timestampProvider = dateTimestampProvider_1.dateTimestampProvider;
        }
        var _this = _super.call(this) || this;
        _this._bufferSize = _bufferSize;
        _this._windowTime = _windowTime;
        _this._timestampProvider = _timestampProvider;
        _this._buffer = [];
        _this._infiniteTimeWindow = true;
        _this._infiniteTimeWindow = _windowTime === Infinity;
        _this._bufferSize = Math.max(1, _bufferSize);
        _this._windowTime = Math.max(1, _windowTime);
        return _this;
      }
      ReplaySubject2.prototype.next = function(value) {
        var _a = this, isStopped = _a.isStopped, _buffer = _a._buffer, _infiniteTimeWindow = _a._infiniteTimeWindow, _timestampProvider = _a._timestampProvider, _windowTime = _a._windowTime;
        if (!isStopped) {
          _buffer.push(value);
          !_infiniteTimeWindow && _buffer.push(_timestampProvider.now() + _windowTime);
        }
        this._trimBuffer();
        _super.prototype.next.call(this, value);
      };
      ReplaySubject2.prototype._subscribe = function(subscriber) {
        this._throwIfClosed();
        this._trimBuffer();
        var subscription = this._innerSubscribe(subscriber);
        var _a = this, _infiniteTimeWindow = _a._infiniteTimeWindow, _buffer = _a._buffer;
        var copy = _buffer.slice();
        for (var i = 0; i < copy.length && !subscriber.closed; i += _infiniteTimeWindow ? 1 : 2) {
          subscriber.next(copy[i]);
        }
        this._checkFinalizedStatuses(subscriber);
        return subscription;
      };
      ReplaySubject2.prototype._trimBuffer = function() {
        var _a = this, _bufferSize = _a._bufferSize, _timestampProvider = _a._timestampProvider, _buffer = _a._buffer, _infiniteTimeWindow = _a._infiniteTimeWindow;
        var adjustedBufferSize = (_infiniteTimeWindow ? 1 : 2) * _bufferSize;
        _bufferSize < Infinity && adjustedBufferSize < _buffer.length && _buffer.splice(0, _buffer.length - adjustedBufferSize);
        if (!_infiniteTimeWindow) {
          var now = _timestampProvider.now();
          var last = 0;
          for (var i = 1; i < _buffer.length && _buffer[i] <= now; i += 2) {
            last = i;
          }
          last && _buffer.splice(0, last + 1);
        }
      };
      return ReplaySubject2;
    }(Subject_1.Subject);
    exports.ReplaySubject = ReplaySubject;
  }
});

// node_modules/rxjs/dist/cjs/internal/AsyncSubject.js
var require_AsyncSubject = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/AsyncSubject.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AsyncSubject = void 0;
    var Subject_1 = require_Subject();
    var AsyncSubject = function(_super) {
      __extends(AsyncSubject2, _super);
      function AsyncSubject2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._value = null;
        _this._hasValue = false;
        _this._isComplete = false;
        return _this;
      }
      AsyncSubject2.prototype._checkFinalizedStatuses = function(subscriber) {
        var _a = this, hasError = _a.hasError, _hasValue = _a._hasValue, _value = _a._value, thrownError = _a.thrownError, isStopped = _a.isStopped, _isComplete = _a._isComplete;
        if (hasError) {
          subscriber.error(thrownError);
        } else if (isStopped || _isComplete) {
          _hasValue && subscriber.next(_value);
          subscriber.complete();
        }
      };
      AsyncSubject2.prototype.next = function(value) {
        if (!this.isStopped) {
          this._value = value;
          this._hasValue = true;
        }
      };
      AsyncSubject2.prototype.complete = function() {
        var _a = this, _hasValue = _a._hasValue, _value = _a._value, _isComplete = _a._isComplete;
        if (!_isComplete) {
          this._isComplete = true;
          _hasValue && _super.prototype.next.call(this, _value);
          _super.prototype.complete.call(this);
        }
      };
      return AsyncSubject2;
    }(Subject_1.Subject);
    exports.AsyncSubject = AsyncSubject;
  }
});

// node_modules/rxjs/dist/cjs/internal/scheduler/Action.js
var require_Action = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/scheduler/Action.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Action = void 0;
    var Subscription_1 = require_Subscription();
    var Action = function(_super) {
      __extends(Action2, _super);
      function Action2(scheduler, work) {
        return _super.call(this) || this;
      }
      Action2.prototype.schedule = function(state, delay) {
        if (delay === void 0) {
          delay = 0;
        }
        return this;
      };
      return Action2;
    }(Subscription_1.Subscription);
    exports.Action = Action;
  }
});

// node_modules/rxjs/dist/cjs/internal/scheduler/intervalProvider.js
var require_intervalProvider = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/scheduler/intervalProvider.js"(exports) {
    "use strict";
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    var __spreadArray = exports && exports.__spreadArray || function(to, from4) {
      for (var i = 0, il = from4.length, j = to.length; i < il; i++, j++)
        to[j] = from4[i];
      return to;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.intervalProvider = void 0;
    exports.intervalProvider = {
      setInterval: function(handler, timeout) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
          args[_i - 2] = arguments[_i];
        }
        var delegate = exports.intervalProvider.delegate;
        if (delegate === null || delegate === void 0 ? void 0 : delegate.setInterval) {
          return delegate.setInterval.apply(delegate, __spreadArray([handler, timeout], __read(args)));
        }
        return setInterval.apply(void 0, __spreadArray([handler, timeout], __read(args)));
      },
      clearInterval: function(handle) {
        var delegate = exports.intervalProvider.delegate;
        return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearInterval) || clearInterval)(handle);
      },
      delegate: void 0
    };
  }
});

// node_modules/rxjs/dist/cjs/internal/scheduler/AsyncAction.js
var require_AsyncAction = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/scheduler/AsyncAction.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AsyncAction = void 0;
    var Action_1 = require_Action();
    var intervalProvider_1 = require_intervalProvider();
    var arrRemove_1 = require_arrRemove();
    var AsyncAction = function(_super) {
      __extends(AsyncAction2, _super);
      function AsyncAction2(scheduler, work) {
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        _this.pending = false;
        return _this;
      }
      AsyncAction2.prototype.schedule = function(state, delay) {
        var _a;
        if (delay === void 0) {
          delay = 0;
        }
        if (this.closed) {
          return this;
        }
        this.state = state;
        var id = this.id;
        var scheduler = this.scheduler;
        if (id != null) {
          this.id = this.recycleAsyncId(scheduler, id, delay);
        }
        this.pending = true;
        this.delay = delay;
        this.id = (_a = this.id) !== null && _a !== void 0 ? _a : this.requestAsyncId(scheduler, this.id, delay);
        return this;
      };
      AsyncAction2.prototype.requestAsyncId = function(scheduler, _id, delay) {
        if (delay === void 0) {
          delay = 0;
        }
        return intervalProvider_1.intervalProvider.setInterval(scheduler.flush.bind(scheduler, this), delay);
      };
      AsyncAction2.prototype.recycleAsyncId = function(_scheduler, id, delay) {
        if (delay === void 0) {
          delay = 0;
        }
        if (delay != null && this.delay === delay && this.pending === false) {
          return id;
        }
        if (id != null) {
          intervalProvider_1.intervalProvider.clearInterval(id);
        }
        return void 0;
      };
      AsyncAction2.prototype.execute = function(state, delay) {
        if (this.closed) {
          return new Error("executing a cancelled action");
        }
        this.pending = false;
        var error = this._execute(state, delay);
        if (error) {
          return error;
        } else if (this.pending === false && this.id != null) {
          this.id = this.recycleAsyncId(this.scheduler, this.id, null);
        }
      };
      AsyncAction2.prototype._execute = function(state, _delay) {
        var errored = false;
        var errorValue;
        try {
          this.work(state);
        } catch (e) {
          errored = true;
          errorValue = e ? e : new Error("Scheduled action threw falsy error");
        }
        if (errored) {
          this.unsubscribe();
          return errorValue;
        }
      };
      AsyncAction2.prototype.unsubscribe = function() {
        if (!this.closed) {
          var _a = this, id = _a.id, scheduler = _a.scheduler;
          var actions = scheduler.actions;
          this.work = this.state = this.scheduler = null;
          this.pending = false;
          arrRemove_1.arrRemove(actions, this);
          if (id != null) {
            this.id = this.recycleAsyncId(scheduler, id, null);
          }
          this.delay = null;
          _super.prototype.unsubscribe.call(this);
        }
      };
      return AsyncAction2;
    }(Action_1.Action);
    exports.AsyncAction = AsyncAction;
  }
});

// node_modules/rxjs/dist/cjs/internal/util/Immediate.js
var require_Immediate = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/util/Immediate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TestTools = exports.Immediate = void 0;
    var nextHandle = 1;
    var resolved;
    var activeHandles = {};
    function findAndClearHandle(handle) {
      if (handle in activeHandles) {
        delete activeHandles[handle];
        return true;
      }
      return false;
    }
    exports.Immediate = {
      setImmediate: function(cb) {
        var handle = nextHandle++;
        activeHandles[handle] = true;
        if (!resolved) {
          resolved = Promise.resolve();
        }
        resolved.then(function() {
          return findAndClearHandle(handle) && cb();
        });
        return handle;
      },
      clearImmediate: function(handle) {
        findAndClearHandle(handle);
      }
    };
    exports.TestTools = {
      pending: function() {
        return Object.keys(activeHandles).length;
      }
    };
  }
});

// node_modules/rxjs/dist/cjs/internal/scheduler/immediateProvider.js
var require_immediateProvider = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/scheduler/immediateProvider.js"(exports) {
    "use strict";
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    var __spreadArray = exports && exports.__spreadArray || function(to, from4) {
      for (var i = 0, il = from4.length, j = to.length; i < il; i++, j++)
        to[j] = from4[i];
      return to;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.immediateProvider = void 0;
    var Immediate_1 = require_Immediate();
    var setImmediate = Immediate_1.Immediate.setImmediate;
    var clearImmediate = Immediate_1.Immediate.clearImmediate;
    exports.immediateProvider = {
      setImmediate: function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        var delegate = exports.immediateProvider.delegate;
        return ((delegate === null || delegate === void 0 ? void 0 : delegate.setImmediate) || setImmediate).apply(void 0, __spreadArray([], __read(args)));
      },
      clearImmediate: function(handle) {
        var delegate = exports.immediateProvider.delegate;
        return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearImmediate) || clearImmediate)(handle);
      },
      delegate: void 0
    };
  }
});

// node_modules/rxjs/dist/cjs/internal/scheduler/AsapAction.js
var require_AsapAction = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/scheduler/AsapAction.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AsapAction = void 0;
    var AsyncAction_1 = require_AsyncAction();
    var immediateProvider_1 = require_immediateProvider();
    var AsapAction = function(_super) {
      __extends(AsapAction2, _super);
      function AsapAction2(scheduler, work) {
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        return _this;
      }
      AsapAction2.prototype.requestAsyncId = function(scheduler, id, delay) {
        if (delay === void 0) {
          delay = 0;
        }
        if (delay !== null && delay > 0) {
          return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
        }
        scheduler.actions.push(this);
        return scheduler._scheduled || (scheduler._scheduled = immediateProvider_1.immediateProvider.setImmediate(scheduler.flush.bind(scheduler, void 0)));
      };
      AsapAction2.prototype.recycleAsyncId = function(scheduler, id, delay) {
        var _a;
        if (delay === void 0) {
          delay = 0;
        }
        if (delay != null ? delay > 0 : this.delay > 0) {
          return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
        }
        var actions = scheduler.actions;
        if (id != null && ((_a = actions[actions.length - 1]) === null || _a === void 0 ? void 0 : _a.id) !== id) {
          immediateProvider_1.immediateProvider.clearImmediate(id);
          if (scheduler._scheduled === id) {
            scheduler._scheduled = void 0;
          }
        }
        return void 0;
      };
      return AsapAction2;
    }(AsyncAction_1.AsyncAction);
    exports.AsapAction = AsapAction;
  }
});

// node_modules/rxjs/dist/cjs/internal/Scheduler.js
var require_Scheduler = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/Scheduler.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Scheduler = void 0;
    var dateTimestampProvider_1 = require_dateTimestampProvider();
    var Scheduler = function() {
      function Scheduler2(schedulerActionCtor, now) {
        if (now === void 0) {
          now = Scheduler2.now;
        }
        this.schedulerActionCtor = schedulerActionCtor;
        this.now = now;
      }
      Scheduler2.prototype.schedule = function(work, delay, state) {
        if (delay === void 0) {
          delay = 0;
        }
        return new this.schedulerActionCtor(this, work).schedule(state, delay);
      };
      Scheduler2.now = dateTimestampProvider_1.dateTimestampProvider.now;
      return Scheduler2;
    }();
    exports.Scheduler = Scheduler;
  }
});

// node_modules/rxjs/dist/cjs/internal/scheduler/AsyncScheduler.js
var require_AsyncScheduler = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/scheduler/AsyncScheduler.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AsyncScheduler = void 0;
    var Scheduler_1 = require_Scheduler();
    var AsyncScheduler = function(_super) {
      __extends(AsyncScheduler2, _super);
      function AsyncScheduler2(SchedulerAction, now) {
        if (now === void 0) {
          now = Scheduler_1.Scheduler.now;
        }
        var _this = _super.call(this, SchedulerAction, now) || this;
        _this.actions = [];
        _this._active = false;
        return _this;
      }
      AsyncScheduler2.prototype.flush = function(action) {
        var actions = this.actions;
        if (this._active) {
          actions.push(action);
          return;
        }
        var error;
        this._active = true;
        do {
          if (error = action.execute(action.state, action.delay)) {
            break;
          }
        } while (action = actions.shift());
        this._active = false;
        if (error) {
          while (action = actions.shift()) {
            action.unsubscribe();
          }
          throw error;
        }
      };
      return AsyncScheduler2;
    }(Scheduler_1.Scheduler);
    exports.AsyncScheduler = AsyncScheduler;
  }
});

// node_modules/rxjs/dist/cjs/internal/scheduler/AsapScheduler.js
var require_AsapScheduler = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/scheduler/AsapScheduler.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AsapScheduler = void 0;
    var AsyncScheduler_1 = require_AsyncScheduler();
    var AsapScheduler = function(_super) {
      __extends(AsapScheduler2, _super);
      function AsapScheduler2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      AsapScheduler2.prototype.flush = function(action) {
        this._active = true;
        var flushId = this._scheduled;
        this._scheduled = void 0;
        var actions = this.actions;
        var error;
        action = action || actions.shift();
        do {
          if (error = action.execute(action.state, action.delay)) {
            break;
          }
        } while ((action = actions[0]) && action.id === flushId && actions.shift());
        this._active = false;
        if (error) {
          while ((action = actions[0]) && action.id === flushId && actions.shift()) {
            action.unsubscribe();
          }
          throw error;
        }
      };
      return AsapScheduler2;
    }(AsyncScheduler_1.AsyncScheduler);
    exports.AsapScheduler = AsapScheduler;
  }
});

// node_modules/rxjs/dist/cjs/internal/scheduler/asap.js
var require_asap = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/scheduler/asap.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.asap = exports.asapScheduler = void 0;
    var AsapAction_1 = require_AsapAction();
    var AsapScheduler_1 = require_AsapScheduler();
    exports.asapScheduler = new AsapScheduler_1.AsapScheduler(AsapAction_1.AsapAction);
    exports.asap = exports.asapScheduler;
  }
});

// node_modules/rxjs/dist/cjs/internal/scheduler/async.js
var require_async = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/scheduler/async.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.async = exports.asyncScheduler = void 0;
    var AsyncAction_1 = require_AsyncAction();
    var AsyncScheduler_1 = require_AsyncScheduler();
    exports.asyncScheduler = new AsyncScheduler_1.AsyncScheduler(AsyncAction_1.AsyncAction);
    exports.async = exports.asyncScheduler;
  }
});

// node_modules/rxjs/dist/cjs/internal/scheduler/QueueAction.js
var require_QueueAction = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/scheduler/QueueAction.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.QueueAction = void 0;
    var AsyncAction_1 = require_AsyncAction();
    var QueueAction = function(_super) {
      __extends(QueueAction2, _super);
      function QueueAction2(scheduler, work) {
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        return _this;
      }
      QueueAction2.prototype.schedule = function(state, delay) {
        if (delay === void 0) {
          delay = 0;
        }
        if (delay > 0) {
          return _super.prototype.schedule.call(this, state, delay);
        }
        this.delay = delay;
        this.state = state;
        this.scheduler.flush(this);
        return this;
      };
      QueueAction2.prototype.execute = function(state, delay) {
        return delay > 0 || this.closed ? _super.prototype.execute.call(this, state, delay) : this._execute(state, delay);
      };
      QueueAction2.prototype.requestAsyncId = function(scheduler, id, delay) {
        if (delay === void 0) {
          delay = 0;
        }
        if (delay != null && delay > 0 || delay == null && this.delay > 0) {
          return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
        }
        scheduler.flush(this);
        return 0;
      };
      return QueueAction2;
    }(AsyncAction_1.AsyncAction);
    exports.QueueAction = QueueAction;
  }
});

// node_modules/rxjs/dist/cjs/internal/scheduler/QueueScheduler.js
var require_QueueScheduler = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/scheduler/QueueScheduler.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.QueueScheduler = void 0;
    var AsyncScheduler_1 = require_AsyncScheduler();
    var QueueScheduler = function(_super) {
      __extends(QueueScheduler2, _super);
      function QueueScheduler2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      return QueueScheduler2;
    }(AsyncScheduler_1.AsyncScheduler);
    exports.QueueScheduler = QueueScheduler;
  }
});

// node_modules/rxjs/dist/cjs/internal/scheduler/queue.js
var require_queue = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/scheduler/queue.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.queue = exports.queueScheduler = void 0;
    var QueueAction_1 = require_QueueAction();
    var QueueScheduler_1 = require_QueueScheduler();
    exports.queueScheduler = new QueueScheduler_1.QueueScheduler(QueueAction_1.QueueAction);
    exports.queue = exports.queueScheduler;
  }
});

// node_modules/rxjs/dist/cjs/internal/scheduler/AnimationFrameAction.js
var require_AnimationFrameAction = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/scheduler/AnimationFrameAction.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AnimationFrameAction = void 0;
    var AsyncAction_1 = require_AsyncAction();
    var animationFrameProvider_1 = require_animationFrameProvider();
    var AnimationFrameAction = function(_super) {
      __extends(AnimationFrameAction2, _super);
      function AnimationFrameAction2(scheduler, work) {
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        return _this;
      }
      AnimationFrameAction2.prototype.requestAsyncId = function(scheduler, id, delay) {
        if (delay === void 0) {
          delay = 0;
        }
        if (delay !== null && delay > 0) {
          return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
        }
        scheduler.actions.push(this);
        return scheduler._scheduled || (scheduler._scheduled = animationFrameProvider_1.animationFrameProvider.requestAnimationFrame(function() {
          return scheduler.flush(void 0);
        }));
      };
      AnimationFrameAction2.prototype.recycleAsyncId = function(scheduler, id, delay) {
        var _a;
        if (delay === void 0) {
          delay = 0;
        }
        if (delay != null ? delay > 0 : this.delay > 0) {
          return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
        }
        var actions = scheduler.actions;
        if (id != null && ((_a = actions[actions.length - 1]) === null || _a === void 0 ? void 0 : _a.id) !== id) {
          animationFrameProvider_1.animationFrameProvider.cancelAnimationFrame(id);
          scheduler._scheduled = void 0;
        }
        return void 0;
      };
      return AnimationFrameAction2;
    }(AsyncAction_1.AsyncAction);
    exports.AnimationFrameAction = AnimationFrameAction;
  }
});

// node_modules/rxjs/dist/cjs/internal/scheduler/AnimationFrameScheduler.js
var require_AnimationFrameScheduler = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/scheduler/AnimationFrameScheduler.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AnimationFrameScheduler = void 0;
    var AsyncScheduler_1 = require_AsyncScheduler();
    var AnimationFrameScheduler = function(_super) {
      __extends(AnimationFrameScheduler2, _super);
      function AnimationFrameScheduler2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      AnimationFrameScheduler2.prototype.flush = function(action) {
        this._active = true;
        var flushId = this._scheduled;
        this._scheduled = void 0;
        var actions = this.actions;
        var error;
        action = action || actions.shift();
        do {
          if (error = action.execute(action.state, action.delay)) {
            break;
          }
        } while ((action = actions[0]) && action.id === flushId && actions.shift());
        this._active = false;
        if (error) {
          while ((action = actions[0]) && action.id === flushId && actions.shift()) {
            action.unsubscribe();
          }
          throw error;
        }
      };
      return AnimationFrameScheduler2;
    }(AsyncScheduler_1.AsyncScheduler);
    exports.AnimationFrameScheduler = AnimationFrameScheduler;
  }
});

// node_modules/rxjs/dist/cjs/internal/scheduler/animationFrame.js
var require_animationFrame = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/scheduler/animationFrame.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.animationFrame = exports.animationFrameScheduler = void 0;
    var AnimationFrameAction_1 = require_AnimationFrameAction();
    var AnimationFrameScheduler_1 = require_AnimationFrameScheduler();
    exports.animationFrameScheduler = new AnimationFrameScheduler_1.AnimationFrameScheduler(AnimationFrameAction_1.AnimationFrameAction);
    exports.animationFrame = exports.animationFrameScheduler;
  }
});

// node_modules/rxjs/dist/cjs/internal/scheduler/VirtualTimeScheduler.js
var require_VirtualTimeScheduler = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/scheduler/VirtualTimeScheduler.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.VirtualAction = exports.VirtualTimeScheduler = void 0;
    var AsyncAction_1 = require_AsyncAction();
    var Subscription_1 = require_Subscription();
    var AsyncScheduler_1 = require_AsyncScheduler();
    var VirtualTimeScheduler = function(_super) {
      __extends(VirtualTimeScheduler2, _super);
      function VirtualTimeScheduler2(schedulerActionCtor, maxFrames) {
        if (schedulerActionCtor === void 0) {
          schedulerActionCtor = VirtualAction;
        }
        if (maxFrames === void 0) {
          maxFrames = Infinity;
        }
        var _this = _super.call(this, schedulerActionCtor, function() {
          return _this.frame;
        }) || this;
        _this.maxFrames = maxFrames;
        _this.frame = 0;
        _this.index = -1;
        return _this;
      }
      VirtualTimeScheduler2.prototype.flush = function() {
        var _a = this, actions = _a.actions, maxFrames = _a.maxFrames;
        var error;
        var action;
        while ((action = actions[0]) && action.delay <= maxFrames) {
          actions.shift();
          this.frame = action.delay;
          if (error = action.execute(action.state, action.delay)) {
            break;
          }
        }
        if (error) {
          while (action = actions.shift()) {
            action.unsubscribe();
          }
          throw error;
        }
      };
      VirtualTimeScheduler2.frameTimeFactor = 10;
      return VirtualTimeScheduler2;
    }(AsyncScheduler_1.AsyncScheduler);
    exports.VirtualTimeScheduler = VirtualTimeScheduler;
    var VirtualAction = function(_super) {
      __extends(VirtualAction2, _super);
      function VirtualAction2(scheduler, work, index) {
        if (index === void 0) {
          index = scheduler.index += 1;
        }
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        _this.index = index;
        _this.active = true;
        _this.index = scheduler.index = index;
        return _this;
      }
      VirtualAction2.prototype.schedule = function(state, delay) {
        if (delay === void 0) {
          delay = 0;
        }
        if (Number.isFinite(delay)) {
          if (!this.id) {
            return _super.prototype.schedule.call(this, state, delay);
          }
          this.active = false;
          var action = new VirtualAction2(this.scheduler, this.work);
          this.add(action);
          return action.schedule(state, delay);
        } else {
          return Subscription_1.Subscription.EMPTY;
        }
      };
      VirtualAction2.prototype.requestAsyncId = function(scheduler, id, delay) {
        if (delay === void 0) {
          delay = 0;
        }
        this.delay = scheduler.frame + delay;
        var actions = scheduler.actions;
        actions.push(this);
        actions.sort(VirtualAction2.sortActions);
        return 1;
      };
      VirtualAction2.prototype.recycleAsyncId = function(scheduler, id, delay) {
        if (delay === void 0) {
          delay = 0;
        }
        return void 0;
      };
      VirtualAction2.prototype._execute = function(state, delay) {
        if (this.active === true) {
          return _super.prototype._execute.call(this, state, delay);
        }
      };
      VirtualAction2.sortActions = function(a, b) {
        if (a.delay === b.delay) {
          if (a.index === b.index) {
            return 0;
          } else if (a.index > b.index) {
            return 1;
          } else {
            return -1;
          }
        } else if (a.delay > b.delay) {
          return 1;
        } else {
          return -1;
        }
      };
      return VirtualAction2;
    }(AsyncAction_1.AsyncAction);
    exports.VirtualAction = VirtualAction;
  }
});

// node_modules/rxjs/dist/cjs/internal/observable/empty.js
var require_empty = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/observable/empty.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.empty = exports.EMPTY = void 0;
    var Observable_1 = require_Observable();
    exports.EMPTY = new Observable_1.Observable(function(subscriber) {
      return subscriber.complete();
    });
    function empty(scheduler) {
      return scheduler ? emptyScheduled(scheduler) : exports.EMPTY;
    }
    exports.empty = empty;
    function emptyScheduled(scheduler) {
      return new Observable_1.Observable(function(subscriber) {
        return scheduler.schedule(function() {
          return subscriber.complete();
        });
      });
    }
  }
});

// node_modules/rxjs/dist/cjs/internal/util/isScheduler.js
var require_isScheduler = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/util/isScheduler.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isScheduler = void 0;
    var isFunction_1 = require_isFunction();
    function isScheduler(value) {
      return value && isFunction_1.isFunction(value.schedule);
    }
    exports.isScheduler = isScheduler;
  }
});

// node_modules/rxjs/dist/cjs/internal/util/args.js
var require_args = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/util/args.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.popNumber = exports.popScheduler = exports.popResultSelector = void 0;
    var isFunction_1 = require_isFunction();
    var isScheduler_1 = require_isScheduler();
    function last(arr) {
      return arr[arr.length - 1];
    }
    function popResultSelector(args) {
      return isFunction_1.isFunction(last(args)) ? args.pop() : void 0;
    }
    exports.popResultSelector = popResultSelector;
    function popScheduler(args) {
      return isScheduler_1.isScheduler(last(args)) ? args.pop() : void 0;
    }
    exports.popScheduler = popScheduler;
    function popNumber(args, defaultValue) {
      return typeof last(args) === "number" ? args.pop() : defaultValue;
    }
    exports.popNumber = popNumber;
  }
});

// node_modules/rxjs/dist/cjs/internal/util/isArrayLike.js
var require_isArrayLike = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/util/isArrayLike.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isArrayLike = void 0;
    exports.isArrayLike = function(x) {
      return x && typeof x.length === "number" && typeof x !== "function";
    };
  }
});

// node_modules/rxjs/dist/cjs/internal/util/isPromise.js
var require_isPromise = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/util/isPromise.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isPromise = void 0;
    var isFunction_1 = require_isFunction();
    function isPromise(value) {
      return isFunction_1.isFunction(value === null || value === void 0 ? void 0 : value.then);
    }
    exports.isPromise = isPromise;
  }
});

// node_modules/rxjs/dist/cjs/internal/util/isInteropObservable.js
var require_isInteropObservable = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/util/isInteropObservable.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isInteropObservable = void 0;
    var observable_1 = require_observable();
    var isFunction_1 = require_isFunction();
    function isInteropObservable(input) {
      return isFunction_1.isFunction(input[observable_1.observable]);
    }
    exports.isInteropObservable = isInteropObservable;
  }
});

// node_modules/rxjs/dist/cjs/internal/util/isAsyncIterable.js
var require_isAsyncIterable = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/util/isAsyncIterable.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isAsyncIterable = void 0;
    var isFunction_1 = require_isFunction();
    function isAsyncIterable(obj) {
      return Symbol.asyncIterator && isFunction_1.isFunction(obj === null || obj === void 0 ? void 0 : obj[Symbol.asyncIterator]);
    }
    exports.isAsyncIterable = isAsyncIterable;
  }
});

// node_modules/rxjs/dist/cjs/internal/util/throwUnobservableError.js
var require_throwUnobservableError = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/util/throwUnobservableError.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createInvalidObservableTypeError = void 0;
    function createInvalidObservableTypeError(input) {
      return new TypeError("You provided " + (input !== null && typeof input === "object" ? "an invalid object" : "'" + input + "'") + " where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.");
    }
    exports.createInvalidObservableTypeError = createInvalidObservableTypeError;
  }
});

// node_modules/rxjs/dist/cjs/internal/symbol/iterator.js
var require_iterator = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/symbol/iterator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.iterator = exports.getSymbolIterator = void 0;
    function getSymbolIterator() {
      if (typeof Symbol !== "function" || !Symbol.iterator) {
        return "@@iterator";
      }
      return Symbol.iterator;
    }
    exports.getSymbolIterator = getSymbolIterator;
    exports.iterator = getSymbolIterator();
  }
});

// node_modules/rxjs/dist/cjs/internal/util/isIterable.js
var require_isIterable = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/util/isIterable.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isIterable = void 0;
    var iterator_1 = require_iterator();
    var isFunction_1 = require_isFunction();
    function isIterable(input) {
      return isFunction_1.isFunction(input === null || input === void 0 ? void 0 : input[iterator_1.iterator]);
    }
    exports.isIterable = isIterable;
  }
});

// node_modules/rxjs/dist/cjs/internal/util/isReadableStreamLike.js
var require_isReadableStreamLike = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/util/isReadableStreamLike.js"(exports) {
    "use strict";
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    var __await = exports && exports.__await || function(v) {
      return this instanceof __await ? (this.v = v, this) : new __await(v);
    };
    var __asyncGenerator = exports && exports.__asyncGenerator || function(thisArg, _arguments, generator) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var g = generator.apply(thisArg, _arguments || []), i, q = [];
      return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i;
      function verb(n) {
        if (g[n])
          i[n] = function(v) {
            return new Promise(function(a, b) {
              q.push([n, v, a, b]) > 1 || resume(n, v);
            });
          };
      }
      function resume(n, v) {
        try {
          step(g[n](v));
        } catch (e) {
          settle(q[0][3], e);
        }
      }
      function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
      }
      function fulfill(value) {
        resume("next", value);
      }
      function reject(value) {
        resume("throw", value);
      }
      function settle(f, v) {
        if (f(v), q.shift(), q.length)
          resume(q[0][0], q[0][1]);
      }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isReadableStreamLike = exports.readableStreamLikeToAsyncGenerator = void 0;
    var isFunction_1 = require_isFunction();
    function readableStreamLikeToAsyncGenerator(readableStream) {
      return __asyncGenerator(this, arguments, function readableStreamLikeToAsyncGenerator_1() {
        var reader, _a, value, done;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              reader = readableStream.getReader();
              _b.label = 1;
            case 1:
              _b.trys.push([1, , 9, 10]);
              _b.label = 2;
            case 2:
              if (false)
                return [3, 8];
              return [4, __await(reader.read())];
            case 3:
              _a = _b.sent(), value = _a.value, done = _a.done;
              if (!done)
                return [3, 5];
              return [4, __await(void 0)];
            case 4:
              return [2, _b.sent()];
            case 5:
              return [4, __await(value)];
            case 6:
              return [4, _b.sent()];
            case 7:
              _b.sent();
              return [3, 2];
            case 8:
              return [3, 10];
            case 9:
              reader.releaseLock();
              return [7];
            case 10:
              return [2];
          }
        });
      });
    }
    exports.readableStreamLikeToAsyncGenerator = readableStreamLikeToAsyncGenerator;
    function isReadableStreamLike(obj) {
      return isFunction_1.isFunction(obj === null || obj === void 0 ? void 0 : obj.getReader);
    }
    exports.isReadableStreamLike = isReadableStreamLike;
  }
});

// node_modules/rxjs/dist/cjs/internal/observable/innerFrom.js
var require_innerFrom = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/observable/innerFrom.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    var __asyncValues = exports && exports.__asyncValues || function(o) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var m = o[Symbol.asyncIterator], i;
      return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i);
      function verb(n) {
        i[n] = o[n] && function(v) {
          return new Promise(function(resolve, reject) {
            v = o[n](v), settle(resolve, reject, v.done, v.value);
          });
        };
      }
      function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v2) {
          resolve({ value: v2, done: d });
        }, reject);
      }
    };
    var __values = exports && exports.__values || function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromReadableStreamLike = exports.fromAsyncIterable = exports.fromIterable = exports.fromPromise = exports.fromArrayLike = exports.fromInteropObservable = exports.innerFrom = void 0;
    var isArrayLike_1 = require_isArrayLike();
    var isPromise_1 = require_isPromise();
    var Observable_1 = require_Observable();
    var isInteropObservable_1 = require_isInteropObservable();
    var isAsyncIterable_1 = require_isAsyncIterable();
    var throwUnobservableError_1 = require_throwUnobservableError();
    var isIterable_1 = require_isIterable();
    var isReadableStreamLike_1 = require_isReadableStreamLike();
    var isFunction_1 = require_isFunction();
    var reportUnhandledError_1 = require_reportUnhandledError();
    var observable_1 = require_observable();
    function innerFrom(input) {
      if (input instanceof Observable_1.Observable) {
        return input;
      }
      if (input != null) {
        if (isInteropObservable_1.isInteropObservable(input)) {
          return fromInteropObservable(input);
        }
        if (isArrayLike_1.isArrayLike(input)) {
          return fromArrayLike(input);
        }
        if (isPromise_1.isPromise(input)) {
          return fromPromise(input);
        }
        if (isAsyncIterable_1.isAsyncIterable(input)) {
          return fromAsyncIterable(input);
        }
        if (isIterable_1.isIterable(input)) {
          return fromIterable(input);
        }
        if (isReadableStreamLike_1.isReadableStreamLike(input)) {
          return fromReadableStreamLike(input);
        }
      }
      throw throwUnobservableError_1.createInvalidObservableTypeError(input);
    }
    exports.innerFrom = innerFrom;
    function fromInteropObservable(obj) {
      return new Observable_1.Observable(function(subscriber) {
        var obs = obj[observable_1.observable]();
        if (isFunction_1.isFunction(obs.subscribe)) {
          return obs.subscribe(subscriber);
        }
        throw new TypeError("Provided object does not correctly implement Symbol.observable");
      });
    }
    exports.fromInteropObservable = fromInteropObservable;
    function fromArrayLike(array) {
      return new Observable_1.Observable(function(subscriber) {
        for (var i = 0; i < array.length && !subscriber.closed; i++) {
          subscriber.next(array[i]);
        }
        subscriber.complete();
      });
    }
    exports.fromArrayLike = fromArrayLike;
    function fromPromise(promise) {
      return new Observable_1.Observable(function(subscriber) {
        promise.then(function(value) {
          if (!subscriber.closed) {
            subscriber.next(value);
            subscriber.complete();
          }
        }, function(err) {
          return subscriber.error(err);
        }).then(null, reportUnhandledError_1.reportUnhandledError);
      });
    }
    exports.fromPromise = fromPromise;
    function fromIterable(iterable) {
      return new Observable_1.Observable(function(subscriber) {
        var e_1, _a;
        try {
          for (var iterable_1 = __values(iterable), iterable_1_1 = iterable_1.next(); !iterable_1_1.done; iterable_1_1 = iterable_1.next()) {
            var value = iterable_1_1.value;
            subscriber.next(value);
            if (subscriber.closed) {
              return;
            }
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return))
              _a.call(iterable_1);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
        subscriber.complete();
      });
    }
    exports.fromIterable = fromIterable;
    function fromAsyncIterable(asyncIterable) {
      return new Observable_1.Observable(function(subscriber) {
        process(asyncIterable, subscriber).catch(function(err) {
          return subscriber.error(err);
        });
      });
    }
    exports.fromAsyncIterable = fromAsyncIterable;
    function fromReadableStreamLike(readableStream) {
      return fromAsyncIterable(isReadableStreamLike_1.readableStreamLikeToAsyncGenerator(readableStream));
    }
    exports.fromReadableStreamLike = fromReadableStreamLike;
    function process(asyncIterable, subscriber) {
      var asyncIterable_1, asyncIterable_1_1;
      var e_2, _a;
      return __awaiter(this, void 0, void 0, function() {
        var value, e_2_1;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              _b.trys.push([0, 5, 6, 11]);
              asyncIterable_1 = __asyncValues(asyncIterable);
              _b.label = 1;
            case 1:
              return [4, asyncIterable_1.next()];
            case 2:
              if (!(asyncIterable_1_1 = _b.sent(), !asyncIterable_1_1.done))
                return [3, 4];
              value = asyncIterable_1_1.value;
              subscriber.next(value);
              if (subscriber.closed) {
                return [2];
              }
              _b.label = 3;
            case 3:
              return [3, 1];
            case 4:
              return [3, 11];
            case 5:
              e_2_1 = _b.sent();
              e_2 = { error: e_2_1 };
              return [3, 11];
            case 6:
              _b.trys.push([6, , 9, 10]);
              if (!(asyncIterable_1_1 && !asyncIterable_1_1.done && (_a = asyncIterable_1.return)))
                return [3, 8];
              return [4, _a.call(asyncIterable_1)];
            case 7:
              _b.sent();
              _b.label = 8;
            case 8:
              return [3, 10];
            case 9:
              if (e_2)
                throw e_2.error;
              return [7];
            case 10:
              return [7];
            case 11:
              subscriber.complete();
              return [2];
          }
        });
      });
    }
  }
});

// node_modules/rxjs/dist/cjs/internal/util/executeSchedule.js
var require_executeSchedule = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/util/executeSchedule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.executeSchedule = void 0;
    function executeSchedule(parentSubscription, scheduler, work, delay, repeat) {
      if (delay === void 0) {
        delay = 0;
      }
      if (repeat === void 0) {
        repeat = false;
      }
      var scheduleSubscription = scheduler.schedule(function() {
        work();
        if (repeat) {
          parentSubscription.add(this.schedule(null, delay));
        } else {
          this.unsubscribe();
        }
      }, delay);
      parentSubscription.add(scheduleSubscription);
      if (!repeat) {
        return scheduleSubscription;
      }
    }
    exports.executeSchedule = executeSchedule;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/observeOn.js
var require_observeOn = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/observeOn.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.observeOn = void 0;
    var executeSchedule_1 = require_executeSchedule();
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    function observeOn(scheduler, delay) {
      if (delay === void 0) {
        delay = 0;
      }
      return lift_1.operate(function(source, subscriber) {
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
          return executeSchedule_1.executeSchedule(subscriber, scheduler, function() {
            return subscriber.next(value);
          }, delay);
        }, function() {
          return executeSchedule_1.executeSchedule(subscriber, scheduler, function() {
            return subscriber.complete();
          }, delay);
        }, function(err) {
          return executeSchedule_1.executeSchedule(subscriber, scheduler, function() {
            return subscriber.error(err);
          }, delay);
        }));
      });
    }
    exports.observeOn = observeOn;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/subscribeOn.js
var require_subscribeOn = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/subscribeOn.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.subscribeOn = void 0;
    var lift_1 = require_lift();
    function subscribeOn(scheduler, delay) {
      if (delay === void 0) {
        delay = 0;
      }
      return lift_1.operate(function(source, subscriber) {
        subscriber.add(scheduler.schedule(function() {
          return source.subscribe(subscriber);
        }, delay));
      });
    }
    exports.subscribeOn = subscribeOn;
  }
});

// node_modules/rxjs/dist/cjs/internal/scheduled/scheduleObservable.js
var require_scheduleObservable = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/scheduled/scheduleObservable.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.scheduleObservable = void 0;
    var innerFrom_1 = require_innerFrom();
    var observeOn_1 = require_observeOn();
    var subscribeOn_1 = require_subscribeOn();
    function scheduleObservable(input, scheduler) {
      return innerFrom_1.innerFrom(input).pipe(subscribeOn_1.subscribeOn(scheduler), observeOn_1.observeOn(scheduler));
    }
    exports.scheduleObservable = scheduleObservable;
  }
});

// node_modules/rxjs/dist/cjs/internal/scheduled/schedulePromise.js
var require_schedulePromise = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/scheduled/schedulePromise.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.schedulePromise = void 0;
    var innerFrom_1 = require_innerFrom();
    var observeOn_1 = require_observeOn();
    var subscribeOn_1 = require_subscribeOn();
    function schedulePromise(input, scheduler) {
      return innerFrom_1.innerFrom(input).pipe(subscribeOn_1.subscribeOn(scheduler), observeOn_1.observeOn(scheduler));
    }
    exports.schedulePromise = schedulePromise;
  }
});

// node_modules/rxjs/dist/cjs/internal/scheduled/scheduleArray.js
var require_scheduleArray = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/scheduled/scheduleArray.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.scheduleArray = void 0;
    var Observable_1 = require_Observable();
    function scheduleArray(input, scheduler) {
      return new Observable_1.Observable(function(subscriber) {
        var i = 0;
        return scheduler.schedule(function() {
          if (i === input.length) {
            subscriber.complete();
          } else {
            subscriber.next(input[i++]);
            if (!subscriber.closed) {
              this.schedule();
            }
          }
        });
      });
    }
    exports.scheduleArray = scheduleArray;
  }
});

// node_modules/rxjs/dist/cjs/internal/scheduled/scheduleIterable.js
var require_scheduleIterable = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/scheduled/scheduleIterable.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.scheduleIterable = void 0;
    var Observable_1 = require_Observable();
    var iterator_1 = require_iterator();
    var isFunction_1 = require_isFunction();
    var executeSchedule_1 = require_executeSchedule();
    function scheduleIterable(input, scheduler) {
      return new Observable_1.Observable(function(subscriber) {
        var iterator;
        executeSchedule_1.executeSchedule(subscriber, scheduler, function() {
          iterator = input[iterator_1.iterator]();
          executeSchedule_1.executeSchedule(subscriber, scheduler, function() {
            var _a;
            var value;
            var done;
            try {
              _a = iterator.next(), value = _a.value, done = _a.done;
            } catch (err) {
              subscriber.error(err);
              return;
            }
            if (done) {
              subscriber.complete();
            } else {
              subscriber.next(value);
            }
          }, 0, true);
        });
        return function() {
          return isFunction_1.isFunction(iterator === null || iterator === void 0 ? void 0 : iterator.return) && iterator.return();
        };
      });
    }
    exports.scheduleIterable = scheduleIterable;
  }
});

// node_modules/rxjs/dist/cjs/internal/scheduled/scheduleAsyncIterable.js
var require_scheduleAsyncIterable = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/scheduled/scheduleAsyncIterable.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.scheduleAsyncIterable = void 0;
    var Observable_1 = require_Observable();
    var executeSchedule_1 = require_executeSchedule();
    function scheduleAsyncIterable(input, scheduler) {
      if (!input) {
        throw new Error("Iterable cannot be null");
      }
      return new Observable_1.Observable(function(subscriber) {
        executeSchedule_1.executeSchedule(subscriber, scheduler, function() {
          var iterator = input[Symbol.asyncIterator]();
          executeSchedule_1.executeSchedule(subscriber, scheduler, function() {
            iterator.next().then(function(result) {
              if (result.done) {
                subscriber.complete();
              } else {
                subscriber.next(result.value);
              }
            });
          }, 0, true);
        });
      });
    }
    exports.scheduleAsyncIterable = scheduleAsyncIterable;
  }
});

// node_modules/rxjs/dist/cjs/internal/scheduled/scheduleReadableStreamLike.js
var require_scheduleReadableStreamLike = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/scheduled/scheduleReadableStreamLike.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.scheduleReadableStreamLike = void 0;
    var scheduleAsyncIterable_1 = require_scheduleAsyncIterable();
    var isReadableStreamLike_1 = require_isReadableStreamLike();
    function scheduleReadableStreamLike(input, scheduler) {
      return scheduleAsyncIterable_1.scheduleAsyncIterable(isReadableStreamLike_1.readableStreamLikeToAsyncGenerator(input), scheduler);
    }
    exports.scheduleReadableStreamLike = scheduleReadableStreamLike;
  }
});

// node_modules/rxjs/dist/cjs/internal/scheduled/scheduled.js
var require_scheduled = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/scheduled/scheduled.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.scheduled = void 0;
    var scheduleObservable_1 = require_scheduleObservable();
    var schedulePromise_1 = require_schedulePromise();
    var scheduleArray_1 = require_scheduleArray();
    var scheduleIterable_1 = require_scheduleIterable();
    var scheduleAsyncIterable_1 = require_scheduleAsyncIterable();
    var isInteropObservable_1 = require_isInteropObservable();
    var isPromise_1 = require_isPromise();
    var isArrayLike_1 = require_isArrayLike();
    var isIterable_1 = require_isIterable();
    var isAsyncIterable_1 = require_isAsyncIterable();
    var throwUnobservableError_1 = require_throwUnobservableError();
    var isReadableStreamLike_1 = require_isReadableStreamLike();
    var scheduleReadableStreamLike_1 = require_scheduleReadableStreamLike();
    function scheduled(input, scheduler) {
      if (input != null) {
        if (isInteropObservable_1.isInteropObservable(input)) {
          return scheduleObservable_1.scheduleObservable(input, scheduler);
        }
        if (isArrayLike_1.isArrayLike(input)) {
          return scheduleArray_1.scheduleArray(input, scheduler);
        }
        if (isPromise_1.isPromise(input)) {
          return schedulePromise_1.schedulePromise(input, scheduler);
        }
        if (isAsyncIterable_1.isAsyncIterable(input)) {
          return scheduleAsyncIterable_1.scheduleAsyncIterable(input, scheduler);
        }
        if (isIterable_1.isIterable(input)) {
          return scheduleIterable_1.scheduleIterable(input, scheduler);
        }
        if (isReadableStreamLike_1.isReadableStreamLike(input)) {
          return scheduleReadableStreamLike_1.scheduleReadableStreamLike(input, scheduler);
        }
      }
      throw throwUnobservableError_1.createInvalidObservableTypeError(input);
    }
    exports.scheduled = scheduled;
  }
});

// node_modules/rxjs/dist/cjs/internal/observable/from.js
var require_from = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/observable/from.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.from = void 0;
    var scheduled_1 = require_scheduled();
    var innerFrom_1 = require_innerFrom();
    function from4(input, scheduler) {
      return scheduler ? scheduled_1.scheduled(input, scheduler) : innerFrom_1.innerFrom(input);
    }
    exports.from = from4;
  }
});

// node_modules/rxjs/dist/cjs/internal/observable/of.js
var require_of = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/observable/of.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.of = void 0;
    var args_1 = require_args();
    var from_1 = require_from();
    function of() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      var scheduler = args_1.popScheduler(args);
      return from_1.from(args, scheduler);
    }
    exports.of = of;
  }
});

// node_modules/rxjs/dist/cjs/internal/observable/throwError.js
var require_throwError = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/observable/throwError.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.throwError = void 0;
    var Observable_1 = require_Observable();
    var isFunction_1 = require_isFunction();
    function throwError(errorOrErrorFactory, scheduler) {
      var errorFactory = isFunction_1.isFunction(errorOrErrorFactory) ? errorOrErrorFactory : function() {
        return errorOrErrorFactory;
      };
      var init = function(subscriber) {
        return subscriber.error(errorFactory());
      };
      return new Observable_1.Observable(scheduler ? function(subscriber) {
        return scheduler.schedule(init, 0, subscriber);
      } : init);
    }
    exports.throwError = throwError;
  }
});

// node_modules/rxjs/dist/cjs/internal/Notification.js
var require_Notification = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/Notification.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.observeNotification = exports.Notification = exports.NotificationKind = void 0;
    var empty_1 = require_empty();
    var of_1 = require_of();
    var throwError_1 = require_throwError();
    var isFunction_1 = require_isFunction();
    var NotificationKind;
    (function(NotificationKind2) {
      NotificationKind2["NEXT"] = "N";
      NotificationKind2["ERROR"] = "E";
      NotificationKind2["COMPLETE"] = "C";
    })(NotificationKind = exports.NotificationKind || (exports.NotificationKind = {}));
    var Notification = function() {
      function Notification2(kind, value, error) {
        this.kind = kind;
        this.value = value;
        this.error = error;
        this.hasValue = kind === "N";
      }
      Notification2.prototype.observe = function(observer) {
        return observeNotification(this, observer);
      };
      Notification2.prototype.do = function(nextHandler, errorHandler, completeHandler) {
        var _a = this, kind = _a.kind, value = _a.value, error = _a.error;
        return kind === "N" ? nextHandler === null || nextHandler === void 0 ? void 0 : nextHandler(value) : kind === "E" ? errorHandler === null || errorHandler === void 0 ? void 0 : errorHandler(error) : completeHandler === null || completeHandler === void 0 ? void 0 : completeHandler();
      };
      Notification2.prototype.accept = function(nextOrObserver, error, complete) {
        var _a;
        return isFunction_1.isFunction((_a = nextOrObserver) === null || _a === void 0 ? void 0 : _a.next) ? this.observe(nextOrObserver) : this.do(nextOrObserver, error, complete);
      };
      Notification2.prototype.toObservable = function() {
        var _a = this, kind = _a.kind, value = _a.value, error = _a.error;
        var result = kind === "N" ? of_1.of(value) : kind === "E" ? throwError_1.throwError(function() {
          return error;
        }) : kind === "C" ? empty_1.EMPTY : 0;
        if (!result) {
          throw new TypeError("Unexpected notification kind " + kind);
        }
        return result;
      };
      Notification2.createNext = function(value) {
        return new Notification2("N", value);
      };
      Notification2.createError = function(err) {
        return new Notification2("E", void 0, err);
      };
      Notification2.createComplete = function() {
        return Notification2.completeNotification;
      };
      Notification2.completeNotification = new Notification2("C");
      return Notification2;
    }();
    exports.Notification = Notification;
    function observeNotification(notification, observer) {
      var _a, _b, _c;
      var _d = notification, kind = _d.kind, value = _d.value, error = _d.error;
      if (typeof kind !== "string") {
        throw new TypeError('Invalid notification, missing "kind"');
      }
      kind === "N" ? (_a = observer.next) === null || _a === void 0 ? void 0 : _a.call(observer, value) : kind === "E" ? (_b = observer.error) === null || _b === void 0 ? void 0 : _b.call(observer, error) : (_c = observer.complete) === null || _c === void 0 ? void 0 : _c.call(observer);
    }
    exports.observeNotification = observeNotification;
  }
});

// node_modules/rxjs/dist/cjs/internal/util/isObservable.js
var require_isObservable = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/util/isObservable.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isObservable = void 0;
    var Observable_1 = require_Observable();
    var isFunction_1 = require_isFunction();
    function isObservable(obj) {
      return !!obj && (obj instanceof Observable_1.Observable || isFunction_1.isFunction(obj.lift) && isFunction_1.isFunction(obj.subscribe));
    }
    exports.isObservable = isObservable;
  }
});

// node_modules/rxjs/dist/cjs/internal/util/EmptyError.js
var require_EmptyError = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/util/EmptyError.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EmptyError = void 0;
    var createErrorClass_1 = require_createErrorClass();
    exports.EmptyError = createErrorClass_1.createErrorClass(function(_super) {
      return function EmptyErrorImpl() {
        _super(this);
        this.name = "EmptyError";
        this.message = "no elements in sequence";
      };
    });
  }
});

// node_modules/rxjs/dist/cjs/internal/lastValueFrom.js
var require_lastValueFrom = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/lastValueFrom.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.lastValueFrom = void 0;
    var EmptyError_1 = require_EmptyError();
    function lastValueFrom(source, config) {
      var hasConfig = typeof config === "object";
      return new Promise(function(resolve, reject) {
        var _hasValue = false;
        var _value;
        source.subscribe({
          next: function(value) {
            _value = value;
            _hasValue = true;
          },
          error: reject,
          complete: function() {
            if (_hasValue) {
              resolve(_value);
            } else if (hasConfig) {
              resolve(config.defaultValue);
            } else {
              reject(new EmptyError_1.EmptyError());
            }
          }
        });
      });
    }
    exports.lastValueFrom = lastValueFrom;
  }
});

// node_modules/rxjs/dist/cjs/internal/firstValueFrom.js
var require_firstValueFrom = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/firstValueFrom.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.firstValueFrom = void 0;
    var EmptyError_1 = require_EmptyError();
    var Subscriber_1 = require_Subscriber();
    function firstValueFrom(source, config) {
      var hasConfig = typeof config === "object";
      return new Promise(function(resolve, reject) {
        var subscriber = new Subscriber_1.SafeSubscriber({
          next: function(value) {
            resolve(value);
            subscriber.unsubscribe();
          },
          error: reject,
          complete: function() {
            if (hasConfig) {
              resolve(config.defaultValue);
            } else {
              reject(new EmptyError_1.EmptyError());
            }
          }
        });
        source.subscribe(subscriber);
      });
    }
    exports.firstValueFrom = firstValueFrom;
  }
});

// node_modules/rxjs/dist/cjs/internal/util/ArgumentOutOfRangeError.js
var require_ArgumentOutOfRangeError = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/util/ArgumentOutOfRangeError.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ArgumentOutOfRangeError = void 0;
    var createErrorClass_1 = require_createErrorClass();
    exports.ArgumentOutOfRangeError = createErrorClass_1.createErrorClass(function(_super) {
      return function ArgumentOutOfRangeErrorImpl() {
        _super(this);
        this.name = "ArgumentOutOfRangeError";
        this.message = "argument out of range";
      };
    });
  }
});

// node_modules/rxjs/dist/cjs/internal/util/NotFoundError.js
var require_NotFoundError = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/util/NotFoundError.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NotFoundError = void 0;
    var createErrorClass_1 = require_createErrorClass();
    exports.NotFoundError = createErrorClass_1.createErrorClass(function(_super) {
      return function NotFoundErrorImpl(message) {
        _super(this);
        this.name = "NotFoundError";
        this.message = message;
      };
    });
  }
});

// node_modules/rxjs/dist/cjs/internal/util/SequenceError.js
var require_SequenceError = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/util/SequenceError.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SequenceError = void 0;
    var createErrorClass_1 = require_createErrorClass();
    exports.SequenceError = createErrorClass_1.createErrorClass(function(_super) {
      return function SequenceErrorImpl(message) {
        _super(this);
        this.name = "SequenceError";
        this.message = message;
      };
    });
  }
});

// node_modules/rxjs/dist/cjs/internal/util/isDate.js
var require_isDate = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/util/isDate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isValidDate = void 0;
    function isValidDate(value) {
      return value instanceof Date && !isNaN(value);
    }
    exports.isValidDate = isValidDate;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/timeout.js
var require_timeout = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/timeout.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.timeout = exports.TimeoutError = void 0;
    var async_1 = require_async();
    var isDate_1 = require_isDate();
    var lift_1 = require_lift();
    var innerFrom_1 = require_innerFrom();
    var createErrorClass_1 = require_createErrorClass();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    var executeSchedule_1 = require_executeSchedule();
    exports.TimeoutError = createErrorClass_1.createErrorClass(function(_super) {
      return function TimeoutErrorImpl(info) {
        if (info === void 0) {
          info = null;
        }
        _super(this);
        this.message = "Timeout has occurred";
        this.name = "TimeoutError";
        this.info = info;
      };
    });
    function timeout(config, schedulerArg) {
      var _a = isDate_1.isValidDate(config) ? { first: config } : typeof config === "number" ? { each: config } : config, first = _a.first, each = _a.each, _b = _a.with, _with = _b === void 0 ? timeoutErrorFactory : _b, _c = _a.scheduler, scheduler = _c === void 0 ? schedulerArg !== null && schedulerArg !== void 0 ? schedulerArg : async_1.asyncScheduler : _c, _d = _a.meta, meta = _d === void 0 ? null : _d;
      if (first == null && each == null) {
        throw new TypeError("No timeout provided.");
      }
      return lift_1.operate(function(source, subscriber) {
        var originalSourceSubscription;
        var timerSubscription;
        var lastValue = null;
        var seen = 0;
        var startTimer = function(delay) {
          timerSubscription = executeSchedule_1.executeSchedule(subscriber, scheduler, function() {
            try {
              originalSourceSubscription.unsubscribe();
              innerFrom_1.innerFrom(_with({
                meta,
                lastValue,
                seen
              })).subscribe(subscriber);
            } catch (err) {
              subscriber.error(err);
            }
          }, delay);
        };
        originalSourceSubscription = source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
          timerSubscription === null || timerSubscription === void 0 ? void 0 : timerSubscription.unsubscribe();
          seen++;
          subscriber.next(lastValue = value);
          each > 0 && startTimer(each);
        }, void 0, void 0, function() {
          if (!(timerSubscription === null || timerSubscription === void 0 ? void 0 : timerSubscription.closed)) {
            timerSubscription === null || timerSubscription === void 0 ? void 0 : timerSubscription.unsubscribe();
          }
          lastValue = null;
        }));
        !seen && startTimer(first != null ? typeof first === "number" ? first : +first - scheduler.now() : each);
      });
    }
    exports.timeout = timeout;
    function timeoutErrorFactory(info) {
      throw new exports.TimeoutError(info);
    }
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/map.js
var require_map = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/map.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.map = void 0;
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    function map2(project, thisArg) {
      return lift_1.operate(function(source, subscriber) {
        var index = 0;
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
          subscriber.next(project.call(thisArg, value, index++));
        }));
      });
    }
    exports.map = map2;
  }
});

// node_modules/rxjs/dist/cjs/internal/util/mapOneOrManyArgs.js
var require_mapOneOrManyArgs = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/util/mapOneOrManyArgs.js"(exports) {
    "use strict";
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    var __spreadArray = exports && exports.__spreadArray || function(to, from4) {
      for (var i = 0, il = from4.length, j = to.length; i < il; i++, j++)
        to[j] = from4[i];
      return to;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.mapOneOrManyArgs = void 0;
    var map_1 = require_map();
    var isArray = Array.isArray;
    function callOrApply(fn, args) {
      return isArray(args) ? fn.apply(void 0, __spreadArray([], __read(args))) : fn(args);
    }
    function mapOneOrManyArgs(fn) {
      return map_1.map(function(args) {
        return callOrApply(fn, args);
      });
    }
    exports.mapOneOrManyArgs = mapOneOrManyArgs;
  }
});

// node_modules/rxjs/dist/cjs/internal/observable/bindCallbackInternals.js
var require_bindCallbackInternals = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/observable/bindCallbackInternals.js"(exports) {
    "use strict";
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    var __spreadArray = exports && exports.__spreadArray || function(to, from4) {
      for (var i = 0, il = from4.length, j = to.length; i < il; i++, j++)
        to[j] = from4[i];
      return to;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.bindCallbackInternals = void 0;
    var isScheduler_1 = require_isScheduler();
    var Observable_1 = require_Observable();
    var subscribeOn_1 = require_subscribeOn();
    var mapOneOrManyArgs_1 = require_mapOneOrManyArgs();
    var observeOn_1 = require_observeOn();
    var AsyncSubject_1 = require_AsyncSubject();
    function bindCallbackInternals(isNodeStyle, callbackFunc, resultSelector, scheduler) {
      if (resultSelector) {
        if (isScheduler_1.isScheduler(resultSelector)) {
          scheduler = resultSelector;
        } else {
          return function() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
            }
            return bindCallbackInternals(isNodeStyle, callbackFunc, scheduler).apply(this, args).pipe(mapOneOrManyArgs_1.mapOneOrManyArgs(resultSelector));
          };
        }
      }
      if (scheduler) {
        return function() {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
          }
          return bindCallbackInternals(isNodeStyle, callbackFunc).apply(this, args).pipe(subscribeOn_1.subscribeOn(scheduler), observeOn_1.observeOn(scheduler));
        };
      }
      return function() {
        var _this = this;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        var subject = new AsyncSubject_1.AsyncSubject();
        var uninitialized = true;
        return new Observable_1.Observable(function(subscriber) {
          var subs = subject.subscribe(subscriber);
          if (uninitialized) {
            uninitialized = false;
            var isAsync_1 = false;
            var isComplete_1 = false;
            callbackFunc.apply(_this, __spreadArray(__spreadArray([], __read(args)), [
              function() {
                var results = [];
                for (var _i2 = 0; _i2 < arguments.length; _i2++) {
                  results[_i2] = arguments[_i2];
                }
                if (isNodeStyle) {
                  var err = results.shift();
                  if (err != null) {
                    subject.error(err);
                    return;
                  }
                }
                subject.next(1 < results.length ? results : results[0]);
                isComplete_1 = true;
                if (isAsync_1) {
                  subject.complete();
                }
              }
            ]));
            if (isComplete_1) {
              subject.complete();
            }
            isAsync_1 = true;
          }
          return subs;
        });
      };
    }
    exports.bindCallbackInternals = bindCallbackInternals;
  }
});

// node_modules/rxjs/dist/cjs/internal/observable/bindCallback.js
var require_bindCallback = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/observable/bindCallback.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.bindCallback = void 0;
    var bindCallbackInternals_1 = require_bindCallbackInternals();
    function bindCallback(callbackFunc, resultSelector, scheduler) {
      return bindCallbackInternals_1.bindCallbackInternals(false, callbackFunc, resultSelector, scheduler);
    }
    exports.bindCallback = bindCallback;
  }
});

// node_modules/rxjs/dist/cjs/internal/observable/bindNodeCallback.js
var require_bindNodeCallback = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/observable/bindNodeCallback.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.bindNodeCallback = void 0;
    var bindCallbackInternals_1 = require_bindCallbackInternals();
    function bindNodeCallback(callbackFunc, resultSelector, scheduler) {
      return bindCallbackInternals_1.bindCallbackInternals(true, callbackFunc, resultSelector, scheduler);
    }
    exports.bindNodeCallback = bindNodeCallback;
  }
});

// node_modules/rxjs/dist/cjs/internal/util/argsArgArrayOrObject.js
var require_argsArgArrayOrObject = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/util/argsArgArrayOrObject.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.argsArgArrayOrObject = void 0;
    var isArray = Array.isArray;
    var getPrototypeOf = Object.getPrototypeOf;
    var objectProto = Object.prototype;
    var getKeys = Object.keys;
    function argsArgArrayOrObject(args) {
      if (args.length === 1) {
        var first_1 = args[0];
        if (isArray(first_1)) {
          return { args: first_1, keys: null };
        }
        if (isPOJO(first_1)) {
          var keys = getKeys(first_1);
          return {
            args: keys.map(function(key) {
              return first_1[key];
            }),
            keys
          };
        }
      }
      return { args, keys: null };
    }
    exports.argsArgArrayOrObject = argsArgArrayOrObject;
    function isPOJO(obj) {
      return obj && typeof obj === "object" && getPrototypeOf(obj) === objectProto;
    }
  }
});

// node_modules/rxjs/dist/cjs/internal/util/createObject.js
var require_createObject = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/util/createObject.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createObject = void 0;
    function createObject(keys, values) {
      return keys.reduce(function(result, key, i) {
        return result[key] = values[i], result;
      }, {});
    }
    exports.createObject = createObject;
  }
});

// node_modules/rxjs/dist/cjs/internal/observable/combineLatest.js
var require_combineLatest = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/observable/combineLatest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.combineLatestInit = exports.combineLatest = void 0;
    var Observable_1 = require_Observable();
    var argsArgArrayOrObject_1 = require_argsArgArrayOrObject();
    var from_1 = require_from();
    var identity_1 = require_identity();
    var mapOneOrManyArgs_1 = require_mapOneOrManyArgs();
    var args_1 = require_args();
    var createObject_1 = require_createObject();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    var executeSchedule_1 = require_executeSchedule();
    function combineLatest() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      var scheduler = args_1.popScheduler(args);
      var resultSelector = args_1.popResultSelector(args);
      var _a = argsArgArrayOrObject_1.argsArgArrayOrObject(args), observables = _a.args, keys = _a.keys;
      if (observables.length === 0) {
        return from_1.from([], scheduler);
      }
      var result = new Observable_1.Observable(combineLatestInit(observables, scheduler, keys ? function(values) {
        return createObject_1.createObject(keys, values);
      } : identity_1.identity));
      return resultSelector ? result.pipe(mapOneOrManyArgs_1.mapOneOrManyArgs(resultSelector)) : result;
    }
    exports.combineLatest = combineLatest;
    function combineLatestInit(observables, scheduler, valueTransform) {
      if (valueTransform === void 0) {
        valueTransform = identity_1.identity;
      }
      return function(subscriber) {
        maybeSchedule(scheduler, function() {
          var length = observables.length;
          var values = new Array(length);
          var active = length;
          var remainingFirstValues = length;
          var _loop_1 = function(i2) {
            maybeSchedule(scheduler, function() {
              var source = from_1.from(observables[i2], scheduler);
              var hasFirstValue = false;
              source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
                values[i2] = value;
                if (!hasFirstValue) {
                  hasFirstValue = true;
                  remainingFirstValues--;
                }
                if (!remainingFirstValues) {
                  subscriber.next(valueTransform(values.slice()));
                }
              }, function() {
                if (!--active) {
                  subscriber.complete();
                }
              }));
            }, subscriber);
          };
          for (var i = 0; i < length; i++) {
            _loop_1(i);
          }
        }, subscriber);
      };
    }
    exports.combineLatestInit = combineLatestInit;
    function maybeSchedule(scheduler, execute, subscription) {
      if (scheduler) {
        executeSchedule_1.executeSchedule(subscription, scheduler, execute);
      } else {
        execute();
      }
    }
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/mergeInternals.js
var require_mergeInternals = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/mergeInternals.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.mergeInternals = void 0;
    var innerFrom_1 = require_innerFrom();
    var executeSchedule_1 = require_executeSchedule();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    function mergeInternals(source, subscriber, project, concurrent, onBeforeNext, expand, innerSubScheduler, additionalFinalizer) {
      var buffer = [];
      var active = 0;
      var index = 0;
      var isComplete = false;
      var checkComplete = function() {
        if (isComplete && !buffer.length && !active) {
          subscriber.complete();
        }
      };
      var outerNext = function(value) {
        return active < concurrent ? doInnerSub(value) : buffer.push(value);
      };
      var doInnerSub = function(value) {
        expand && subscriber.next(value);
        active++;
        var innerComplete = false;
        innerFrom_1.innerFrom(project(value, index++)).subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(innerValue) {
          onBeforeNext === null || onBeforeNext === void 0 ? void 0 : onBeforeNext(innerValue);
          if (expand) {
            outerNext(innerValue);
          } else {
            subscriber.next(innerValue);
          }
        }, function() {
          innerComplete = true;
        }, void 0, function() {
          if (innerComplete) {
            try {
              active--;
              var _loop_1 = function() {
                var bufferedValue = buffer.shift();
                if (innerSubScheduler) {
                  executeSchedule_1.executeSchedule(subscriber, innerSubScheduler, function() {
                    return doInnerSub(bufferedValue);
                  });
                } else {
                  doInnerSub(bufferedValue);
                }
              };
              while (buffer.length && active < concurrent) {
                _loop_1();
              }
              checkComplete();
            } catch (err) {
              subscriber.error(err);
            }
          }
        }));
      };
      source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, outerNext, function() {
        isComplete = true;
        checkComplete();
      }));
      return function() {
        additionalFinalizer === null || additionalFinalizer === void 0 ? void 0 : additionalFinalizer();
      };
    }
    exports.mergeInternals = mergeInternals;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/mergeMap.js
var require_mergeMap = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/mergeMap.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.mergeMap = void 0;
    var map_1 = require_map();
    var innerFrom_1 = require_innerFrom();
    var lift_1 = require_lift();
    var mergeInternals_1 = require_mergeInternals();
    var isFunction_1 = require_isFunction();
    function mergeMap(project, resultSelector, concurrent) {
      if (concurrent === void 0) {
        concurrent = Infinity;
      }
      if (isFunction_1.isFunction(resultSelector)) {
        return mergeMap(function(a, i) {
          return map_1.map(function(b, ii) {
            return resultSelector(a, b, i, ii);
          })(innerFrom_1.innerFrom(project(a, i)));
        }, concurrent);
      } else if (typeof resultSelector === "number") {
        concurrent = resultSelector;
      }
      return lift_1.operate(function(source, subscriber) {
        return mergeInternals_1.mergeInternals(source, subscriber, project, concurrent);
      });
    }
    exports.mergeMap = mergeMap;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/mergeAll.js
var require_mergeAll = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/mergeAll.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.mergeAll = void 0;
    var mergeMap_1 = require_mergeMap();
    var identity_1 = require_identity();
    function mergeAll(concurrent) {
      if (concurrent === void 0) {
        concurrent = Infinity;
      }
      return mergeMap_1.mergeMap(identity_1.identity, concurrent);
    }
    exports.mergeAll = mergeAll;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/concatAll.js
var require_concatAll = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/concatAll.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.concatAll = void 0;
    var mergeAll_1 = require_mergeAll();
    function concatAll() {
      return mergeAll_1.mergeAll(1);
    }
    exports.concatAll = concatAll;
  }
});

// node_modules/rxjs/dist/cjs/internal/observable/concat.js
var require_concat = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/observable/concat.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.concat = void 0;
    var concatAll_1 = require_concatAll();
    var args_1 = require_args();
    var from_1 = require_from();
    function concat() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      return concatAll_1.concatAll()(from_1.from(args, args_1.popScheduler(args)));
    }
    exports.concat = concat;
  }
});

// node_modules/rxjs/dist/cjs/internal/observable/defer.js
var require_defer = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/observable/defer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defer = void 0;
    var Observable_1 = require_Observable();
    var innerFrom_1 = require_innerFrom();
    function defer(observableFactory) {
      return new Observable_1.Observable(function(subscriber) {
        innerFrom_1.innerFrom(observableFactory()).subscribe(subscriber);
      });
    }
    exports.defer = defer;
  }
});

// node_modules/rxjs/dist/cjs/internal/observable/connectable.js
var require_connectable = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/observable/connectable.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.connectable = void 0;
    var Subject_1 = require_Subject();
    var Observable_1 = require_Observable();
    var defer_1 = require_defer();
    var DEFAULT_CONFIG = {
      connector: function() {
        return new Subject_1.Subject();
      },
      resetOnDisconnect: true
    };
    function connectable(source, config) {
      if (config === void 0) {
        config = DEFAULT_CONFIG;
      }
      var connection = null;
      var connector = config.connector, _a = config.resetOnDisconnect, resetOnDisconnect = _a === void 0 ? true : _a;
      var subject = connector();
      var result = new Observable_1.Observable(function(subscriber) {
        return subject.subscribe(subscriber);
      });
      result.connect = function() {
        if (!connection || connection.closed) {
          connection = defer_1.defer(function() {
            return source;
          }).subscribe(subject);
          if (resetOnDisconnect) {
            connection.add(function() {
              return subject = connector();
            });
          }
        }
        return connection;
      };
      return result;
    }
    exports.connectable = connectable;
  }
});

// node_modules/rxjs/dist/cjs/internal/observable/forkJoin.js
var require_forkJoin = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/observable/forkJoin.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.forkJoin = void 0;
    var Observable_1 = require_Observable();
    var argsArgArrayOrObject_1 = require_argsArgArrayOrObject();
    var innerFrom_1 = require_innerFrom();
    var args_1 = require_args();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    var mapOneOrManyArgs_1 = require_mapOneOrManyArgs();
    var createObject_1 = require_createObject();
    function forkJoin() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      var resultSelector = args_1.popResultSelector(args);
      var _a = argsArgArrayOrObject_1.argsArgArrayOrObject(args), sources = _a.args, keys = _a.keys;
      var result = new Observable_1.Observable(function(subscriber) {
        var length = sources.length;
        if (!length) {
          subscriber.complete();
          return;
        }
        var values = new Array(length);
        var remainingCompletions = length;
        var remainingEmissions = length;
        var _loop_1 = function(sourceIndex2) {
          var hasValue = false;
          innerFrom_1.innerFrom(sources[sourceIndex2]).subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
            if (!hasValue) {
              hasValue = true;
              remainingEmissions--;
            }
            values[sourceIndex2] = value;
          }, function() {
            return remainingCompletions--;
          }, void 0, function() {
            if (!remainingCompletions || !hasValue) {
              if (!remainingEmissions) {
                subscriber.next(keys ? createObject_1.createObject(keys, values) : values);
              }
              subscriber.complete();
            }
          }));
        };
        for (var sourceIndex = 0; sourceIndex < length; sourceIndex++) {
          _loop_1(sourceIndex);
        }
      });
      return resultSelector ? result.pipe(mapOneOrManyArgs_1.mapOneOrManyArgs(resultSelector)) : result;
    }
    exports.forkJoin = forkJoin;
  }
});

// node_modules/rxjs/dist/cjs/internal/observable/fromEvent.js
var require_fromEvent = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/observable/fromEvent.js"(exports) {
    "use strict";
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromEvent = void 0;
    var innerFrom_1 = require_innerFrom();
    var Observable_1 = require_Observable();
    var mergeMap_1 = require_mergeMap();
    var isArrayLike_1 = require_isArrayLike();
    var isFunction_1 = require_isFunction();
    var mapOneOrManyArgs_1 = require_mapOneOrManyArgs();
    var nodeEventEmitterMethods = ["addListener", "removeListener"];
    var eventTargetMethods = ["addEventListener", "removeEventListener"];
    var jqueryMethods = ["on", "off"];
    function fromEvent(target, eventName, options2, resultSelector) {
      if (isFunction_1.isFunction(options2)) {
        resultSelector = options2;
        options2 = void 0;
      }
      if (resultSelector) {
        return fromEvent(target, eventName, options2).pipe(mapOneOrManyArgs_1.mapOneOrManyArgs(resultSelector));
      }
      var _a = __read(isEventTarget(target) ? eventTargetMethods.map(function(methodName) {
        return function(handler) {
          return target[methodName](eventName, handler, options2);
        };
      }) : isNodeStyleEventEmitter(target) ? nodeEventEmitterMethods.map(toCommonHandlerRegistry(target, eventName)) : isJQueryStyleEventEmitter(target) ? jqueryMethods.map(toCommonHandlerRegistry(target, eventName)) : [], 2), add = _a[0], remove = _a[1];
      if (!add) {
        if (isArrayLike_1.isArrayLike(target)) {
          return mergeMap_1.mergeMap(function(subTarget) {
            return fromEvent(subTarget, eventName, options2);
          })(innerFrom_1.innerFrom(target));
        }
      }
      if (!add) {
        throw new TypeError("Invalid event target");
      }
      return new Observable_1.Observable(function(subscriber) {
        var handler = function() {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
          }
          return subscriber.next(1 < args.length ? args : args[0]);
        };
        add(handler);
        return function() {
          return remove(handler);
        };
      });
    }
    exports.fromEvent = fromEvent;
    function toCommonHandlerRegistry(target, eventName) {
      return function(methodName) {
        return function(handler) {
          return target[methodName](eventName, handler);
        };
      };
    }
    function isNodeStyleEventEmitter(target) {
      return isFunction_1.isFunction(target.addListener) && isFunction_1.isFunction(target.removeListener);
    }
    function isJQueryStyleEventEmitter(target) {
      return isFunction_1.isFunction(target.on) && isFunction_1.isFunction(target.off);
    }
    function isEventTarget(target) {
      return isFunction_1.isFunction(target.addEventListener) && isFunction_1.isFunction(target.removeEventListener);
    }
  }
});

// node_modules/rxjs/dist/cjs/internal/observable/fromEventPattern.js
var require_fromEventPattern = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/observable/fromEventPattern.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromEventPattern = void 0;
    var Observable_1 = require_Observable();
    var isFunction_1 = require_isFunction();
    var mapOneOrManyArgs_1 = require_mapOneOrManyArgs();
    function fromEventPattern(addHandler, removeHandler, resultSelector) {
      if (resultSelector) {
        return fromEventPattern(addHandler, removeHandler).pipe(mapOneOrManyArgs_1.mapOneOrManyArgs(resultSelector));
      }
      return new Observable_1.Observable(function(subscriber) {
        var handler = function() {
          var e = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            e[_i] = arguments[_i];
          }
          return subscriber.next(e.length === 1 ? e[0] : e);
        };
        var retValue = addHandler(handler);
        return isFunction_1.isFunction(removeHandler) ? function() {
          return removeHandler(handler, retValue);
        } : void 0;
      });
    }
    exports.fromEventPattern = fromEventPattern;
  }
});

// node_modules/rxjs/dist/cjs/internal/observable/generate.js
var require_generate = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/observable/generate.js"(exports) {
    "use strict";
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.generate = void 0;
    var identity_1 = require_identity();
    var isScheduler_1 = require_isScheduler();
    var defer_1 = require_defer();
    var scheduleIterable_1 = require_scheduleIterable();
    function generate(initialStateOrOptions, condition, iterate, resultSelectorOrScheduler, scheduler) {
      var _a, _b;
      var resultSelector;
      var initialState;
      if (arguments.length === 1) {
        _a = initialStateOrOptions, initialState = _a.initialState, condition = _a.condition, iterate = _a.iterate, _b = _a.resultSelector, resultSelector = _b === void 0 ? identity_1.identity : _b, scheduler = _a.scheduler;
      } else {
        initialState = initialStateOrOptions;
        if (!resultSelectorOrScheduler || isScheduler_1.isScheduler(resultSelectorOrScheduler)) {
          resultSelector = identity_1.identity;
          scheduler = resultSelectorOrScheduler;
        } else {
          resultSelector = resultSelectorOrScheduler;
        }
      }
      function gen() {
        var state;
        return __generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              state = initialState;
              _a2.label = 1;
            case 1:
              if (!(!condition || condition(state)))
                return [3, 4];
              return [4, resultSelector(state)];
            case 2:
              _a2.sent();
              _a2.label = 3;
            case 3:
              state = iterate(state);
              return [3, 1];
            case 4:
              return [2];
          }
        });
      }
      return defer_1.defer(scheduler ? function() {
        return scheduleIterable_1.scheduleIterable(gen(), scheduler);
      } : gen);
    }
    exports.generate = generate;
  }
});

// node_modules/rxjs/dist/cjs/internal/observable/iif.js
var require_iif = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/observable/iif.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.iif = void 0;
    var defer_1 = require_defer();
    function iif(condition, trueResult, falseResult) {
      return defer_1.defer(function() {
        return condition() ? trueResult : falseResult;
      });
    }
    exports.iif = iif;
  }
});

// node_modules/rxjs/dist/cjs/internal/observable/timer.js
var require_timer = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/observable/timer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.timer = void 0;
    var Observable_1 = require_Observable();
    var async_1 = require_async();
    var isScheduler_1 = require_isScheduler();
    var isDate_1 = require_isDate();
    function timer(dueTime, intervalOrScheduler, scheduler) {
      if (dueTime === void 0) {
        dueTime = 0;
      }
      if (scheduler === void 0) {
        scheduler = async_1.async;
      }
      var intervalDuration = -1;
      if (intervalOrScheduler != null) {
        if (isScheduler_1.isScheduler(intervalOrScheduler)) {
          scheduler = intervalOrScheduler;
        } else {
          intervalDuration = intervalOrScheduler;
        }
      }
      return new Observable_1.Observable(function(subscriber) {
        var due = isDate_1.isValidDate(dueTime) ? +dueTime - scheduler.now() : dueTime;
        if (due < 0) {
          due = 0;
        }
        var n = 0;
        return scheduler.schedule(function() {
          if (!subscriber.closed) {
            subscriber.next(n++);
            if (0 <= intervalDuration) {
              this.schedule(void 0, intervalDuration);
            } else {
              subscriber.complete();
            }
          }
        }, due);
      });
    }
    exports.timer = timer;
  }
});

// node_modules/rxjs/dist/cjs/internal/observable/interval.js
var require_interval = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/observable/interval.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.interval = void 0;
    var async_1 = require_async();
    var timer_1 = require_timer();
    function interval(period, scheduler) {
      if (period === void 0) {
        period = 0;
      }
      if (scheduler === void 0) {
        scheduler = async_1.asyncScheduler;
      }
      if (period < 0) {
        period = 0;
      }
      return timer_1.timer(period, period, scheduler);
    }
    exports.interval = interval;
  }
});

// node_modules/rxjs/dist/cjs/internal/observable/merge.js
var require_merge = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/observable/merge.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.merge = void 0;
    var mergeAll_1 = require_mergeAll();
    var innerFrom_1 = require_innerFrom();
    var empty_1 = require_empty();
    var args_1 = require_args();
    var from_1 = require_from();
    function merge() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      var scheduler = args_1.popScheduler(args);
      var concurrent = args_1.popNumber(args, Infinity);
      var sources = args;
      return !sources.length ? empty_1.EMPTY : sources.length === 1 ? innerFrom_1.innerFrom(sources[0]) : mergeAll_1.mergeAll(concurrent)(from_1.from(sources, scheduler));
    }
    exports.merge = merge;
  }
});

// node_modules/rxjs/dist/cjs/internal/observable/never.js
var require_never = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/observable/never.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.never = exports.NEVER = void 0;
    var Observable_1 = require_Observable();
    var noop_1 = require_noop();
    exports.NEVER = new Observable_1.Observable(noop_1.noop);
    function never() {
      return exports.NEVER;
    }
    exports.never = never;
  }
});

// node_modules/rxjs/dist/cjs/internal/util/argsOrArgArray.js
var require_argsOrArgArray = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/util/argsOrArgArray.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.argsOrArgArray = void 0;
    var isArray = Array.isArray;
    function argsOrArgArray(args) {
      return args.length === 1 && isArray(args[0]) ? args[0] : args;
    }
    exports.argsOrArgArray = argsOrArgArray;
  }
});

// node_modules/rxjs/dist/cjs/internal/observable/onErrorResumeNext.js
var require_onErrorResumeNext = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/observable/onErrorResumeNext.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.onErrorResumeNext = void 0;
    var Observable_1 = require_Observable();
    var argsOrArgArray_1 = require_argsOrArgArray();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    var noop_1 = require_noop();
    var innerFrom_1 = require_innerFrom();
    function onErrorResumeNext() {
      var sources = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        sources[_i] = arguments[_i];
      }
      var nextSources = argsOrArgArray_1.argsOrArgArray(sources);
      return new Observable_1.Observable(function(subscriber) {
        var sourceIndex = 0;
        var subscribeNext = function() {
          if (sourceIndex < nextSources.length) {
            var nextSource = void 0;
            try {
              nextSource = innerFrom_1.innerFrom(nextSources[sourceIndex++]);
            } catch (err) {
              subscribeNext();
              return;
            }
            var innerSubscriber = new OperatorSubscriber_1.OperatorSubscriber(subscriber, void 0, noop_1.noop, noop_1.noop);
            nextSource.subscribe(innerSubscriber);
            innerSubscriber.add(subscribeNext);
          } else {
            subscriber.complete();
          }
        };
        subscribeNext();
      });
    }
    exports.onErrorResumeNext = onErrorResumeNext;
  }
});

// node_modules/rxjs/dist/cjs/internal/observable/pairs.js
var require_pairs = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/observable/pairs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.pairs = void 0;
    var from_1 = require_from();
    function pairs(obj, scheduler) {
      return from_1.from(Object.entries(obj), scheduler);
    }
    exports.pairs = pairs;
  }
});

// node_modules/rxjs/dist/cjs/internal/util/not.js
var require_not = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/util/not.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.not = void 0;
    function not(pred, thisArg) {
      return function(value, index) {
        return !pred.call(thisArg, value, index);
      };
    }
    exports.not = not;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/filter.js
var require_filter = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/filter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.filter = void 0;
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    function filter(predicate, thisArg) {
      return lift_1.operate(function(source, subscriber) {
        var index = 0;
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
          return predicate.call(thisArg, value, index++) && subscriber.next(value);
        }));
      });
    }
    exports.filter = filter;
  }
});

// node_modules/rxjs/dist/cjs/internal/observable/partition.js
var require_partition = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/observable/partition.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.partition = void 0;
    var not_1 = require_not();
    var filter_1 = require_filter();
    var innerFrom_1 = require_innerFrom();
    function partition(source, predicate, thisArg) {
      return [filter_1.filter(predicate, thisArg)(innerFrom_1.innerFrom(source)), filter_1.filter(not_1.not(predicate, thisArg))(innerFrom_1.innerFrom(source))];
    }
    exports.partition = partition;
  }
});

// node_modules/rxjs/dist/cjs/internal/observable/race.js
var require_race = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/observable/race.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.raceInit = exports.race = void 0;
    var Observable_1 = require_Observable();
    var innerFrom_1 = require_innerFrom();
    var argsOrArgArray_1 = require_argsOrArgArray();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    function race() {
      var sources = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        sources[_i] = arguments[_i];
      }
      sources = argsOrArgArray_1.argsOrArgArray(sources);
      return sources.length === 1 ? innerFrom_1.innerFrom(sources[0]) : new Observable_1.Observable(raceInit(sources));
    }
    exports.race = race;
    function raceInit(sources) {
      return function(subscriber) {
        var subscriptions = [];
        var _loop_1 = function(i2) {
          subscriptions.push(innerFrom_1.innerFrom(sources[i2]).subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
            if (subscriptions) {
              for (var s = 0; s < subscriptions.length; s++) {
                s !== i2 && subscriptions[s].unsubscribe();
              }
              subscriptions = null;
            }
            subscriber.next(value);
          })));
        };
        for (var i = 0; subscriptions && !subscriber.closed && i < sources.length; i++) {
          _loop_1(i);
        }
      };
    }
    exports.raceInit = raceInit;
  }
});

// node_modules/rxjs/dist/cjs/internal/observable/range.js
var require_range = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/observable/range.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.range = void 0;
    var Observable_1 = require_Observable();
    var empty_1 = require_empty();
    function range(start, count, scheduler) {
      if (count == null) {
        count = start;
        start = 0;
      }
      if (count <= 0) {
        return empty_1.EMPTY;
      }
      var end = count + start;
      return new Observable_1.Observable(scheduler ? function(subscriber) {
        var n = start;
        return scheduler.schedule(function() {
          if (n < end) {
            subscriber.next(n++);
            this.schedule();
          } else {
            subscriber.complete();
          }
        });
      } : function(subscriber) {
        var n = start;
        while (n < end && !subscriber.closed) {
          subscriber.next(n++);
        }
        subscriber.complete();
      });
    }
    exports.range = range;
  }
});

// node_modules/rxjs/dist/cjs/internal/observable/using.js
var require_using = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/observable/using.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.using = void 0;
    var Observable_1 = require_Observable();
    var innerFrom_1 = require_innerFrom();
    var empty_1 = require_empty();
    function using(resourceFactory, observableFactory) {
      return new Observable_1.Observable(function(subscriber) {
        var resource = resourceFactory();
        var result = observableFactory(resource);
        var source = result ? innerFrom_1.innerFrom(result) : empty_1.EMPTY;
        source.subscribe(subscriber);
        return function() {
          if (resource) {
            resource.unsubscribe();
          }
        };
      });
    }
    exports.using = using;
  }
});

// node_modules/rxjs/dist/cjs/internal/observable/zip.js
var require_zip = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/observable/zip.js"(exports) {
    "use strict";
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    var __spreadArray = exports && exports.__spreadArray || function(to, from4) {
      for (var i = 0, il = from4.length, j = to.length; i < il; i++, j++)
        to[j] = from4[i];
      return to;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.zip = void 0;
    var Observable_1 = require_Observable();
    var innerFrom_1 = require_innerFrom();
    var argsOrArgArray_1 = require_argsOrArgArray();
    var empty_1 = require_empty();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    var args_1 = require_args();
    function zip() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      var resultSelector = args_1.popResultSelector(args);
      var sources = argsOrArgArray_1.argsOrArgArray(args);
      return sources.length ? new Observable_1.Observable(function(subscriber) {
        var buffers = sources.map(function() {
          return [];
        });
        var completed = sources.map(function() {
          return false;
        });
        subscriber.add(function() {
          buffers = completed = null;
        });
        var _loop_1 = function(sourceIndex2) {
          innerFrom_1.innerFrom(sources[sourceIndex2]).subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
            buffers[sourceIndex2].push(value);
            if (buffers.every(function(buffer) {
              return buffer.length;
            })) {
              var result = buffers.map(function(buffer) {
                return buffer.shift();
              });
              subscriber.next(resultSelector ? resultSelector.apply(void 0, __spreadArray([], __read(result))) : result);
              if (buffers.some(function(buffer, i) {
                return !buffer.length && completed[i];
              })) {
                subscriber.complete();
              }
            }
          }, function() {
            completed[sourceIndex2] = true;
            !buffers[sourceIndex2].length && subscriber.complete();
          }));
        };
        for (var sourceIndex = 0; !subscriber.closed && sourceIndex < sources.length; sourceIndex++) {
          _loop_1(sourceIndex);
        }
        return function() {
          buffers = completed = null;
        };
      }) : empty_1.EMPTY;
    }
    exports.zip = zip;
  }
});

// node_modules/rxjs/dist/cjs/internal/types.js
var require_types = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/audit.js
var require_audit = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/audit.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.audit = void 0;
    var lift_1 = require_lift();
    var innerFrom_1 = require_innerFrom();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    function audit(durationSelector) {
      return lift_1.operate(function(source, subscriber) {
        var hasValue = false;
        var lastValue = null;
        var durationSubscriber = null;
        var isComplete = false;
        var endDuration = function() {
          durationSubscriber === null || durationSubscriber === void 0 ? void 0 : durationSubscriber.unsubscribe();
          durationSubscriber = null;
          if (hasValue) {
            hasValue = false;
            var value = lastValue;
            lastValue = null;
            subscriber.next(value);
          }
          isComplete && subscriber.complete();
        };
        var cleanupDuration = function() {
          durationSubscriber = null;
          isComplete && subscriber.complete();
        };
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
          hasValue = true;
          lastValue = value;
          if (!durationSubscriber) {
            innerFrom_1.innerFrom(durationSelector(value)).subscribe(durationSubscriber = OperatorSubscriber_1.createOperatorSubscriber(subscriber, endDuration, cleanupDuration));
          }
        }, function() {
          isComplete = true;
          (!hasValue || !durationSubscriber || durationSubscriber.closed) && subscriber.complete();
        }));
      });
    }
    exports.audit = audit;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/auditTime.js
var require_auditTime = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/auditTime.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.auditTime = void 0;
    var async_1 = require_async();
    var audit_1 = require_audit();
    var timer_1 = require_timer();
    function auditTime(duration, scheduler) {
      if (scheduler === void 0) {
        scheduler = async_1.asyncScheduler;
      }
      return audit_1.audit(function() {
        return timer_1.timer(duration, scheduler);
      });
    }
    exports.auditTime = auditTime;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/buffer.js
var require_buffer = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/buffer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.buffer = void 0;
    var lift_1 = require_lift();
    var noop_1 = require_noop();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    var innerFrom_1 = require_innerFrom();
    function buffer(closingNotifier) {
      return lift_1.operate(function(source, subscriber) {
        var currentBuffer = [];
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
          return currentBuffer.push(value);
        }, function() {
          subscriber.next(currentBuffer);
          subscriber.complete();
        }));
        innerFrom_1.innerFrom(closingNotifier).subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function() {
          var b = currentBuffer;
          currentBuffer = [];
          subscriber.next(b);
        }, noop_1.noop));
        return function() {
          currentBuffer = null;
        };
      });
    }
    exports.buffer = buffer;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/bufferCount.js
var require_bufferCount = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/bufferCount.js"(exports) {
    "use strict";
    var __values = exports && exports.__values || function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.bufferCount = void 0;
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    var arrRemove_1 = require_arrRemove();
    function bufferCount(bufferSize, startBufferEvery) {
      if (startBufferEvery === void 0) {
        startBufferEvery = null;
      }
      startBufferEvery = startBufferEvery !== null && startBufferEvery !== void 0 ? startBufferEvery : bufferSize;
      return lift_1.operate(function(source, subscriber) {
        var buffers = [];
        var count = 0;
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
          var e_1, _a, e_2, _b;
          var toEmit = null;
          if (count++ % startBufferEvery === 0) {
            buffers.push([]);
          }
          try {
            for (var buffers_1 = __values(buffers), buffers_1_1 = buffers_1.next(); !buffers_1_1.done; buffers_1_1 = buffers_1.next()) {
              var buffer = buffers_1_1.value;
              buffer.push(value);
              if (bufferSize <= buffer.length) {
                toEmit = toEmit !== null && toEmit !== void 0 ? toEmit : [];
                toEmit.push(buffer);
              }
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (buffers_1_1 && !buffers_1_1.done && (_a = buffers_1.return))
                _a.call(buffers_1);
            } finally {
              if (e_1)
                throw e_1.error;
            }
          }
          if (toEmit) {
            try {
              for (var toEmit_1 = __values(toEmit), toEmit_1_1 = toEmit_1.next(); !toEmit_1_1.done; toEmit_1_1 = toEmit_1.next()) {
                var buffer = toEmit_1_1.value;
                arrRemove_1.arrRemove(buffers, buffer);
                subscriber.next(buffer);
              }
            } catch (e_2_1) {
              e_2 = { error: e_2_1 };
            } finally {
              try {
                if (toEmit_1_1 && !toEmit_1_1.done && (_b = toEmit_1.return))
                  _b.call(toEmit_1);
              } finally {
                if (e_2)
                  throw e_2.error;
              }
            }
          }
        }, function() {
          var e_3, _a;
          try {
            for (var buffers_2 = __values(buffers), buffers_2_1 = buffers_2.next(); !buffers_2_1.done; buffers_2_1 = buffers_2.next()) {
              var buffer = buffers_2_1.value;
              subscriber.next(buffer);
            }
          } catch (e_3_1) {
            e_3 = { error: e_3_1 };
          } finally {
            try {
              if (buffers_2_1 && !buffers_2_1.done && (_a = buffers_2.return))
                _a.call(buffers_2);
            } finally {
              if (e_3)
                throw e_3.error;
            }
          }
          subscriber.complete();
        }, void 0, function() {
          buffers = null;
        }));
      });
    }
    exports.bufferCount = bufferCount;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/bufferTime.js
var require_bufferTime = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/bufferTime.js"(exports) {
    "use strict";
    var __values = exports && exports.__values || function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.bufferTime = void 0;
    var Subscription_1 = require_Subscription();
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    var arrRemove_1 = require_arrRemove();
    var async_1 = require_async();
    var args_1 = require_args();
    var executeSchedule_1 = require_executeSchedule();
    function bufferTime(bufferTimeSpan) {
      var _a, _b;
      var otherArgs = [];
      for (var _i = 1; _i < arguments.length; _i++) {
        otherArgs[_i - 1] = arguments[_i];
      }
      var scheduler = (_a = args_1.popScheduler(otherArgs)) !== null && _a !== void 0 ? _a : async_1.asyncScheduler;
      var bufferCreationInterval = (_b = otherArgs[0]) !== null && _b !== void 0 ? _b : null;
      var maxBufferSize = otherArgs[1] || Infinity;
      return lift_1.operate(function(source, subscriber) {
        var bufferRecords = [];
        var restartOnEmit = false;
        var emit = function(record) {
          var buffer = record.buffer, subs = record.subs;
          subs.unsubscribe();
          arrRemove_1.arrRemove(bufferRecords, record);
          subscriber.next(buffer);
          restartOnEmit && startBuffer();
        };
        var startBuffer = function() {
          if (bufferRecords) {
            var subs = new Subscription_1.Subscription();
            subscriber.add(subs);
            var buffer = [];
            var record_1 = {
              buffer,
              subs
            };
            bufferRecords.push(record_1);
            executeSchedule_1.executeSchedule(subs, scheduler, function() {
              return emit(record_1);
            }, bufferTimeSpan);
          }
        };
        if (bufferCreationInterval !== null && bufferCreationInterval >= 0) {
          executeSchedule_1.executeSchedule(subscriber, scheduler, startBuffer, bufferCreationInterval, true);
        } else {
          restartOnEmit = true;
        }
        startBuffer();
        var bufferTimeSubscriber = OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
          var e_1, _a2;
          var recordsCopy = bufferRecords.slice();
          try {
            for (var recordsCopy_1 = __values(recordsCopy), recordsCopy_1_1 = recordsCopy_1.next(); !recordsCopy_1_1.done; recordsCopy_1_1 = recordsCopy_1.next()) {
              var record = recordsCopy_1_1.value;
              var buffer = record.buffer;
              buffer.push(value);
              maxBufferSize <= buffer.length && emit(record);
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (recordsCopy_1_1 && !recordsCopy_1_1.done && (_a2 = recordsCopy_1.return))
                _a2.call(recordsCopy_1);
            } finally {
              if (e_1)
                throw e_1.error;
            }
          }
        }, function() {
          while (bufferRecords === null || bufferRecords === void 0 ? void 0 : bufferRecords.length) {
            subscriber.next(bufferRecords.shift().buffer);
          }
          bufferTimeSubscriber === null || bufferTimeSubscriber === void 0 ? void 0 : bufferTimeSubscriber.unsubscribe();
          subscriber.complete();
          subscriber.unsubscribe();
        }, void 0, function() {
          return bufferRecords = null;
        });
        source.subscribe(bufferTimeSubscriber);
      });
    }
    exports.bufferTime = bufferTime;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/bufferToggle.js
var require_bufferToggle = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/bufferToggle.js"(exports) {
    "use strict";
    var __values = exports && exports.__values || function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.bufferToggle = void 0;
    var Subscription_1 = require_Subscription();
    var lift_1 = require_lift();
    var innerFrom_1 = require_innerFrom();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    var noop_1 = require_noop();
    var arrRemove_1 = require_arrRemove();
    function bufferToggle(openings, closingSelector) {
      return lift_1.operate(function(source, subscriber) {
        var buffers = [];
        innerFrom_1.innerFrom(openings).subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(openValue) {
          var buffer = [];
          buffers.push(buffer);
          var closingSubscription = new Subscription_1.Subscription();
          var emitBuffer = function() {
            arrRemove_1.arrRemove(buffers, buffer);
            subscriber.next(buffer);
            closingSubscription.unsubscribe();
          };
          closingSubscription.add(innerFrom_1.innerFrom(closingSelector(openValue)).subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, emitBuffer, noop_1.noop)));
        }, noop_1.noop));
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
          var e_1, _a;
          try {
            for (var buffers_1 = __values(buffers), buffers_1_1 = buffers_1.next(); !buffers_1_1.done; buffers_1_1 = buffers_1.next()) {
              var buffer = buffers_1_1.value;
              buffer.push(value);
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (buffers_1_1 && !buffers_1_1.done && (_a = buffers_1.return))
                _a.call(buffers_1);
            } finally {
              if (e_1)
                throw e_1.error;
            }
          }
        }, function() {
          while (buffers.length > 0) {
            subscriber.next(buffers.shift());
          }
          subscriber.complete();
        }));
      });
    }
    exports.bufferToggle = bufferToggle;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/bufferWhen.js
var require_bufferWhen = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/bufferWhen.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.bufferWhen = void 0;
    var lift_1 = require_lift();
    var noop_1 = require_noop();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    var innerFrom_1 = require_innerFrom();
    function bufferWhen(closingSelector) {
      return lift_1.operate(function(source, subscriber) {
        var buffer = null;
        var closingSubscriber = null;
        var openBuffer = function() {
          closingSubscriber === null || closingSubscriber === void 0 ? void 0 : closingSubscriber.unsubscribe();
          var b = buffer;
          buffer = [];
          b && subscriber.next(b);
          innerFrom_1.innerFrom(closingSelector()).subscribe(closingSubscriber = OperatorSubscriber_1.createOperatorSubscriber(subscriber, openBuffer, noop_1.noop));
        };
        openBuffer();
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
          return buffer === null || buffer === void 0 ? void 0 : buffer.push(value);
        }, function() {
          buffer && subscriber.next(buffer);
          subscriber.complete();
        }, void 0, function() {
          return buffer = closingSubscriber = null;
        }));
      });
    }
    exports.bufferWhen = bufferWhen;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/catchError.js
var require_catchError = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/catchError.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.catchError = void 0;
    var innerFrom_1 = require_innerFrom();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    var lift_1 = require_lift();
    function catchError(selector) {
      return lift_1.operate(function(source, subscriber) {
        var innerSub = null;
        var syncUnsub = false;
        var handledResult;
        innerSub = source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, void 0, void 0, function(err) {
          handledResult = innerFrom_1.innerFrom(selector(err, catchError(selector)(source)));
          if (innerSub) {
            innerSub.unsubscribe();
            innerSub = null;
            handledResult.subscribe(subscriber);
          } else {
            syncUnsub = true;
          }
        }));
        if (syncUnsub) {
          innerSub.unsubscribe();
          innerSub = null;
          handledResult.subscribe(subscriber);
        }
      });
    }
    exports.catchError = catchError;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/scanInternals.js
var require_scanInternals = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/scanInternals.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.scanInternals = void 0;
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    function scanInternals(accumulator, seed, hasSeed, emitOnNext, emitBeforeComplete) {
      return function(source, subscriber) {
        var hasState = hasSeed;
        var state = seed;
        var index = 0;
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
          var i = index++;
          state = hasState ? accumulator(state, value, i) : (hasState = true, value);
          emitOnNext && subscriber.next(state);
        }, emitBeforeComplete && function() {
          hasState && subscriber.next(state);
          subscriber.complete();
        }));
      };
    }
    exports.scanInternals = scanInternals;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/reduce.js
var require_reduce = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/reduce.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.reduce = void 0;
    var scanInternals_1 = require_scanInternals();
    var lift_1 = require_lift();
    function reduce(accumulator, seed) {
      return lift_1.operate(scanInternals_1.scanInternals(accumulator, seed, arguments.length >= 2, false, true));
    }
    exports.reduce = reduce;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/toArray.js
var require_toArray = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/toArray.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toArray = void 0;
    var reduce_1 = require_reduce();
    var lift_1 = require_lift();
    var arrReducer = function(arr, value) {
      return arr.push(value), arr;
    };
    function toArray() {
      return lift_1.operate(function(source, subscriber) {
        reduce_1.reduce(arrReducer, [])(source).subscribe(subscriber);
      });
    }
    exports.toArray = toArray;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/joinAllInternals.js
var require_joinAllInternals = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/joinAllInternals.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.joinAllInternals = void 0;
    var identity_1 = require_identity();
    var mapOneOrManyArgs_1 = require_mapOneOrManyArgs();
    var pipe_1 = require_pipe();
    var mergeMap_1 = require_mergeMap();
    var toArray_1 = require_toArray();
    function joinAllInternals(joinFn, project) {
      return pipe_1.pipe(toArray_1.toArray(), mergeMap_1.mergeMap(function(sources) {
        return joinFn(sources);
      }), project ? mapOneOrManyArgs_1.mapOneOrManyArgs(project) : identity_1.identity);
    }
    exports.joinAllInternals = joinAllInternals;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/combineLatestAll.js
var require_combineLatestAll = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/combineLatestAll.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.combineLatestAll = void 0;
    var combineLatest_1 = require_combineLatest();
    var joinAllInternals_1 = require_joinAllInternals();
    function combineLatestAll(project) {
      return joinAllInternals_1.joinAllInternals(combineLatest_1.combineLatest, project);
    }
    exports.combineLatestAll = combineLatestAll;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/combineAll.js
var require_combineAll = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/combineAll.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.combineAll = void 0;
    var combineLatestAll_1 = require_combineLatestAll();
    exports.combineAll = combineLatestAll_1.combineLatestAll;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/combineLatest.js
var require_combineLatest2 = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/combineLatest.js"(exports) {
    "use strict";
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    var __spreadArray = exports && exports.__spreadArray || function(to, from4) {
      for (var i = 0, il = from4.length, j = to.length; i < il; i++, j++)
        to[j] = from4[i];
      return to;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.combineLatest = void 0;
    var combineLatest_1 = require_combineLatest();
    var lift_1 = require_lift();
    var argsOrArgArray_1 = require_argsOrArgArray();
    var mapOneOrManyArgs_1 = require_mapOneOrManyArgs();
    var pipe_1 = require_pipe();
    var args_1 = require_args();
    function combineLatest() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      var resultSelector = args_1.popResultSelector(args);
      return resultSelector ? pipe_1.pipe(combineLatest.apply(void 0, __spreadArray([], __read(args))), mapOneOrManyArgs_1.mapOneOrManyArgs(resultSelector)) : lift_1.operate(function(source, subscriber) {
        combineLatest_1.combineLatestInit(__spreadArray([source], __read(argsOrArgArray_1.argsOrArgArray(args))))(subscriber);
      });
    }
    exports.combineLatest = combineLatest;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/combineLatestWith.js
var require_combineLatestWith = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/combineLatestWith.js"(exports) {
    "use strict";
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    var __spreadArray = exports && exports.__spreadArray || function(to, from4) {
      for (var i = 0, il = from4.length, j = to.length; i < il; i++, j++)
        to[j] = from4[i];
      return to;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.combineLatestWith = void 0;
    var combineLatest_1 = require_combineLatest2();
    function combineLatestWith() {
      var otherSources = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        otherSources[_i] = arguments[_i];
      }
      return combineLatest_1.combineLatest.apply(void 0, __spreadArray([], __read(otherSources)));
    }
    exports.combineLatestWith = combineLatestWith;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/concatMap.js
var require_concatMap = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/concatMap.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.concatMap = void 0;
    var mergeMap_1 = require_mergeMap();
    var isFunction_1 = require_isFunction();
    function concatMap(project, resultSelector) {
      return isFunction_1.isFunction(resultSelector) ? mergeMap_1.mergeMap(project, resultSelector, 1) : mergeMap_1.mergeMap(project, 1);
    }
    exports.concatMap = concatMap;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/concatMapTo.js
var require_concatMapTo = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/concatMapTo.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.concatMapTo = void 0;
    var concatMap_1 = require_concatMap();
    var isFunction_1 = require_isFunction();
    function concatMapTo(innerObservable, resultSelector) {
      return isFunction_1.isFunction(resultSelector) ? concatMap_1.concatMap(function() {
        return innerObservable;
      }, resultSelector) : concatMap_1.concatMap(function() {
        return innerObservable;
      });
    }
    exports.concatMapTo = concatMapTo;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/concat.js
var require_concat2 = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/concat.js"(exports) {
    "use strict";
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    var __spreadArray = exports && exports.__spreadArray || function(to, from4) {
      for (var i = 0, il = from4.length, j = to.length; i < il; i++, j++)
        to[j] = from4[i];
      return to;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.concat = void 0;
    var lift_1 = require_lift();
    var concatAll_1 = require_concatAll();
    var args_1 = require_args();
    var from_1 = require_from();
    function concat() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      var scheduler = args_1.popScheduler(args);
      return lift_1.operate(function(source, subscriber) {
        concatAll_1.concatAll()(from_1.from(__spreadArray([source], __read(args)), scheduler)).subscribe(subscriber);
      });
    }
    exports.concat = concat;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/concatWith.js
var require_concatWith = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/concatWith.js"(exports) {
    "use strict";
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    var __spreadArray = exports && exports.__spreadArray || function(to, from4) {
      for (var i = 0, il = from4.length, j = to.length; i < il; i++, j++)
        to[j] = from4[i];
      return to;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.concatWith = void 0;
    var concat_1 = require_concat2();
    function concatWith() {
      var otherSources = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        otherSources[_i] = arguments[_i];
      }
      return concat_1.concat.apply(void 0, __spreadArray([], __read(otherSources)));
    }
    exports.concatWith = concatWith;
  }
});

// node_modules/rxjs/dist/cjs/internal/observable/fromSubscribable.js
var require_fromSubscribable = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/observable/fromSubscribable.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromSubscribable = void 0;
    var Observable_1 = require_Observable();
    function fromSubscribable(subscribable) {
      return new Observable_1.Observable(function(subscriber) {
        return subscribable.subscribe(subscriber);
      });
    }
    exports.fromSubscribable = fromSubscribable;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/connect.js
var require_connect = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/connect.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.connect = void 0;
    var Subject_1 = require_Subject();
    var innerFrom_1 = require_innerFrom();
    var lift_1 = require_lift();
    var fromSubscribable_1 = require_fromSubscribable();
    var DEFAULT_CONFIG = {
      connector: function() {
        return new Subject_1.Subject();
      }
    };
    function connect(selector, config) {
      if (config === void 0) {
        config = DEFAULT_CONFIG;
      }
      var connector = config.connector;
      return lift_1.operate(function(source, subscriber) {
        var subject = connector();
        innerFrom_1.innerFrom(selector(fromSubscribable_1.fromSubscribable(subject))).subscribe(subscriber);
        subscriber.add(source.subscribe(subject));
      });
    }
    exports.connect = connect;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/count.js
var require_count = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/count.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.count = void 0;
    var reduce_1 = require_reduce();
    function count(predicate) {
      return reduce_1.reduce(function(total, value, i) {
        return !predicate || predicate(value, i) ? total + 1 : total;
      }, 0);
    }
    exports.count = count;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/debounce.js
var require_debounce = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/debounce.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.debounce = void 0;
    var lift_1 = require_lift();
    var noop_1 = require_noop();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    var innerFrom_1 = require_innerFrom();
    function debounce(durationSelector) {
      return lift_1.operate(function(source, subscriber) {
        var hasValue = false;
        var lastValue = null;
        var durationSubscriber = null;
        var emit = function() {
          durationSubscriber === null || durationSubscriber === void 0 ? void 0 : durationSubscriber.unsubscribe();
          durationSubscriber = null;
          if (hasValue) {
            hasValue = false;
            var value = lastValue;
            lastValue = null;
            subscriber.next(value);
          }
        };
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
          durationSubscriber === null || durationSubscriber === void 0 ? void 0 : durationSubscriber.unsubscribe();
          hasValue = true;
          lastValue = value;
          durationSubscriber = OperatorSubscriber_1.createOperatorSubscriber(subscriber, emit, noop_1.noop);
          innerFrom_1.innerFrom(durationSelector(value)).subscribe(durationSubscriber);
        }, function() {
          emit();
          subscriber.complete();
        }, void 0, function() {
          lastValue = durationSubscriber = null;
        }));
      });
    }
    exports.debounce = debounce;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/debounceTime.js
var require_debounceTime = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/debounceTime.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.debounceTime = void 0;
    var async_1 = require_async();
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    function debounceTime(dueTime, scheduler) {
      if (scheduler === void 0) {
        scheduler = async_1.asyncScheduler;
      }
      return lift_1.operate(function(source, subscriber) {
        var activeTask = null;
        var lastValue = null;
        var lastTime = null;
        var emit = function() {
          if (activeTask) {
            activeTask.unsubscribe();
            activeTask = null;
            var value = lastValue;
            lastValue = null;
            subscriber.next(value);
          }
        };
        function emitWhenIdle() {
          var targetTime = lastTime + dueTime;
          var now = scheduler.now();
          if (now < targetTime) {
            activeTask = this.schedule(void 0, targetTime - now);
            subscriber.add(activeTask);
            return;
          }
          emit();
        }
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
          lastValue = value;
          lastTime = scheduler.now();
          if (!activeTask) {
            activeTask = scheduler.schedule(emitWhenIdle, dueTime);
            subscriber.add(activeTask);
          }
        }, function() {
          emit();
          subscriber.complete();
        }, void 0, function() {
          lastValue = activeTask = null;
        }));
      });
    }
    exports.debounceTime = debounceTime;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/defaultIfEmpty.js
var require_defaultIfEmpty = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/defaultIfEmpty.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultIfEmpty = void 0;
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    function defaultIfEmpty(defaultValue) {
      return lift_1.operate(function(source, subscriber) {
        var hasValue = false;
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
          hasValue = true;
          subscriber.next(value);
        }, function() {
          if (!hasValue) {
            subscriber.next(defaultValue);
          }
          subscriber.complete();
        }));
      });
    }
    exports.defaultIfEmpty = defaultIfEmpty;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/take.js
var require_take = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/take.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.take = void 0;
    var empty_1 = require_empty();
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    function take(count) {
      return count <= 0 ? function() {
        return empty_1.EMPTY;
      } : lift_1.operate(function(source, subscriber) {
        var seen = 0;
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
          if (++seen <= count) {
            subscriber.next(value);
            if (count <= seen) {
              subscriber.complete();
            }
          }
        }));
      });
    }
    exports.take = take;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/ignoreElements.js
var require_ignoreElements = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/ignoreElements.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ignoreElements = void 0;
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    var noop_1 = require_noop();
    function ignoreElements() {
      return lift_1.operate(function(source, subscriber) {
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, noop_1.noop));
      });
    }
    exports.ignoreElements = ignoreElements;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/mapTo.js
var require_mapTo = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/mapTo.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.mapTo = void 0;
    var map_1 = require_map();
    function mapTo(value) {
      return map_1.map(function() {
        return value;
      });
    }
    exports.mapTo = mapTo;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/delayWhen.js
var require_delayWhen = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/delayWhen.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.delayWhen = void 0;
    var concat_1 = require_concat();
    var take_1 = require_take();
    var ignoreElements_1 = require_ignoreElements();
    var mapTo_1 = require_mapTo();
    var mergeMap_1 = require_mergeMap();
    var innerFrom_1 = require_innerFrom();
    function delayWhen(delayDurationSelector, subscriptionDelay) {
      if (subscriptionDelay) {
        return function(source) {
          return concat_1.concat(subscriptionDelay.pipe(take_1.take(1), ignoreElements_1.ignoreElements()), source.pipe(delayWhen(delayDurationSelector)));
        };
      }
      return mergeMap_1.mergeMap(function(value, index) {
        return innerFrom_1.innerFrom(delayDurationSelector(value, index)).pipe(take_1.take(1), mapTo_1.mapTo(value));
      });
    }
    exports.delayWhen = delayWhen;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/delay.js
var require_delay = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/delay.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.delay = void 0;
    var async_1 = require_async();
    var delayWhen_1 = require_delayWhen();
    var timer_1 = require_timer();
    function delay(due, scheduler) {
      if (scheduler === void 0) {
        scheduler = async_1.asyncScheduler;
      }
      var duration = timer_1.timer(due, scheduler);
      return delayWhen_1.delayWhen(function() {
        return duration;
      });
    }
    exports.delay = delay;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/dematerialize.js
var require_dematerialize = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/dematerialize.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.dematerialize = void 0;
    var Notification_1 = require_Notification();
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    function dematerialize() {
      return lift_1.operate(function(source, subscriber) {
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(notification) {
          return Notification_1.observeNotification(notification, subscriber);
        }));
      });
    }
    exports.dematerialize = dematerialize;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/distinct.js
var require_distinct = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/distinct.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.distinct = void 0;
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    var noop_1 = require_noop();
    var innerFrom_1 = require_innerFrom();
    function distinct(keySelector, flushes) {
      return lift_1.operate(function(source, subscriber) {
        var distinctKeys = /* @__PURE__ */ new Set();
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
          var key = keySelector ? keySelector(value) : value;
          if (!distinctKeys.has(key)) {
            distinctKeys.add(key);
            subscriber.next(value);
          }
        }));
        flushes && innerFrom_1.innerFrom(flushes).subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function() {
          return distinctKeys.clear();
        }, noop_1.noop));
      });
    }
    exports.distinct = distinct;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/distinctUntilChanged.js
var require_distinctUntilChanged = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/distinctUntilChanged.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.distinctUntilChanged = void 0;
    var identity_1 = require_identity();
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    function distinctUntilChanged(comparator, keySelector) {
      if (keySelector === void 0) {
        keySelector = identity_1.identity;
      }
      comparator = comparator !== null && comparator !== void 0 ? comparator : defaultCompare;
      return lift_1.operate(function(source, subscriber) {
        var previousKey;
        var first = true;
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
          var currentKey = keySelector(value);
          if (first || !comparator(previousKey, currentKey)) {
            first = false;
            previousKey = currentKey;
            subscriber.next(value);
          }
        }));
      });
    }
    exports.distinctUntilChanged = distinctUntilChanged;
    function defaultCompare(a, b) {
      return a === b;
    }
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/distinctUntilKeyChanged.js
var require_distinctUntilKeyChanged = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/distinctUntilKeyChanged.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.distinctUntilKeyChanged = void 0;
    var distinctUntilChanged_1 = require_distinctUntilChanged();
    function distinctUntilKeyChanged(key, compare) {
      return distinctUntilChanged_1.distinctUntilChanged(function(x, y) {
        return compare ? compare(x[key], y[key]) : x[key] === y[key];
      });
    }
    exports.distinctUntilKeyChanged = distinctUntilKeyChanged;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/throwIfEmpty.js
var require_throwIfEmpty = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/throwIfEmpty.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.throwIfEmpty = void 0;
    var EmptyError_1 = require_EmptyError();
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    function throwIfEmpty(errorFactory) {
      if (errorFactory === void 0) {
        errorFactory = defaultErrorFactory;
      }
      return lift_1.operate(function(source, subscriber) {
        var hasValue = false;
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
          hasValue = true;
          subscriber.next(value);
        }, function() {
          return hasValue ? subscriber.complete() : subscriber.error(errorFactory());
        }));
      });
    }
    exports.throwIfEmpty = throwIfEmpty;
    function defaultErrorFactory() {
      return new EmptyError_1.EmptyError();
    }
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/elementAt.js
var require_elementAt = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/elementAt.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.elementAt = void 0;
    var ArgumentOutOfRangeError_1 = require_ArgumentOutOfRangeError();
    var filter_1 = require_filter();
    var throwIfEmpty_1 = require_throwIfEmpty();
    var defaultIfEmpty_1 = require_defaultIfEmpty();
    var take_1 = require_take();
    function elementAt(index, defaultValue) {
      if (index < 0) {
        throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError();
      }
      var hasDefaultValue = arguments.length >= 2;
      return function(source) {
        return source.pipe(filter_1.filter(function(v, i) {
          return i === index;
        }), take_1.take(1), hasDefaultValue ? defaultIfEmpty_1.defaultIfEmpty(defaultValue) : throwIfEmpty_1.throwIfEmpty(function() {
          return new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError();
        }));
      };
    }
    exports.elementAt = elementAt;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/endWith.js
var require_endWith = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/endWith.js"(exports) {
    "use strict";
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    var __spreadArray = exports && exports.__spreadArray || function(to, from4) {
      for (var i = 0, il = from4.length, j = to.length; i < il; i++, j++)
        to[j] = from4[i];
      return to;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.endWith = void 0;
    var concat_1 = require_concat();
    var of_1 = require_of();
    function endWith() {
      var values = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        values[_i] = arguments[_i];
      }
      return function(source) {
        return concat_1.concat(source, of_1.of.apply(void 0, __spreadArray([], __read(values))));
      };
    }
    exports.endWith = endWith;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/every.js
var require_every = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/every.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.every = void 0;
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    function every(predicate, thisArg) {
      return lift_1.operate(function(source, subscriber) {
        var index = 0;
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
          if (!predicate.call(thisArg, value, index++, source)) {
            subscriber.next(false);
            subscriber.complete();
          }
        }, function() {
          subscriber.next(true);
          subscriber.complete();
        }));
      });
    }
    exports.every = every;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/exhaustMap.js
var require_exhaustMap = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/exhaustMap.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.exhaustMap = void 0;
    var map_1 = require_map();
    var innerFrom_1 = require_innerFrom();
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    function exhaustMap(project, resultSelector) {
      if (resultSelector) {
        return function(source) {
          return source.pipe(exhaustMap(function(a, i) {
            return innerFrom_1.innerFrom(project(a, i)).pipe(map_1.map(function(b, ii) {
              return resultSelector(a, b, i, ii);
            }));
          }));
        };
      }
      return lift_1.operate(function(source, subscriber) {
        var index = 0;
        var innerSub = null;
        var isComplete = false;
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(outerValue) {
          if (!innerSub) {
            innerSub = OperatorSubscriber_1.createOperatorSubscriber(subscriber, void 0, function() {
              innerSub = null;
              isComplete && subscriber.complete();
            });
            innerFrom_1.innerFrom(project(outerValue, index++)).subscribe(innerSub);
          }
        }, function() {
          isComplete = true;
          !innerSub && subscriber.complete();
        }));
      });
    }
    exports.exhaustMap = exhaustMap;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/exhaustAll.js
var require_exhaustAll = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/exhaustAll.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.exhaustAll = void 0;
    var exhaustMap_1 = require_exhaustMap();
    var identity_1 = require_identity();
    function exhaustAll() {
      return exhaustMap_1.exhaustMap(identity_1.identity);
    }
    exports.exhaustAll = exhaustAll;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/exhaust.js
var require_exhaust = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/exhaust.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.exhaust = void 0;
    var exhaustAll_1 = require_exhaustAll();
    exports.exhaust = exhaustAll_1.exhaustAll;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/expand.js
var require_expand = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/expand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.expand = void 0;
    var lift_1 = require_lift();
    var mergeInternals_1 = require_mergeInternals();
    function expand(project, concurrent, scheduler) {
      if (concurrent === void 0) {
        concurrent = Infinity;
      }
      concurrent = (concurrent || 0) < 1 ? Infinity : concurrent;
      return lift_1.operate(function(source, subscriber) {
        return mergeInternals_1.mergeInternals(source, subscriber, project, concurrent, void 0, true, scheduler);
      });
    }
    exports.expand = expand;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/finalize.js
var require_finalize = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/finalize.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.finalize = void 0;
    var lift_1 = require_lift();
    function finalize(callback) {
      return lift_1.operate(function(source, subscriber) {
        try {
          source.subscribe(subscriber);
        } finally {
          subscriber.add(callback);
        }
      });
    }
    exports.finalize = finalize;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/find.js
var require_find = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/find.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createFind = exports.find = void 0;
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    function find(predicate, thisArg) {
      return lift_1.operate(createFind(predicate, thisArg, "value"));
    }
    exports.find = find;
    function createFind(predicate, thisArg, emit) {
      var findIndex = emit === "index";
      return function(source, subscriber) {
        var index = 0;
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
          var i = index++;
          if (predicate.call(thisArg, value, i, source)) {
            subscriber.next(findIndex ? i : value);
            subscriber.complete();
          }
        }, function() {
          subscriber.next(findIndex ? -1 : void 0);
          subscriber.complete();
        }));
      };
    }
    exports.createFind = createFind;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/findIndex.js
var require_findIndex = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/findIndex.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.findIndex = void 0;
    var lift_1 = require_lift();
    var find_1 = require_find();
    function findIndex(predicate, thisArg) {
      return lift_1.operate(find_1.createFind(predicate, thisArg, "index"));
    }
    exports.findIndex = findIndex;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/first.js
var require_first = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/first.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.first = void 0;
    var EmptyError_1 = require_EmptyError();
    var filter_1 = require_filter();
    var take_1 = require_take();
    var defaultIfEmpty_1 = require_defaultIfEmpty();
    var throwIfEmpty_1 = require_throwIfEmpty();
    var identity_1 = require_identity();
    function first(predicate, defaultValue) {
      var hasDefaultValue = arguments.length >= 2;
      return function(source) {
        return source.pipe(predicate ? filter_1.filter(function(v, i) {
          return predicate(v, i, source);
        }) : identity_1.identity, take_1.take(1), hasDefaultValue ? defaultIfEmpty_1.defaultIfEmpty(defaultValue) : throwIfEmpty_1.throwIfEmpty(function() {
          return new EmptyError_1.EmptyError();
        }));
      };
    }
    exports.first = first;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/groupBy.js
var require_groupBy = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/groupBy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.groupBy = void 0;
    var Observable_1 = require_Observable();
    var innerFrom_1 = require_innerFrom();
    var Subject_1 = require_Subject();
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    function groupBy(keySelector, elementOrOptions, duration, connector) {
      return lift_1.operate(function(source, subscriber) {
        var element;
        if (!elementOrOptions || typeof elementOrOptions === "function") {
          element = elementOrOptions;
        } else {
          duration = elementOrOptions.duration, element = elementOrOptions.element, connector = elementOrOptions.connector;
        }
        var groups = /* @__PURE__ */ new Map();
        var notify = function(cb) {
          groups.forEach(cb);
          cb(subscriber);
        };
        var handleError = function(err) {
          return notify(function(consumer) {
            return consumer.error(err);
          });
        };
        var activeGroups = 0;
        var teardownAttempted = false;
        var groupBySourceSubscriber = new OperatorSubscriber_1.OperatorSubscriber(subscriber, function(value) {
          try {
            var key_1 = keySelector(value);
            var group_1 = groups.get(key_1);
            if (!group_1) {
              groups.set(key_1, group_1 = connector ? connector() : new Subject_1.Subject());
              var grouped = createGroupedObservable(key_1, group_1);
              subscriber.next(grouped);
              if (duration) {
                var durationSubscriber_1 = OperatorSubscriber_1.createOperatorSubscriber(group_1, function() {
                  group_1.complete();
                  durationSubscriber_1 === null || durationSubscriber_1 === void 0 ? void 0 : durationSubscriber_1.unsubscribe();
                }, void 0, void 0, function() {
                  return groups.delete(key_1);
                });
                groupBySourceSubscriber.add(innerFrom_1.innerFrom(duration(grouped)).subscribe(durationSubscriber_1));
              }
            }
            group_1.next(element ? element(value) : value);
          } catch (err) {
            handleError(err);
          }
        }, function() {
          return notify(function(consumer) {
            return consumer.complete();
          });
        }, handleError, function() {
          return groups.clear();
        }, function() {
          teardownAttempted = true;
          return activeGroups === 0;
        });
        source.subscribe(groupBySourceSubscriber);
        function createGroupedObservable(key, groupSubject) {
          var result = new Observable_1.Observable(function(groupSubscriber) {
            activeGroups++;
            var innerSub = groupSubject.subscribe(groupSubscriber);
            return function() {
              innerSub.unsubscribe();
              --activeGroups === 0 && teardownAttempted && groupBySourceSubscriber.unsubscribe();
            };
          });
          result.key = key;
          return result;
        }
      });
    }
    exports.groupBy = groupBy;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/isEmpty.js
var require_isEmpty = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/isEmpty.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isEmpty = void 0;
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    function isEmpty() {
      return lift_1.operate(function(source, subscriber) {
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function() {
          subscriber.next(false);
          subscriber.complete();
        }, function() {
          subscriber.next(true);
          subscriber.complete();
        }));
      });
    }
    exports.isEmpty = isEmpty;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/takeLast.js
var require_takeLast = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/takeLast.js"(exports) {
    "use strict";
    var __values = exports && exports.__values || function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.takeLast = void 0;
    var empty_1 = require_empty();
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    function takeLast(count) {
      return count <= 0 ? function() {
        return empty_1.EMPTY;
      } : lift_1.operate(function(source, subscriber) {
        var buffer = [];
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
          buffer.push(value);
          count < buffer.length && buffer.shift();
        }, function() {
          var e_1, _a;
          try {
            for (var buffer_1 = __values(buffer), buffer_1_1 = buffer_1.next(); !buffer_1_1.done; buffer_1_1 = buffer_1.next()) {
              var value = buffer_1_1.value;
              subscriber.next(value);
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (buffer_1_1 && !buffer_1_1.done && (_a = buffer_1.return))
                _a.call(buffer_1);
            } finally {
              if (e_1)
                throw e_1.error;
            }
          }
          subscriber.complete();
        }, void 0, function() {
          buffer = null;
        }));
      });
    }
    exports.takeLast = takeLast;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/last.js
var require_last = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/last.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.last = void 0;
    var EmptyError_1 = require_EmptyError();
    var filter_1 = require_filter();
    var takeLast_1 = require_takeLast();
    var throwIfEmpty_1 = require_throwIfEmpty();
    var defaultIfEmpty_1 = require_defaultIfEmpty();
    var identity_1 = require_identity();
    function last(predicate, defaultValue) {
      var hasDefaultValue = arguments.length >= 2;
      return function(source) {
        return source.pipe(predicate ? filter_1.filter(function(v, i) {
          return predicate(v, i, source);
        }) : identity_1.identity, takeLast_1.takeLast(1), hasDefaultValue ? defaultIfEmpty_1.defaultIfEmpty(defaultValue) : throwIfEmpty_1.throwIfEmpty(function() {
          return new EmptyError_1.EmptyError();
        }));
      };
    }
    exports.last = last;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/materialize.js
var require_materialize = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/materialize.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.materialize = void 0;
    var Notification_1 = require_Notification();
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    function materialize() {
      return lift_1.operate(function(source, subscriber) {
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
          subscriber.next(Notification_1.Notification.createNext(value));
        }, function() {
          subscriber.next(Notification_1.Notification.createComplete());
          subscriber.complete();
        }, function(err) {
          subscriber.next(Notification_1.Notification.createError(err));
          subscriber.complete();
        }));
      });
    }
    exports.materialize = materialize;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/max.js
var require_max = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/max.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.max = void 0;
    var reduce_1 = require_reduce();
    var isFunction_1 = require_isFunction();
    function max2(comparer) {
      return reduce_1.reduce(isFunction_1.isFunction(comparer) ? function(x, y) {
        return comparer(x, y) > 0 ? x : y;
      } : function(x, y) {
        return x > y ? x : y;
      });
    }
    exports.max = max2;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/flatMap.js
var require_flatMap = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/flatMap.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.flatMap = void 0;
    var mergeMap_1 = require_mergeMap();
    exports.flatMap = mergeMap_1.mergeMap;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/mergeMapTo.js
var require_mergeMapTo = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/mergeMapTo.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.mergeMapTo = void 0;
    var mergeMap_1 = require_mergeMap();
    var isFunction_1 = require_isFunction();
    function mergeMapTo(innerObservable, resultSelector, concurrent) {
      if (concurrent === void 0) {
        concurrent = Infinity;
      }
      if (isFunction_1.isFunction(resultSelector)) {
        return mergeMap_1.mergeMap(function() {
          return innerObservable;
        }, resultSelector, concurrent);
      }
      if (typeof resultSelector === "number") {
        concurrent = resultSelector;
      }
      return mergeMap_1.mergeMap(function() {
        return innerObservable;
      }, concurrent);
    }
    exports.mergeMapTo = mergeMapTo;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/mergeScan.js
var require_mergeScan = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/mergeScan.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.mergeScan = void 0;
    var lift_1 = require_lift();
    var mergeInternals_1 = require_mergeInternals();
    function mergeScan(accumulator, seed, concurrent) {
      if (concurrent === void 0) {
        concurrent = Infinity;
      }
      return lift_1.operate(function(source, subscriber) {
        var state = seed;
        return mergeInternals_1.mergeInternals(source, subscriber, function(value, index) {
          return accumulator(state, value, index);
        }, concurrent, function(value) {
          state = value;
        }, false, void 0, function() {
          return state = null;
        });
      });
    }
    exports.mergeScan = mergeScan;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/merge.js
var require_merge2 = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/merge.js"(exports) {
    "use strict";
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    var __spreadArray = exports && exports.__spreadArray || function(to, from4) {
      for (var i = 0, il = from4.length, j = to.length; i < il; i++, j++)
        to[j] = from4[i];
      return to;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.merge = void 0;
    var lift_1 = require_lift();
    var argsOrArgArray_1 = require_argsOrArgArray();
    var mergeAll_1 = require_mergeAll();
    var args_1 = require_args();
    var from_1 = require_from();
    function merge() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      var scheduler = args_1.popScheduler(args);
      var concurrent = args_1.popNumber(args, Infinity);
      args = argsOrArgArray_1.argsOrArgArray(args);
      return lift_1.operate(function(source, subscriber) {
        mergeAll_1.mergeAll(concurrent)(from_1.from(__spreadArray([source], __read(args)), scheduler)).subscribe(subscriber);
      });
    }
    exports.merge = merge;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/mergeWith.js
var require_mergeWith = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/mergeWith.js"(exports) {
    "use strict";
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    var __spreadArray = exports && exports.__spreadArray || function(to, from4) {
      for (var i = 0, il = from4.length, j = to.length; i < il; i++, j++)
        to[j] = from4[i];
      return to;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.mergeWith = void 0;
    var merge_1 = require_merge2();
    function mergeWith() {
      var otherSources = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        otherSources[_i] = arguments[_i];
      }
      return merge_1.merge.apply(void 0, __spreadArray([], __read(otherSources)));
    }
    exports.mergeWith = mergeWith;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/min.js
var require_min = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/min.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.min = void 0;
    var reduce_1 = require_reduce();
    var isFunction_1 = require_isFunction();
    function min(comparer) {
      return reduce_1.reduce(isFunction_1.isFunction(comparer) ? function(x, y) {
        return comparer(x, y) < 0 ? x : y;
      } : function(x, y) {
        return x < y ? x : y;
      });
    }
    exports.min = min;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/multicast.js
var require_multicast = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/multicast.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.multicast = void 0;
    var ConnectableObservable_1 = require_ConnectableObservable();
    var isFunction_1 = require_isFunction();
    var connect_1 = require_connect();
    function multicast(subjectOrSubjectFactory, selector) {
      var subjectFactory = isFunction_1.isFunction(subjectOrSubjectFactory) ? subjectOrSubjectFactory : function() {
        return subjectOrSubjectFactory;
      };
      if (isFunction_1.isFunction(selector)) {
        return connect_1.connect(selector, {
          connector: subjectFactory
        });
      }
      return function(source) {
        return new ConnectableObservable_1.ConnectableObservable(source, subjectFactory);
      };
    }
    exports.multicast = multicast;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/onErrorResumeNextWith.js
var require_onErrorResumeNextWith = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/onErrorResumeNextWith.js"(exports) {
    "use strict";
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    var __spreadArray = exports && exports.__spreadArray || function(to, from4) {
      for (var i = 0, il = from4.length, j = to.length; i < il; i++, j++)
        to[j] = from4[i];
      return to;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.onErrorResumeNext = exports.onErrorResumeNextWith = void 0;
    var argsOrArgArray_1 = require_argsOrArgArray();
    var onErrorResumeNext_1 = require_onErrorResumeNext();
    function onErrorResumeNextWith() {
      var sources = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        sources[_i] = arguments[_i];
      }
      var nextSources = argsOrArgArray_1.argsOrArgArray(sources);
      return function(source) {
        return onErrorResumeNext_1.onErrorResumeNext.apply(void 0, __spreadArray([source], __read(nextSources)));
      };
    }
    exports.onErrorResumeNextWith = onErrorResumeNextWith;
    exports.onErrorResumeNext = onErrorResumeNextWith;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/pairwise.js
var require_pairwise = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/pairwise.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.pairwise = void 0;
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    function pairwise() {
      return lift_1.operate(function(source, subscriber) {
        var prev;
        var hasPrev = false;
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
          var p = prev;
          prev = value;
          hasPrev && subscriber.next([p, value]);
          hasPrev = true;
        }));
      });
    }
    exports.pairwise = pairwise;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/pluck.js
var require_pluck = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/pluck.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.pluck = void 0;
    var map_1 = require_map();
    function pluck() {
      var properties = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        properties[_i] = arguments[_i];
      }
      var length = properties.length;
      if (length === 0) {
        throw new Error("list of properties cannot be empty.");
      }
      return map_1.map(function(x) {
        var currentProp = x;
        for (var i = 0; i < length; i++) {
          var p = currentProp === null || currentProp === void 0 ? void 0 : currentProp[properties[i]];
          if (typeof p !== "undefined") {
            currentProp = p;
          } else {
            return void 0;
          }
        }
        return currentProp;
      });
    }
    exports.pluck = pluck;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/publish.js
var require_publish = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/publish.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.publish = void 0;
    var Subject_1 = require_Subject();
    var multicast_1 = require_multicast();
    var connect_1 = require_connect();
    function publish(selector) {
      return selector ? function(source) {
        return connect_1.connect(selector)(source);
      } : function(source) {
        return multicast_1.multicast(new Subject_1.Subject())(source);
      };
    }
    exports.publish = publish;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/publishBehavior.js
var require_publishBehavior = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/publishBehavior.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.publishBehavior = void 0;
    var BehaviorSubject_1 = require_BehaviorSubject();
    var ConnectableObservable_1 = require_ConnectableObservable();
    function publishBehavior(initialValue) {
      return function(source) {
        var subject = new BehaviorSubject_1.BehaviorSubject(initialValue);
        return new ConnectableObservable_1.ConnectableObservable(source, function() {
          return subject;
        });
      };
    }
    exports.publishBehavior = publishBehavior;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/publishLast.js
var require_publishLast = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/publishLast.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.publishLast = void 0;
    var AsyncSubject_1 = require_AsyncSubject();
    var ConnectableObservable_1 = require_ConnectableObservable();
    function publishLast() {
      return function(source) {
        var subject = new AsyncSubject_1.AsyncSubject();
        return new ConnectableObservable_1.ConnectableObservable(source, function() {
          return subject;
        });
      };
    }
    exports.publishLast = publishLast;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/publishReplay.js
var require_publishReplay = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/publishReplay.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.publishReplay = void 0;
    var ReplaySubject_1 = require_ReplaySubject();
    var multicast_1 = require_multicast();
    var isFunction_1 = require_isFunction();
    function publishReplay(bufferSize, windowTime, selectorOrScheduler, timestampProvider) {
      if (selectorOrScheduler && !isFunction_1.isFunction(selectorOrScheduler)) {
        timestampProvider = selectorOrScheduler;
      }
      var selector = isFunction_1.isFunction(selectorOrScheduler) ? selectorOrScheduler : void 0;
      return function(source) {
        return multicast_1.multicast(new ReplaySubject_1.ReplaySubject(bufferSize, windowTime, timestampProvider), selector)(source);
      };
    }
    exports.publishReplay = publishReplay;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/raceWith.js
var require_raceWith = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/raceWith.js"(exports) {
    "use strict";
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    var __spreadArray = exports && exports.__spreadArray || function(to, from4) {
      for (var i = 0, il = from4.length, j = to.length; i < il; i++, j++)
        to[j] = from4[i];
      return to;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.raceWith = void 0;
    var race_1 = require_race();
    var lift_1 = require_lift();
    var identity_1 = require_identity();
    function raceWith() {
      var otherSources = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        otherSources[_i] = arguments[_i];
      }
      return !otherSources.length ? identity_1.identity : lift_1.operate(function(source, subscriber) {
        race_1.raceInit(__spreadArray([source], __read(otherSources)))(subscriber);
      });
    }
    exports.raceWith = raceWith;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/repeat.js
var require_repeat = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/repeat.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.repeat = void 0;
    var empty_1 = require_empty();
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    var innerFrom_1 = require_innerFrom();
    var timer_1 = require_timer();
    function repeat(countOrConfig) {
      var _a;
      var count = Infinity;
      var delay;
      if (countOrConfig != null) {
        if (typeof countOrConfig === "object") {
          _a = countOrConfig.count, count = _a === void 0 ? Infinity : _a, delay = countOrConfig.delay;
        } else {
          count = countOrConfig;
        }
      }
      return count <= 0 ? function() {
        return empty_1.EMPTY;
      } : lift_1.operate(function(source, subscriber) {
        var soFar = 0;
        var sourceSub;
        var resubscribe = function() {
          sourceSub === null || sourceSub === void 0 ? void 0 : sourceSub.unsubscribe();
          sourceSub = null;
          if (delay != null) {
            var notifier = typeof delay === "number" ? timer_1.timer(delay) : innerFrom_1.innerFrom(delay(soFar));
            var notifierSubscriber_1 = OperatorSubscriber_1.createOperatorSubscriber(subscriber, function() {
              notifierSubscriber_1.unsubscribe();
              subscribeToSource();
            });
            notifier.subscribe(notifierSubscriber_1);
          } else {
            subscribeToSource();
          }
        };
        var subscribeToSource = function() {
          var syncUnsub = false;
          sourceSub = source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, void 0, function() {
            if (++soFar < count) {
              if (sourceSub) {
                resubscribe();
              } else {
                syncUnsub = true;
              }
            } else {
              subscriber.complete();
            }
          }));
          if (syncUnsub) {
            resubscribe();
          }
        };
        subscribeToSource();
      });
    }
    exports.repeat = repeat;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/repeatWhen.js
var require_repeatWhen = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/repeatWhen.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.repeatWhen = void 0;
    var innerFrom_1 = require_innerFrom();
    var Subject_1 = require_Subject();
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    function repeatWhen(notifier) {
      return lift_1.operate(function(source, subscriber) {
        var innerSub;
        var syncResub = false;
        var completions$;
        var isNotifierComplete = false;
        var isMainComplete = false;
        var checkComplete = function() {
          return isMainComplete && isNotifierComplete && (subscriber.complete(), true);
        };
        var getCompletionSubject = function() {
          if (!completions$) {
            completions$ = new Subject_1.Subject();
            innerFrom_1.innerFrom(notifier(completions$)).subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function() {
              if (innerSub) {
                subscribeForRepeatWhen();
              } else {
                syncResub = true;
              }
            }, function() {
              isNotifierComplete = true;
              checkComplete();
            }));
          }
          return completions$;
        };
        var subscribeForRepeatWhen = function() {
          isMainComplete = false;
          innerSub = source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, void 0, function() {
            isMainComplete = true;
            !checkComplete() && getCompletionSubject().next();
          }));
          if (syncResub) {
            innerSub.unsubscribe();
            innerSub = null;
            syncResub = false;
            subscribeForRepeatWhen();
          }
        };
        subscribeForRepeatWhen();
      });
    }
    exports.repeatWhen = repeatWhen;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/retry.js
var require_retry = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/retry.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.retry = void 0;
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    var identity_1 = require_identity();
    var timer_1 = require_timer();
    var innerFrom_1 = require_innerFrom();
    function retry(configOrCount) {
      if (configOrCount === void 0) {
        configOrCount = Infinity;
      }
      var config;
      if (configOrCount && typeof configOrCount === "object") {
        config = configOrCount;
      } else {
        config = {
          count: configOrCount
        };
      }
      var _a = config.count, count = _a === void 0 ? Infinity : _a, delay = config.delay, _b = config.resetOnSuccess, resetOnSuccess = _b === void 0 ? false : _b;
      return count <= 0 ? identity_1.identity : lift_1.operate(function(source, subscriber) {
        var soFar = 0;
        var innerSub;
        var subscribeForRetry = function() {
          var syncUnsub = false;
          innerSub = source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
            if (resetOnSuccess) {
              soFar = 0;
            }
            subscriber.next(value);
          }, void 0, function(err) {
            if (soFar++ < count) {
              var resub_1 = function() {
                if (innerSub) {
                  innerSub.unsubscribe();
                  innerSub = null;
                  subscribeForRetry();
                } else {
                  syncUnsub = true;
                }
              };
              if (delay != null) {
                var notifier = typeof delay === "number" ? timer_1.timer(delay) : innerFrom_1.innerFrom(delay(err, soFar));
                var notifierSubscriber_1 = OperatorSubscriber_1.createOperatorSubscriber(subscriber, function() {
                  notifierSubscriber_1.unsubscribe();
                  resub_1();
                }, function() {
                  subscriber.complete();
                });
                notifier.subscribe(notifierSubscriber_1);
              } else {
                resub_1();
              }
            } else {
              subscriber.error(err);
            }
          }));
          if (syncUnsub) {
            innerSub.unsubscribe();
            innerSub = null;
            subscribeForRetry();
          }
        };
        subscribeForRetry();
      });
    }
    exports.retry = retry;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/retryWhen.js
var require_retryWhen = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/retryWhen.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.retryWhen = void 0;
    var innerFrom_1 = require_innerFrom();
    var Subject_1 = require_Subject();
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    function retryWhen(notifier) {
      return lift_1.operate(function(source, subscriber) {
        var innerSub;
        var syncResub = false;
        var errors$;
        var subscribeForRetryWhen = function() {
          innerSub = source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, void 0, void 0, function(err) {
            if (!errors$) {
              errors$ = new Subject_1.Subject();
              innerFrom_1.innerFrom(notifier(errors$)).subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function() {
                return innerSub ? subscribeForRetryWhen() : syncResub = true;
              }));
            }
            if (errors$) {
              errors$.next(err);
            }
          }));
          if (syncResub) {
            innerSub.unsubscribe();
            innerSub = null;
            syncResub = false;
            subscribeForRetryWhen();
          }
        };
        subscribeForRetryWhen();
      });
    }
    exports.retryWhen = retryWhen;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/sample.js
var require_sample = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/sample.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.sample = void 0;
    var innerFrom_1 = require_innerFrom();
    var lift_1 = require_lift();
    var noop_1 = require_noop();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    function sample(notifier) {
      return lift_1.operate(function(source, subscriber) {
        var hasValue = false;
        var lastValue = null;
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
          hasValue = true;
          lastValue = value;
        }));
        innerFrom_1.innerFrom(notifier).subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function() {
          if (hasValue) {
            hasValue = false;
            var value = lastValue;
            lastValue = null;
            subscriber.next(value);
          }
        }, noop_1.noop));
      });
    }
    exports.sample = sample;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/sampleTime.js
var require_sampleTime = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/sampleTime.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.sampleTime = void 0;
    var async_1 = require_async();
    var sample_1 = require_sample();
    var interval_1 = require_interval();
    function sampleTime(period, scheduler) {
      if (scheduler === void 0) {
        scheduler = async_1.asyncScheduler;
      }
      return sample_1.sample(interval_1.interval(period, scheduler));
    }
    exports.sampleTime = sampleTime;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/scan.js
var require_scan = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/scan.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.scan = void 0;
    var lift_1 = require_lift();
    var scanInternals_1 = require_scanInternals();
    function scan(accumulator, seed) {
      return lift_1.operate(scanInternals_1.scanInternals(accumulator, seed, arguments.length >= 2, true));
    }
    exports.scan = scan;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/sequenceEqual.js
var require_sequenceEqual = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/sequenceEqual.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.sequenceEqual = void 0;
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    var innerFrom_1 = require_innerFrom();
    function sequenceEqual(compareTo, comparator) {
      if (comparator === void 0) {
        comparator = function(a, b) {
          return a === b;
        };
      }
      return lift_1.operate(function(source, subscriber) {
        var aState = createState();
        var bState = createState();
        var emit = function(isEqual) {
          subscriber.next(isEqual);
          subscriber.complete();
        };
        var createSubscriber = function(selfState, otherState) {
          var sequenceEqualSubscriber = OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(a) {
            var buffer = otherState.buffer, complete = otherState.complete;
            if (buffer.length === 0) {
              complete ? emit(false) : selfState.buffer.push(a);
            } else {
              !comparator(a, buffer.shift()) && emit(false);
            }
          }, function() {
            selfState.complete = true;
            var complete = otherState.complete, buffer = otherState.buffer;
            complete && emit(buffer.length === 0);
            sequenceEqualSubscriber === null || sequenceEqualSubscriber === void 0 ? void 0 : sequenceEqualSubscriber.unsubscribe();
          });
          return sequenceEqualSubscriber;
        };
        source.subscribe(createSubscriber(aState, bState));
        innerFrom_1.innerFrom(compareTo).subscribe(createSubscriber(bState, aState));
      });
    }
    exports.sequenceEqual = sequenceEqual;
    function createState() {
      return {
        buffer: [],
        complete: false
      };
    }
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/share.js
var require_share = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/share.js"(exports) {
    "use strict";
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    var __spreadArray = exports && exports.__spreadArray || function(to, from4) {
      for (var i = 0, il = from4.length, j = to.length; i < il; i++, j++)
        to[j] = from4[i];
      return to;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.share = void 0;
    var innerFrom_1 = require_innerFrom();
    var Subject_1 = require_Subject();
    var Subscriber_1 = require_Subscriber();
    var lift_1 = require_lift();
    function share(options2) {
      if (options2 === void 0) {
        options2 = {};
      }
      var _a = options2.connector, connector = _a === void 0 ? function() {
        return new Subject_1.Subject();
      } : _a, _b = options2.resetOnError, resetOnError = _b === void 0 ? true : _b, _c = options2.resetOnComplete, resetOnComplete = _c === void 0 ? true : _c, _d = options2.resetOnRefCountZero, resetOnRefCountZero = _d === void 0 ? true : _d;
      return function(wrapperSource) {
        var connection;
        var resetConnection;
        var subject;
        var refCount = 0;
        var hasCompleted = false;
        var hasErrored = false;
        var cancelReset = function() {
          resetConnection === null || resetConnection === void 0 ? void 0 : resetConnection.unsubscribe();
          resetConnection = void 0;
        };
        var reset = function() {
          cancelReset();
          connection = subject = void 0;
          hasCompleted = hasErrored = false;
        };
        var resetAndUnsubscribe = function() {
          var conn = connection;
          reset();
          conn === null || conn === void 0 ? void 0 : conn.unsubscribe();
        };
        return lift_1.operate(function(source, subscriber) {
          refCount++;
          if (!hasErrored && !hasCompleted) {
            cancelReset();
          }
          var dest = subject = subject !== null && subject !== void 0 ? subject : connector();
          subscriber.add(function() {
            refCount--;
            if (refCount === 0 && !hasErrored && !hasCompleted) {
              resetConnection = handleReset(resetAndUnsubscribe, resetOnRefCountZero);
            }
          });
          dest.subscribe(subscriber);
          if (!connection && refCount > 0) {
            connection = new Subscriber_1.SafeSubscriber({
              next: function(value) {
                return dest.next(value);
              },
              error: function(err) {
                hasErrored = true;
                cancelReset();
                resetConnection = handleReset(reset, resetOnError, err);
                dest.error(err);
              },
              complete: function() {
                hasCompleted = true;
                cancelReset();
                resetConnection = handleReset(reset, resetOnComplete);
                dest.complete();
              }
            });
            innerFrom_1.innerFrom(source).subscribe(connection);
          }
        })(wrapperSource);
      };
    }
    exports.share = share;
    function handleReset(reset, on) {
      var args = [];
      for (var _i = 2; _i < arguments.length; _i++) {
        args[_i - 2] = arguments[_i];
      }
      if (on === true) {
        reset();
        return;
      }
      if (on === false) {
        return;
      }
      var onSubscriber = new Subscriber_1.SafeSubscriber({
        next: function() {
          onSubscriber.unsubscribe();
          reset();
        }
      });
      return innerFrom_1.innerFrom(on.apply(void 0, __spreadArray([], __read(args)))).subscribe(onSubscriber);
    }
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/shareReplay.js
var require_shareReplay = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/shareReplay.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.shareReplay = void 0;
    var ReplaySubject_1 = require_ReplaySubject();
    var share_1 = require_share();
    function shareReplay(configOrBufferSize, windowTime, scheduler) {
      var _a, _b, _c;
      var bufferSize;
      var refCount = false;
      if (configOrBufferSize && typeof configOrBufferSize === "object") {
        _a = configOrBufferSize.bufferSize, bufferSize = _a === void 0 ? Infinity : _a, _b = configOrBufferSize.windowTime, windowTime = _b === void 0 ? Infinity : _b, _c = configOrBufferSize.refCount, refCount = _c === void 0 ? false : _c, scheduler = configOrBufferSize.scheduler;
      } else {
        bufferSize = configOrBufferSize !== null && configOrBufferSize !== void 0 ? configOrBufferSize : Infinity;
      }
      return share_1.share({
        connector: function() {
          return new ReplaySubject_1.ReplaySubject(bufferSize, windowTime, scheduler);
        },
        resetOnError: true,
        resetOnComplete: false,
        resetOnRefCountZero: refCount
      });
    }
    exports.shareReplay = shareReplay;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/single.js
var require_single = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/single.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.single = void 0;
    var EmptyError_1 = require_EmptyError();
    var SequenceError_1 = require_SequenceError();
    var NotFoundError_1 = require_NotFoundError();
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    function single(predicate) {
      return lift_1.operate(function(source, subscriber) {
        var hasValue = false;
        var singleValue;
        var seenValue = false;
        var index = 0;
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
          seenValue = true;
          if (!predicate || predicate(value, index++, source)) {
            hasValue && subscriber.error(new SequenceError_1.SequenceError("Too many matching values"));
            hasValue = true;
            singleValue = value;
          }
        }, function() {
          if (hasValue) {
            subscriber.next(singleValue);
            subscriber.complete();
          } else {
            subscriber.error(seenValue ? new NotFoundError_1.NotFoundError("No matching values") : new EmptyError_1.EmptyError());
          }
        }));
      });
    }
    exports.single = single;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/skip.js
var require_skip = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/skip.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.skip = void 0;
    var filter_1 = require_filter();
    function skip(count) {
      return filter_1.filter(function(_, index) {
        return count <= index;
      });
    }
    exports.skip = skip;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/skipLast.js
var require_skipLast = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/skipLast.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.skipLast = void 0;
    var identity_1 = require_identity();
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    function skipLast(skipCount) {
      return skipCount <= 0 ? identity_1.identity : lift_1.operate(function(source, subscriber) {
        var ring = new Array(skipCount);
        var seen = 0;
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
          var valueIndex = seen++;
          if (valueIndex < skipCount) {
            ring[valueIndex] = value;
          } else {
            var index = valueIndex % skipCount;
            var oldValue = ring[index];
            ring[index] = value;
            subscriber.next(oldValue);
          }
        }));
        return function() {
          ring = null;
        };
      });
    }
    exports.skipLast = skipLast;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/skipUntil.js
var require_skipUntil = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/skipUntil.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.skipUntil = void 0;
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    var innerFrom_1 = require_innerFrom();
    var noop_1 = require_noop();
    function skipUntil(notifier) {
      return lift_1.operate(function(source, subscriber) {
        var taking = false;
        var skipSubscriber = OperatorSubscriber_1.createOperatorSubscriber(subscriber, function() {
          skipSubscriber === null || skipSubscriber === void 0 ? void 0 : skipSubscriber.unsubscribe();
          taking = true;
        }, noop_1.noop);
        innerFrom_1.innerFrom(notifier).subscribe(skipSubscriber);
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
          return taking && subscriber.next(value);
        }));
      });
    }
    exports.skipUntil = skipUntil;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/skipWhile.js
var require_skipWhile = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/skipWhile.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.skipWhile = void 0;
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    function skipWhile(predicate) {
      return lift_1.operate(function(source, subscriber) {
        var taking = false;
        var index = 0;
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
          return (taking || (taking = !predicate(value, index++))) && subscriber.next(value);
        }));
      });
    }
    exports.skipWhile = skipWhile;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/startWith.js
var require_startWith = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/startWith.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.startWith = void 0;
    var concat_1 = require_concat();
    var args_1 = require_args();
    var lift_1 = require_lift();
    function startWith() {
      var values = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        values[_i] = arguments[_i];
      }
      var scheduler = args_1.popScheduler(values);
      return lift_1.operate(function(source, subscriber) {
        (scheduler ? concat_1.concat(values, source, scheduler) : concat_1.concat(values, source)).subscribe(subscriber);
      });
    }
    exports.startWith = startWith;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/switchMap.js
var require_switchMap = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/switchMap.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.switchMap = void 0;
    var innerFrom_1 = require_innerFrom();
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    function switchMap(project, resultSelector) {
      return lift_1.operate(function(source, subscriber) {
        var innerSubscriber = null;
        var index = 0;
        var isComplete = false;
        var checkComplete = function() {
          return isComplete && !innerSubscriber && subscriber.complete();
        };
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
          innerSubscriber === null || innerSubscriber === void 0 ? void 0 : innerSubscriber.unsubscribe();
          var innerIndex = 0;
          var outerIndex = index++;
          innerFrom_1.innerFrom(project(value, outerIndex)).subscribe(innerSubscriber = OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(innerValue) {
            return subscriber.next(resultSelector ? resultSelector(value, innerValue, outerIndex, innerIndex++) : innerValue);
          }, function() {
            innerSubscriber = null;
            checkComplete();
          }));
        }, function() {
          isComplete = true;
          checkComplete();
        }));
      });
    }
    exports.switchMap = switchMap;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/switchAll.js
var require_switchAll = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/switchAll.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.switchAll = void 0;
    var switchMap_1 = require_switchMap();
    var identity_1 = require_identity();
    function switchAll() {
      return switchMap_1.switchMap(identity_1.identity);
    }
    exports.switchAll = switchAll;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/switchMapTo.js
var require_switchMapTo = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/switchMapTo.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.switchMapTo = void 0;
    var switchMap_1 = require_switchMap();
    var isFunction_1 = require_isFunction();
    function switchMapTo(innerObservable, resultSelector) {
      return isFunction_1.isFunction(resultSelector) ? switchMap_1.switchMap(function() {
        return innerObservable;
      }, resultSelector) : switchMap_1.switchMap(function() {
        return innerObservable;
      });
    }
    exports.switchMapTo = switchMapTo;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/switchScan.js
var require_switchScan = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/switchScan.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.switchScan = void 0;
    var switchMap_1 = require_switchMap();
    var lift_1 = require_lift();
    function switchScan(accumulator, seed) {
      return lift_1.operate(function(source, subscriber) {
        var state = seed;
        switchMap_1.switchMap(function(value, index) {
          return accumulator(state, value, index);
        }, function(_, innerValue) {
          return state = innerValue, innerValue;
        })(source).subscribe(subscriber);
        return function() {
          state = null;
        };
      });
    }
    exports.switchScan = switchScan;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/takeUntil.js
var require_takeUntil = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/takeUntil.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.takeUntil = void 0;
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    var innerFrom_1 = require_innerFrom();
    var noop_1 = require_noop();
    function takeUntil(notifier) {
      return lift_1.operate(function(source, subscriber) {
        innerFrom_1.innerFrom(notifier).subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function() {
          return subscriber.complete();
        }, noop_1.noop));
        !subscriber.closed && source.subscribe(subscriber);
      });
    }
    exports.takeUntil = takeUntil;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/takeWhile.js
var require_takeWhile = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/takeWhile.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.takeWhile = void 0;
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    function takeWhile(predicate, inclusive) {
      if (inclusive === void 0) {
        inclusive = false;
      }
      return lift_1.operate(function(source, subscriber) {
        var index = 0;
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
          var result = predicate(value, index++);
          (result || inclusive) && subscriber.next(value);
          !result && subscriber.complete();
        }));
      });
    }
    exports.takeWhile = takeWhile;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/tap.js
var require_tap = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/tap.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.tap = void 0;
    var isFunction_1 = require_isFunction();
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    var identity_1 = require_identity();
    function tap(observerOrNext, error, complete) {
      var tapObserver = isFunction_1.isFunction(observerOrNext) || error || complete ? { next: observerOrNext, error, complete } : observerOrNext;
      return tapObserver ? lift_1.operate(function(source, subscriber) {
        var _a;
        (_a = tapObserver.subscribe) === null || _a === void 0 ? void 0 : _a.call(tapObserver);
        var isUnsub = true;
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
          var _a2;
          (_a2 = tapObserver.next) === null || _a2 === void 0 ? void 0 : _a2.call(tapObserver, value);
          subscriber.next(value);
        }, function() {
          var _a2;
          isUnsub = false;
          (_a2 = tapObserver.complete) === null || _a2 === void 0 ? void 0 : _a2.call(tapObserver);
          subscriber.complete();
        }, function(err) {
          var _a2;
          isUnsub = false;
          (_a2 = tapObserver.error) === null || _a2 === void 0 ? void 0 : _a2.call(tapObserver, err);
          subscriber.error(err);
        }, function() {
          var _a2, _b;
          if (isUnsub) {
            (_a2 = tapObserver.unsubscribe) === null || _a2 === void 0 ? void 0 : _a2.call(tapObserver);
          }
          (_b = tapObserver.finalize) === null || _b === void 0 ? void 0 : _b.call(tapObserver);
        }));
      }) : identity_1.identity;
    }
    exports.tap = tap;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/throttle.js
var require_throttle = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/throttle.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.throttle = void 0;
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    var innerFrom_1 = require_innerFrom();
    function throttle(durationSelector, config) {
      return lift_1.operate(function(source, subscriber) {
        var _a = config !== null && config !== void 0 ? config : {}, _b = _a.leading, leading = _b === void 0 ? true : _b, _c = _a.trailing, trailing = _c === void 0 ? false : _c;
        var hasValue = false;
        var sendValue = null;
        var throttled = null;
        var isComplete = false;
        var endThrottling = function() {
          throttled === null || throttled === void 0 ? void 0 : throttled.unsubscribe();
          throttled = null;
          if (trailing) {
            send();
            isComplete && subscriber.complete();
          }
        };
        var cleanupThrottling = function() {
          throttled = null;
          isComplete && subscriber.complete();
        };
        var startThrottle = function(value) {
          return throttled = innerFrom_1.innerFrom(durationSelector(value)).subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, endThrottling, cleanupThrottling));
        };
        var send = function() {
          if (hasValue) {
            hasValue = false;
            var value = sendValue;
            sendValue = null;
            subscriber.next(value);
            !isComplete && startThrottle(value);
          }
        };
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
          hasValue = true;
          sendValue = value;
          !(throttled && !throttled.closed) && (leading ? send() : startThrottle(value));
        }, function() {
          isComplete = true;
          !(trailing && hasValue && throttled && !throttled.closed) && subscriber.complete();
        }));
      });
    }
    exports.throttle = throttle;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/throttleTime.js
var require_throttleTime = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/throttleTime.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.throttleTime = void 0;
    var async_1 = require_async();
    var throttle_1 = require_throttle();
    var timer_1 = require_timer();
    function throttleTime(duration, scheduler, config) {
      if (scheduler === void 0) {
        scheduler = async_1.asyncScheduler;
      }
      var duration$ = timer_1.timer(duration, scheduler);
      return throttle_1.throttle(function() {
        return duration$;
      }, config);
    }
    exports.throttleTime = throttleTime;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/timeInterval.js
var require_timeInterval = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/timeInterval.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TimeInterval = exports.timeInterval = void 0;
    var async_1 = require_async();
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    function timeInterval(scheduler) {
      if (scheduler === void 0) {
        scheduler = async_1.asyncScheduler;
      }
      return lift_1.operate(function(source, subscriber) {
        var last = scheduler.now();
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
          var now = scheduler.now();
          var interval = now - last;
          last = now;
          subscriber.next(new TimeInterval(value, interval));
        }));
      });
    }
    exports.timeInterval = timeInterval;
    var TimeInterval = function() {
      function TimeInterval2(value, interval) {
        this.value = value;
        this.interval = interval;
      }
      return TimeInterval2;
    }();
    exports.TimeInterval = TimeInterval;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/timeoutWith.js
var require_timeoutWith = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/timeoutWith.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.timeoutWith = void 0;
    var async_1 = require_async();
    var isDate_1 = require_isDate();
    var timeout_1 = require_timeout();
    function timeoutWith(due, withObservable, scheduler) {
      var first;
      var each;
      var _with;
      scheduler = scheduler !== null && scheduler !== void 0 ? scheduler : async_1.async;
      if (isDate_1.isValidDate(due)) {
        first = due;
      } else if (typeof due === "number") {
        each = due;
      }
      if (withObservable) {
        _with = function() {
          return withObservable;
        };
      } else {
        throw new TypeError("No observable provided to switch to");
      }
      if (first == null && each == null) {
        throw new TypeError("No timeout provided.");
      }
      return timeout_1.timeout({
        first,
        each,
        scheduler,
        with: _with
      });
    }
    exports.timeoutWith = timeoutWith;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/timestamp.js
var require_timestamp = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/timestamp.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.timestamp = void 0;
    var dateTimestampProvider_1 = require_dateTimestampProvider();
    var map_1 = require_map();
    function timestamp(timestampProvider) {
      if (timestampProvider === void 0) {
        timestampProvider = dateTimestampProvider_1.dateTimestampProvider;
      }
      return map_1.map(function(value) {
        return { value, timestamp: timestampProvider.now() };
      });
    }
    exports.timestamp = timestamp;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/window.js
var require_window = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/window.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.window = void 0;
    var Subject_1 = require_Subject();
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    var noop_1 = require_noop();
    var innerFrom_1 = require_innerFrom();
    function window2(windowBoundaries) {
      return lift_1.operate(function(source, subscriber) {
        var windowSubject = new Subject_1.Subject();
        subscriber.next(windowSubject.asObservable());
        var errorHandler = function(err) {
          windowSubject.error(err);
          subscriber.error(err);
        };
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
          return windowSubject === null || windowSubject === void 0 ? void 0 : windowSubject.next(value);
        }, function() {
          windowSubject.complete();
          subscriber.complete();
        }, errorHandler));
        innerFrom_1.innerFrom(windowBoundaries).subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function() {
          windowSubject.complete();
          subscriber.next(windowSubject = new Subject_1.Subject());
        }, noop_1.noop, errorHandler));
        return function() {
          windowSubject === null || windowSubject === void 0 ? void 0 : windowSubject.unsubscribe();
          windowSubject = null;
        };
      });
    }
    exports.window = window2;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/windowCount.js
var require_windowCount = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/windowCount.js"(exports) {
    "use strict";
    var __values = exports && exports.__values || function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.windowCount = void 0;
    var Subject_1 = require_Subject();
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    function windowCount(windowSize, startWindowEvery) {
      if (startWindowEvery === void 0) {
        startWindowEvery = 0;
      }
      var startEvery = startWindowEvery > 0 ? startWindowEvery : windowSize;
      return lift_1.operate(function(source, subscriber) {
        var windows = [new Subject_1.Subject()];
        var starts = [];
        var count = 0;
        subscriber.next(windows[0].asObservable());
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
          var e_1, _a;
          try {
            for (var windows_1 = __values(windows), windows_1_1 = windows_1.next(); !windows_1_1.done; windows_1_1 = windows_1.next()) {
              var window_1 = windows_1_1.value;
              window_1.next(value);
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (windows_1_1 && !windows_1_1.done && (_a = windows_1.return))
                _a.call(windows_1);
            } finally {
              if (e_1)
                throw e_1.error;
            }
          }
          var c = count - windowSize + 1;
          if (c >= 0 && c % startEvery === 0) {
            windows.shift().complete();
          }
          if (++count % startEvery === 0) {
            var window_2 = new Subject_1.Subject();
            windows.push(window_2);
            subscriber.next(window_2.asObservable());
          }
        }, function() {
          while (windows.length > 0) {
            windows.shift().complete();
          }
          subscriber.complete();
        }, function(err) {
          while (windows.length > 0) {
            windows.shift().error(err);
          }
          subscriber.error(err);
        }, function() {
          starts = null;
          windows = null;
        }));
      });
    }
    exports.windowCount = windowCount;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/windowTime.js
var require_windowTime = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/windowTime.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.windowTime = void 0;
    var Subject_1 = require_Subject();
    var async_1 = require_async();
    var Subscription_1 = require_Subscription();
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    var arrRemove_1 = require_arrRemove();
    var args_1 = require_args();
    var executeSchedule_1 = require_executeSchedule();
    function windowTime(windowTimeSpan) {
      var _a, _b;
      var otherArgs = [];
      for (var _i = 1; _i < arguments.length; _i++) {
        otherArgs[_i - 1] = arguments[_i];
      }
      var scheduler = (_a = args_1.popScheduler(otherArgs)) !== null && _a !== void 0 ? _a : async_1.asyncScheduler;
      var windowCreationInterval = (_b = otherArgs[0]) !== null && _b !== void 0 ? _b : null;
      var maxWindowSize = otherArgs[1] || Infinity;
      return lift_1.operate(function(source, subscriber) {
        var windowRecords = [];
        var restartOnClose = false;
        var closeWindow = function(record) {
          var window2 = record.window, subs = record.subs;
          window2.complete();
          subs.unsubscribe();
          arrRemove_1.arrRemove(windowRecords, record);
          restartOnClose && startWindow();
        };
        var startWindow = function() {
          if (windowRecords) {
            var subs = new Subscription_1.Subscription();
            subscriber.add(subs);
            var window_1 = new Subject_1.Subject();
            var record_1 = {
              window: window_1,
              subs,
              seen: 0
            };
            windowRecords.push(record_1);
            subscriber.next(window_1.asObservable());
            executeSchedule_1.executeSchedule(subs, scheduler, function() {
              return closeWindow(record_1);
            }, windowTimeSpan);
          }
        };
        if (windowCreationInterval !== null && windowCreationInterval >= 0) {
          executeSchedule_1.executeSchedule(subscriber, scheduler, startWindow, windowCreationInterval, true);
        } else {
          restartOnClose = true;
        }
        startWindow();
        var loop = function(cb) {
          return windowRecords.slice().forEach(cb);
        };
        var terminate = function(cb) {
          loop(function(_a2) {
            var window2 = _a2.window;
            return cb(window2);
          });
          cb(subscriber);
          subscriber.unsubscribe();
        };
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
          loop(function(record) {
            record.window.next(value);
            maxWindowSize <= ++record.seen && closeWindow(record);
          });
        }, function() {
          return terminate(function(consumer) {
            return consumer.complete();
          });
        }, function(err) {
          return terminate(function(consumer) {
            return consumer.error(err);
          });
        }));
        return function() {
          windowRecords = null;
        };
      });
    }
    exports.windowTime = windowTime;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/windowToggle.js
var require_windowToggle = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/windowToggle.js"(exports) {
    "use strict";
    var __values = exports && exports.__values || function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.windowToggle = void 0;
    var Subject_1 = require_Subject();
    var Subscription_1 = require_Subscription();
    var lift_1 = require_lift();
    var innerFrom_1 = require_innerFrom();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    var noop_1 = require_noop();
    var arrRemove_1 = require_arrRemove();
    function windowToggle(openings, closingSelector) {
      return lift_1.operate(function(source, subscriber) {
        var windows = [];
        var handleError = function(err) {
          while (0 < windows.length) {
            windows.shift().error(err);
          }
          subscriber.error(err);
        };
        innerFrom_1.innerFrom(openings).subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(openValue) {
          var window2 = new Subject_1.Subject();
          windows.push(window2);
          var closingSubscription = new Subscription_1.Subscription();
          var closeWindow = function() {
            arrRemove_1.arrRemove(windows, window2);
            window2.complete();
            closingSubscription.unsubscribe();
          };
          var closingNotifier;
          try {
            closingNotifier = innerFrom_1.innerFrom(closingSelector(openValue));
          } catch (err) {
            handleError(err);
            return;
          }
          subscriber.next(window2.asObservable());
          closingSubscription.add(closingNotifier.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, closeWindow, noop_1.noop, handleError)));
        }, noop_1.noop));
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
          var e_1, _a;
          var windowsCopy = windows.slice();
          try {
            for (var windowsCopy_1 = __values(windowsCopy), windowsCopy_1_1 = windowsCopy_1.next(); !windowsCopy_1_1.done; windowsCopy_1_1 = windowsCopy_1.next()) {
              var window_1 = windowsCopy_1_1.value;
              window_1.next(value);
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (windowsCopy_1_1 && !windowsCopy_1_1.done && (_a = windowsCopy_1.return))
                _a.call(windowsCopy_1);
            } finally {
              if (e_1)
                throw e_1.error;
            }
          }
        }, function() {
          while (0 < windows.length) {
            windows.shift().complete();
          }
          subscriber.complete();
        }, handleError, function() {
          while (0 < windows.length) {
            windows.shift().unsubscribe();
          }
        }));
      });
    }
    exports.windowToggle = windowToggle;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/windowWhen.js
var require_windowWhen = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/windowWhen.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.windowWhen = void 0;
    var Subject_1 = require_Subject();
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    var innerFrom_1 = require_innerFrom();
    function windowWhen(closingSelector) {
      return lift_1.operate(function(source, subscriber) {
        var window2;
        var closingSubscriber;
        var handleError = function(err) {
          window2.error(err);
          subscriber.error(err);
        };
        var openWindow = function() {
          closingSubscriber === null || closingSubscriber === void 0 ? void 0 : closingSubscriber.unsubscribe();
          window2 === null || window2 === void 0 ? void 0 : window2.complete();
          window2 = new Subject_1.Subject();
          subscriber.next(window2.asObservable());
          var closingNotifier;
          try {
            closingNotifier = innerFrom_1.innerFrom(closingSelector());
          } catch (err) {
            handleError(err);
            return;
          }
          closingNotifier.subscribe(closingSubscriber = OperatorSubscriber_1.createOperatorSubscriber(subscriber, openWindow, openWindow, handleError));
        };
        openWindow();
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
          return window2.next(value);
        }, function() {
          window2.complete();
          subscriber.complete();
        }, handleError, function() {
          closingSubscriber === null || closingSubscriber === void 0 ? void 0 : closingSubscriber.unsubscribe();
          window2 = null;
        }));
      });
    }
    exports.windowWhen = windowWhen;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/withLatestFrom.js
var require_withLatestFrom = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/withLatestFrom.js"(exports) {
    "use strict";
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    var __spreadArray = exports && exports.__spreadArray || function(to, from4) {
      for (var i = 0, il = from4.length, j = to.length; i < il; i++, j++)
        to[j] = from4[i];
      return to;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.withLatestFrom = void 0;
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    var innerFrom_1 = require_innerFrom();
    var identity_1 = require_identity();
    var noop_1 = require_noop();
    var args_1 = require_args();
    function withLatestFrom() {
      var inputs = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        inputs[_i] = arguments[_i];
      }
      var project = args_1.popResultSelector(inputs);
      return lift_1.operate(function(source, subscriber) {
        var len = inputs.length;
        var otherValues = new Array(len);
        var hasValue = inputs.map(function() {
          return false;
        });
        var ready2 = false;
        var _loop_1 = function(i2) {
          innerFrom_1.innerFrom(inputs[i2]).subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
            otherValues[i2] = value;
            if (!ready2 && !hasValue[i2]) {
              hasValue[i2] = true;
              (ready2 = hasValue.every(identity_1.identity)) && (hasValue = null);
            }
          }, noop_1.noop));
        };
        for (var i = 0; i < len; i++) {
          _loop_1(i);
        }
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
          if (ready2) {
            var values = __spreadArray([value], __read(otherValues));
            subscriber.next(project ? project.apply(void 0, __spreadArray([], __read(values))) : values);
          }
        }));
      });
    }
    exports.withLatestFrom = withLatestFrom;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/zipAll.js
var require_zipAll = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/zipAll.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.zipAll = void 0;
    var zip_1 = require_zip();
    var joinAllInternals_1 = require_joinAllInternals();
    function zipAll(project) {
      return joinAllInternals_1.joinAllInternals(zip_1.zip, project);
    }
    exports.zipAll = zipAll;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/zip.js
var require_zip2 = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/zip.js"(exports) {
    "use strict";
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    var __spreadArray = exports && exports.__spreadArray || function(to, from4) {
      for (var i = 0, il = from4.length, j = to.length; i < il; i++, j++)
        to[j] = from4[i];
      return to;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.zip = void 0;
    var zip_1 = require_zip();
    var lift_1 = require_lift();
    function zip() {
      var sources = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        sources[_i] = arguments[_i];
      }
      return lift_1.operate(function(source, subscriber) {
        zip_1.zip.apply(void 0, __spreadArray([source], __read(sources))).subscribe(subscriber);
      });
    }
    exports.zip = zip;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/zipWith.js
var require_zipWith = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/zipWith.js"(exports) {
    "use strict";
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    var __spreadArray = exports && exports.__spreadArray || function(to, from4) {
      for (var i = 0, il = from4.length, j = to.length; i < il; i++, j++)
        to[j] = from4[i];
      return to;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.zipWith = void 0;
    var zip_1 = require_zip2();
    function zipWith() {
      var otherInputs = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        otherInputs[_i] = arguments[_i];
      }
      return zip_1.zip.apply(void 0, __spreadArray([], __read(otherInputs)));
    }
    exports.zipWith = zipWith;
  }
});

// node_modules/rxjs/dist/cjs/index.js
var require_cjs = __commonJS({
  "node_modules/rxjs/dist/cjs/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.interval = exports.iif = exports.generate = exports.fromEventPattern = exports.fromEvent = exports.from = exports.forkJoin = exports.empty = exports.defer = exports.connectable = exports.concat = exports.combineLatest = exports.bindNodeCallback = exports.bindCallback = exports.UnsubscriptionError = exports.TimeoutError = exports.SequenceError = exports.ObjectUnsubscribedError = exports.NotFoundError = exports.EmptyError = exports.ArgumentOutOfRangeError = exports.firstValueFrom = exports.lastValueFrom = exports.isObservable = exports.identity = exports.noop = exports.pipe = exports.NotificationKind = exports.Notification = exports.Subscriber = exports.Subscription = exports.Scheduler = exports.VirtualAction = exports.VirtualTimeScheduler = exports.animationFrameScheduler = exports.animationFrame = exports.queueScheduler = exports.queue = exports.asyncScheduler = exports.async = exports.asapScheduler = exports.asap = exports.AsyncSubject = exports.ReplaySubject = exports.BehaviorSubject = exports.Subject = exports.animationFrames = exports.observable = exports.ConnectableObservable = exports.Observable = void 0;
    exports.filter = exports.expand = exports.exhaustMap = exports.exhaustAll = exports.exhaust = exports.every = exports.endWith = exports.elementAt = exports.distinctUntilKeyChanged = exports.distinctUntilChanged = exports.distinct = exports.dematerialize = exports.delayWhen = exports.delay = exports.defaultIfEmpty = exports.debounceTime = exports.debounce = exports.count = exports.connect = exports.concatWith = exports.concatMapTo = exports.concatMap = exports.concatAll = exports.combineLatestWith = exports.combineLatestAll = exports.combineAll = exports.catchError = exports.bufferWhen = exports.bufferToggle = exports.bufferTime = exports.bufferCount = exports.buffer = exports.auditTime = exports.audit = exports.config = exports.NEVER = exports.EMPTY = exports.scheduled = exports.zip = exports.using = exports.timer = exports.throwError = exports.range = exports.race = exports.partition = exports.pairs = exports.onErrorResumeNext = exports.of = exports.never = exports.merge = void 0;
    exports.switchMap = exports.switchAll = exports.subscribeOn = exports.startWith = exports.skipWhile = exports.skipUntil = exports.skipLast = exports.skip = exports.single = exports.shareReplay = exports.share = exports.sequenceEqual = exports.scan = exports.sampleTime = exports.sample = exports.refCount = exports.retryWhen = exports.retry = exports.repeatWhen = exports.repeat = exports.reduce = exports.raceWith = exports.publishReplay = exports.publishLast = exports.publishBehavior = exports.publish = exports.pluck = exports.pairwise = exports.onErrorResumeNextWith = exports.observeOn = exports.multicast = exports.min = exports.mergeWith = exports.mergeScan = exports.mergeMapTo = exports.mergeMap = exports.flatMap = exports.mergeAll = exports.max = exports.materialize = exports.mapTo = exports.map = exports.last = exports.isEmpty = exports.ignoreElements = exports.groupBy = exports.first = exports.findIndex = exports.find = exports.finalize = void 0;
    exports.zipWith = exports.zipAll = exports.withLatestFrom = exports.windowWhen = exports.windowToggle = exports.windowTime = exports.windowCount = exports.window = exports.toArray = exports.timestamp = exports.timeoutWith = exports.timeout = exports.timeInterval = exports.throwIfEmpty = exports.throttleTime = exports.throttle = exports.tap = exports.takeWhile = exports.takeUntil = exports.takeLast = exports.take = exports.switchScan = exports.switchMapTo = void 0;
    var Observable_1 = require_Observable();
    Object.defineProperty(exports, "Observable", { enumerable: true, get: function() {
      return Observable_1.Observable;
    } });
    var ConnectableObservable_1 = require_ConnectableObservable();
    Object.defineProperty(exports, "ConnectableObservable", { enumerable: true, get: function() {
      return ConnectableObservable_1.ConnectableObservable;
    } });
    var observable_1 = require_observable();
    Object.defineProperty(exports, "observable", { enumerable: true, get: function() {
      return observable_1.observable;
    } });
    var animationFrames_1 = require_animationFrames();
    Object.defineProperty(exports, "animationFrames", { enumerable: true, get: function() {
      return animationFrames_1.animationFrames;
    } });
    var Subject_1 = require_Subject();
    Object.defineProperty(exports, "Subject", { enumerable: true, get: function() {
      return Subject_1.Subject;
    } });
    var BehaviorSubject_1 = require_BehaviorSubject();
    Object.defineProperty(exports, "BehaviorSubject", { enumerable: true, get: function() {
      return BehaviorSubject_1.BehaviorSubject;
    } });
    var ReplaySubject_1 = require_ReplaySubject();
    Object.defineProperty(exports, "ReplaySubject", { enumerable: true, get: function() {
      return ReplaySubject_1.ReplaySubject;
    } });
    var AsyncSubject_1 = require_AsyncSubject();
    Object.defineProperty(exports, "AsyncSubject", { enumerable: true, get: function() {
      return AsyncSubject_1.AsyncSubject;
    } });
    var asap_1 = require_asap();
    Object.defineProperty(exports, "asap", { enumerable: true, get: function() {
      return asap_1.asap;
    } });
    Object.defineProperty(exports, "asapScheduler", { enumerable: true, get: function() {
      return asap_1.asapScheduler;
    } });
    var async_1 = require_async();
    Object.defineProperty(exports, "async", { enumerable: true, get: function() {
      return async_1.async;
    } });
    Object.defineProperty(exports, "asyncScheduler", { enumerable: true, get: function() {
      return async_1.asyncScheduler;
    } });
    var queue_1 = require_queue();
    Object.defineProperty(exports, "queue", { enumerable: true, get: function() {
      return queue_1.queue;
    } });
    Object.defineProperty(exports, "queueScheduler", { enumerable: true, get: function() {
      return queue_1.queueScheduler;
    } });
    var animationFrame_1 = require_animationFrame();
    Object.defineProperty(exports, "animationFrame", { enumerable: true, get: function() {
      return animationFrame_1.animationFrame;
    } });
    Object.defineProperty(exports, "animationFrameScheduler", { enumerable: true, get: function() {
      return animationFrame_1.animationFrameScheduler;
    } });
    var VirtualTimeScheduler_1 = require_VirtualTimeScheduler();
    Object.defineProperty(exports, "VirtualTimeScheduler", { enumerable: true, get: function() {
      return VirtualTimeScheduler_1.VirtualTimeScheduler;
    } });
    Object.defineProperty(exports, "VirtualAction", { enumerable: true, get: function() {
      return VirtualTimeScheduler_1.VirtualAction;
    } });
    var Scheduler_1 = require_Scheduler();
    Object.defineProperty(exports, "Scheduler", { enumerable: true, get: function() {
      return Scheduler_1.Scheduler;
    } });
    var Subscription_1 = require_Subscription();
    Object.defineProperty(exports, "Subscription", { enumerable: true, get: function() {
      return Subscription_1.Subscription;
    } });
    var Subscriber_1 = require_Subscriber();
    Object.defineProperty(exports, "Subscriber", { enumerable: true, get: function() {
      return Subscriber_1.Subscriber;
    } });
    var Notification_1 = require_Notification();
    Object.defineProperty(exports, "Notification", { enumerable: true, get: function() {
      return Notification_1.Notification;
    } });
    Object.defineProperty(exports, "NotificationKind", { enumerable: true, get: function() {
      return Notification_1.NotificationKind;
    } });
    var pipe_1 = require_pipe();
    Object.defineProperty(exports, "pipe", { enumerable: true, get: function() {
      return pipe_1.pipe;
    } });
    var noop_1 = require_noop();
    Object.defineProperty(exports, "noop", { enumerable: true, get: function() {
      return noop_1.noop;
    } });
    var identity_1 = require_identity();
    Object.defineProperty(exports, "identity", { enumerable: true, get: function() {
      return identity_1.identity;
    } });
    var isObservable_1 = require_isObservable();
    Object.defineProperty(exports, "isObservable", { enumerable: true, get: function() {
      return isObservable_1.isObservable;
    } });
    var lastValueFrom_1 = require_lastValueFrom();
    Object.defineProperty(exports, "lastValueFrom", { enumerable: true, get: function() {
      return lastValueFrom_1.lastValueFrom;
    } });
    var firstValueFrom_1 = require_firstValueFrom();
    Object.defineProperty(exports, "firstValueFrom", { enumerable: true, get: function() {
      return firstValueFrom_1.firstValueFrom;
    } });
    var ArgumentOutOfRangeError_1 = require_ArgumentOutOfRangeError();
    Object.defineProperty(exports, "ArgumentOutOfRangeError", { enumerable: true, get: function() {
      return ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;
    } });
    var EmptyError_1 = require_EmptyError();
    Object.defineProperty(exports, "EmptyError", { enumerable: true, get: function() {
      return EmptyError_1.EmptyError;
    } });
    var NotFoundError_1 = require_NotFoundError();
    Object.defineProperty(exports, "NotFoundError", { enumerable: true, get: function() {
      return NotFoundError_1.NotFoundError;
    } });
    var ObjectUnsubscribedError_1 = require_ObjectUnsubscribedError();
    Object.defineProperty(exports, "ObjectUnsubscribedError", { enumerable: true, get: function() {
      return ObjectUnsubscribedError_1.ObjectUnsubscribedError;
    } });
    var SequenceError_1 = require_SequenceError();
    Object.defineProperty(exports, "SequenceError", { enumerable: true, get: function() {
      return SequenceError_1.SequenceError;
    } });
    var timeout_1 = require_timeout();
    Object.defineProperty(exports, "TimeoutError", { enumerable: true, get: function() {
      return timeout_1.TimeoutError;
    } });
    var UnsubscriptionError_1 = require_UnsubscriptionError();
    Object.defineProperty(exports, "UnsubscriptionError", { enumerable: true, get: function() {
      return UnsubscriptionError_1.UnsubscriptionError;
    } });
    var bindCallback_1 = require_bindCallback();
    Object.defineProperty(exports, "bindCallback", { enumerable: true, get: function() {
      return bindCallback_1.bindCallback;
    } });
    var bindNodeCallback_1 = require_bindNodeCallback();
    Object.defineProperty(exports, "bindNodeCallback", { enumerable: true, get: function() {
      return bindNodeCallback_1.bindNodeCallback;
    } });
    var combineLatest_1 = require_combineLatest();
    Object.defineProperty(exports, "combineLatest", { enumerable: true, get: function() {
      return combineLatest_1.combineLatest;
    } });
    var concat_1 = require_concat();
    Object.defineProperty(exports, "concat", { enumerable: true, get: function() {
      return concat_1.concat;
    } });
    var connectable_1 = require_connectable();
    Object.defineProperty(exports, "connectable", { enumerable: true, get: function() {
      return connectable_1.connectable;
    } });
    var defer_1 = require_defer();
    Object.defineProperty(exports, "defer", { enumerable: true, get: function() {
      return defer_1.defer;
    } });
    var empty_1 = require_empty();
    Object.defineProperty(exports, "empty", { enumerable: true, get: function() {
      return empty_1.empty;
    } });
    var forkJoin_1 = require_forkJoin();
    Object.defineProperty(exports, "forkJoin", { enumerable: true, get: function() {
      return forkJoin_1.forkJoin;
    } });
    var from_1 = require_from();
    Object.defineProperty(exports, "from", { enumerable: true, get: function() {
      return from_1.from;
    } });
    var fromEvent_1 = require_fromEvent();
    Object.defineProperty(exports, "fromEvent", { enumerable: true, get: function() {
      return fromEvent_1.fromEvent;
    } });
    var fromEventPattern_1 = require_fromEventPattern();
    Object.defineProperty(exports, "fromEventPattern", { enumerable: true, get: function() {
      return fromEventPattern_1.fromEventPattern;
    } });
    var generate_1 = require_generate();
    Object.defineProperty(exports, "generate", { enumerable: true, get: function() {
      return generate_1.generate;
    } });
    var iif_1 = require_iif();
    Object.defineProperty(exports, "iif", { enumerable: true, get: function() {
      return iif_1.iif;
    } });
    var interval_1 = require_interval();
    Object.defineProperty(exports, "interval", { enumerable: true, get: function() {
      return interval_1.interval;
    } });
    var merge_1 = require_merge();
    Object.defineProperty(exports, "merge", { enumerable: true, get: function() {
      return merge_1.merge;
    } });
    var never_1 = require_never();
    Object.defineProperty(exports, "never", { enumerable: true, get: function() {
      return never_1.never;
    } });
    var of_1 = require_of();
    Object.defineProperty(exports, "of", { enumerable: true, get: function() {
      return of_1.of;
    } });
    var onErrorResumeNext_1 = require_onErrorResumeNext();
    Object.defineProperty(exports, "onErrorResumeNext", { enumerable: true, get: function() {
      return onErrorResumeNext_1.onErrorResumeNext;
    } });
    var pairs_1 = require_pairs();
    Object.defineProperty(exports, "pairs", { enumerable: true, get: function() {
      return pairs_1.pairs;
    } });
    var partition_1 = require_partition();
    Object.defineProperty(exports, "partition", { enumerable: true, get: function() {
      return partition_1.partition;
    } });
    var race_1 = require_race();
    Object.defineProperty(exports, "race", { enumerable: true, get: function() {
      return race_1.race;
    } });
    var range_1 = require_range();
    Object.defineProperty(exports, "range", { enumerable: true, get: function() {
      return range_1.range;
    } });
    var throwError_1 = require_throwError();
    Object.defineProperty(exports, "throwError", { enumerable: true, get: function() {
      return throwError_1.throwError;
    } });
    var timer_1 = require_timer();
    Object.defineProperty(exports, "timer", { enumerable: true, get: function() {
      return timer_1.timer;
    } });
    var using_1 = require_using();
    Object.defineProperty(exports, "using", { enumerable: true, get: function() {
      return using_1.using;
    } });
    var zip_1 = require_zip();
    Object.defineProperty(exports, "zip", { enumerable: true, get: function() {
      return zip_1.zip;
    } });
    var scheduled_1 = require_scheduled();
    Object.defineProperty(exports, "scheduled", { enumerable: true, get: function() {
      return scheduled_1.scheduled;
    } });
    var empty_2 = require_empty();
    Object.defineProperty(exports, "EMPTY", { enumerable: true, get: function() {
      return empty_2.EMPTY;
    } });
    var never_2 = require_never();
    Object.defineProperty(exports, "NEVER", { enumerable: true, get: function() {
      return never_2.NEVER;
    } });
    __exportStar(require_types(), exports);
    var config_1 = require_config();
    Object.defineProperty(exports, "config", { enumerable: true, get: function() {
      return config_1.config;
    } });
    var audit_1 = require_audit();
    Object.defineProperty(exports, "audit", { enumerable: true, get: function() {
      return audit_1.audit;
    } });
    var auditTime_1 = require_auditTime();
    Object.defineProperty(exports, "auditTime", { enumerable: true, get: function() {
      return auditTime_1.auditTime;
    } });
    var buffer_1 = require_buffer();
    Object.defineProperty(exports, "buffer", { enumerable: true, get: function() {
      return buffer_1.buffer;
    } });
    var bufferCount_1 = require_bufferCount();
    Object.defineProperty(exports, "bufferCount", { enumerable: true, get: function() {
      return bufferCount_1.bufferCount;
    } });
    var bufferTime_1 = require_bufferTime();
    Object.defineProperty(exports, "bufferTime", { enumerable: true, get: function() {
      return bufferTime_1.bufferTime;
    } });
    var bufferToggle_1 = require_bufferToggle();
    Object.defineProperty(exports, "bufferToggle", { enumerable: true, get: function() {
      return bufferToggle_1.bufferToggle;
    } });
    var bufferWhen_1 = require_bufferWhen();
    Object.defineProperty(exports, "bufferWhen", { enumerable: true, get: function() {
      return bufferWhen_1.bufferWhen;
    } });
    var catchError_1 = require_catchError();
    Object.defineProperty(exports, "catchError", { enumerable: true, get: function() {
      return catchError_1.catchError;
    } });
    var combineAll_1 = require_combineAll();
    Object.defineProperty(exports, "combineAll", { enumerable: true, get: function() {
      return combineAll_1.combineAll;
    } });
    var combineLatestAll_1 = require_combineLatestAll();
    Object.defineProperty(exports, "combineLatestAll", { enumerable: true, get: function() {
      return combineLatestAll_1.combineLatestAll;
    } });
    var combineLatestWith_1 = require_combineLatestWith();
    Object.defineProperty(exports, "combineLatestWith", { enumerable: true, get: function() {
      return combineLatestWith_1.combineLatestWith;
    } });
    var concatAll_1 = require_concatAll();
    Object.defineProperty(exports, "concatAll", { enumerable: true, get: function() {
      return concatAll_1.concatAll;
    } });
    var concatMap_1 = require_concatMap();
    Object.defineProperty(exports, "concatMap", { enumerable: true, get: function() {
      return concatMap_1.concatMap;
    } });
    var concatMapTo_1 = require_concatMapTo();
    Object.defineProperty(exports, "concatMapTo", { enumerable: true, get: function() {
      return concatMapTo_1.concatMapTo;
    } });
    var concatWith_1 = require_concatWith();
    Object.defineProperty(exports, "concatWith", { enumerable: true, get: function() {
      return concatWith_1.concatWith;
    } });
    var connect_1 = require_connect();
    Object.defineProperty(exports, "connect", { enumerable: true, get: function() {
      return connect_1.connect;
    } });
    var count_1 = require_count();
    Object.defineProperty(exports, "count", { enumerable: true, get: function() {
      return count_1.count;
    } });
    var debounce_1 = require_debounce();
    Object.defineProperty(exports, "debounce", { enumerable: true, get: function() {
      return debounce_1.debounce;
    } });
    var debounceTime_1 = require_debounceTime();
    Object.defineProperty(exports, "debounceTime", { enumerable: true, get: function() {
      return debounceTime_1.debounceTime;
    } });
    var defaultIfEmpty_1 = require_defaultIfEmpty();
    Object.defineProperty(exports, "defaultIfEmpty", { enumerable: true, get: function() {
      return defaultIfEmpty_1.defaultIfEmpty;
    } });
    var delay_1 = require_delay();
    Object.defineProperty(exports, "delay", { enumerable: true, get: function() {
      return delay_1.delay;
    } });
    var delayWhen_1 = require_delayWhen();
    Object.defineProperty(exports, "delayWhen", { enumerable: true, get: function() {
      return delayWhen_1.delayWhen;
    } });
    var dematerialize_1 = require_dematerialize();
    Object.defineProperty(exports, "dematerialize", { enumerable: true, get: function() {
      return dematerialize_1.dematerialize;
    } });
    var distinct_1 = require_distinct();
    Object.defineProperty(exports, "distinct", { enumerable: true, get: function() {
      return distinct_1.distinct;
    } });
    var distinctUntilChanged_1 = require_distinctUntilChanged();
    Object.defineProperty(exports, "distinctUntilChanged", { enumerable: true, get: function() {
      return distinctUntilChanged_1.distinctUntilChanged;
    } });
    var distinctUntilKeyChanged_1 = require_distinctUntilKeyChanged();
    Object.defineProperty(exports, "distinctUntilKeyChanged", { enumerable: true, get: function() {
      return distinctUntilKeyChanged_1.distinctUntilKeyChanged;
    } });
    var elementAt_1 = require_elementAt();
    Object.defineProperty(exports, "elementAt", { enumerable: true, get: function() {
      return elementAt_1.elementAt;
    } });
    var endWith_1 = require_endWith();
    Object.defineProperty(exports, "endWith", { enumerable: true, get: function() {
      return endWith_1.endWith;
    } });
    var every_1 = require_every();
    Object.defineProperty(exports, "every", { enumerable: true, get: function() {
      return every_1.every;
    } });
    var exhaust_1 = require_exhaust();
    Object.defineProperty(exports, "exhaust", { enumerable: true, get: function() {
      return exhaust_1.exhaust;
    } });
    var exhaustAll_1 = require_exhaustAll();
    Object.defineProperty(exports, "exhaustAll", { enumerable: true, get: function() {
      return exhaustAll_1.exhaustAll;
    } });
    var exhaustMap_1 = require_exhaustMap();
    Object.defineProperty(exports, "exhaustMap", { enumerable: true, get: function() {
      return exhaustMap_1.exhaustMap;
    } });
    var expand_1 = require_expand();
    Object.defineProperty(exports, "expand", { enumerable: true, get: function() {
      return expand_1.expand;
    } });
    var filter_1 = require_filter();
    Object.defineProperty(exports, "filter", { enumerable: true, get: function() {
      return filter_1.filter;
    } });
    var finalize_1 = require_finalize();
    Object.defineProperty(exports, "finalize", { enumerable: true, get: function() {
      return finalize_1.finalize;
    } });
    var find_1 = require_find();
    Object.defineProperty(exports, "find", { enumerable: true, get: function() {
      return find_1.find;
    } });
    var findIndex_1 = require_findIndex();
    Object.defineProperty(exports, "findIndex", { enumerable: true, get: function() {
      return findIndex_1.findIndex;
    } });
    var first_1 = require_first();
    Object.defineProperty(exports, "first", { enumerable: true, get: function() {
      return first_1.first;
    } });
    var groupBy_1 = require_groupBy();
    Object.defineProperty(exports, "groupBy", { enumerable: true, get: function() {
      return groupBy_1.groupBy;
    } });
    var ignoreElements_1 = require_ignoreElements();
    Object.defineProperty(exports, "ignoreElements", { enumerable: true, get: function() {
      return ignoreElements_1.ignoreElements;
    } });
    var isEmpty_1 = require_isEmpty();
    Object.defineProperty(exports, "isEmpty", { enumerable: true, get: function() {
      return isEmpty_1.isEmpty;
    } });
    var last_1 = require_last();
    Object.defineProperty(exports, "last", { enumerable: true, get: function() {
      return last_1.last;
    } });
    var map_1 = require_map();
    Object.defineProperty(exports, "map", { enumerable: true, get: function() {
      return map_1.map;
    } });
    var mapTo_1 = require_mapTo();
    Object.defineProperty(exports, "mapTo", { enumerable: true, get: function() {
      return mapTo_1.mapTo;
    } });
    var materialize_1 = require_materialize();
    Object.defineProperty(exports, "materialize", { enumerable: true, get: function() {
      return materialize_1.materialize;
    } });
    var max_1 = require_max();
    Object.defineProperty(exports, "max", { enumerable: true, get: function() {
      return max_1.max;
    } });
    var mergeAll_1 = require_mergeAll();
    Object.defineProperty(exports, "mergeAll", { enumerable: true, get: function() {
      return mergeAll_1.mergeAll;
    } });
    var flatMap_1 = require_flatMap();
    Object.defineProperty(exports, "flatMap", { enumerable: true, get: function() {
      return flatMap_1.flatMap;
    } });
    var mergeMap_1 = require_mergeMap();
    Object.defineProperty(exports, "mergeMap", { enumerable: true, get: function() {
      return mergeMap_1.mergeMap;
    } });
    var mergeMapTo_1 = require_mergeMapTo();
    Object.defineProperty(exports, "mergeMapTo", { enumerable: true, get: function() {
      return mergeMapTo_1.mergeMapTo;
    } });
    var mergeScan_1 = require_mergeScan();
    Object.defineProperty(exports, "mergeScan", { enumerable: true, get: function() {
      return mergeScan_1.mergeScan;
    } });
    var mergeWith_1 = require_mergeWith();
    Object.defineProperty(exports, "mergeWith", { enumerable: true, get: function() {
      return mergeWith_1.mergeWith;
    } });
    var min_1 = require_min();
    Object.defineProperty(exports, "min", { enumerable: true, get: function() {
      return min_1.min;
    } });
    var multicast_1 = require_multicast();
    Object.defineProperty(exports, "multicast", { enumerable: true, get: function() {
      return multicast_1.multicast;
    } });
    var observeOn_1 = require_observeOn();
    Object.defineProperty(exports, "observeOn", { enumerable: true, get: function() {
      return observeOn_1.observeOn;
    } });
    var onErrorResumeNextWith_1 = require_onErrorResumeNextWith();
    Object.defineProperty(exports, "onErrorResumeNextWith", { enumerable: true, get: function() {
      return onErrorResumeNextWith_1.onErrorResumeNextWith;
    } });
    var pairwise_1 = require_pairwise();
    Object.defineProperty(exports, "pairwise", { enumerable: true, get: function() {
      return pairwise_1.pairwise;
    } });
    var pluck_1 = require_pluck();
    Object.defineProperty(exports, "pluck", { enumerable: true, get: function() {
      return pluck_1.pluck;
    } });
    var publish_1 = require_publish();
    Object.defineProperty(exports, "publish", { enumerable: true, get: function() {
      return publish_1.publish;
    } });
    var publishBehavior_1 = require_publishBehavior();
    Object.defineProperty(exports, "publishBehavior", { enumerable: true, get: function() {
      return publishBehavior_1.publishBehavior;
    } });
    var publishLast_1 = require_publishLast();
    Object.defineProperty(exports, "publishLast", { enumerable: true, get: function() {
      return publishLast_1.publishLast;
    } });
    var publishReplay_1 = require_publishReplay();
    Object.defineProperty(exports, "publishReplay", { enumerable: true, get: function() {
      return publishReplay_1.publishReplay;
    } });
    var raceWith_1 = require_raceWith();
    Object.defineProperty(exports, "raceWith", { enumerable: true, get: function() {
      return raceWith_1.raceWith;
    } });
    var reduce_1 = require_reduce();
    Object.defineProperty(exports, "reduce", { enumerable: true, get: function() {
      return reduce_1.reduce;
    } });
    var repeat_1 = require_repeat();
    Object.defineProperty(exports, "repeat", { enumerable: true, get: function() {
      return repeat_1.repeat;
    } });
    var repeatWhen_1 = require_repeatWhen();
    Object.defineProperty(exports, "repeatWhen", { enumerable: true, get: function() {
      return repeatWhen_1.repeatWhen;
    } });
    var retry_1 = require_retry();
    Object.defineProperty(exports, "retry", { enumerable: true, get: function() {
      return retry_1.retry;
    } });
    var retryWhen_1 = require_retryWhen();
    Object.defineProperty(exports, "retryWhen", { enumerable: true, get: function() {
      return retryWhen_1.retryWhen;
    } });
    var refCount_1 = require_refCount();
    Object.defineProperty(exports, "refCount", { enumerable: true, get: function() {
      return refCount_1.refCount;
    } });
    var sample_1 = require_sample();
    Object.defineProperty(exports, "sample", { enumerable: true, get: function() {
      return sample_1.sample;
    } });
    var sampleTime_1 = require_sampleTime();
    Object.defineProperty(exports, "sampleTime", { enumerable: true, get: function() {
      return sampleTime_1.sampleTime;
    } });
    var scan_1 = require_scan();
    Object.defineProperty(exports, "scan", { enumerable: true, get: function() {
      return scan_1.scan;
    } });
    var sequenceEqual_1 = require_sequenceEqual();
    Object.defineProperty(exports, "sequenceEqual", { enumerable: true, get: function() {
      return sequenceEqual_1.sequenceEqual;
    } });
    var share_1 = require_share();
    Object.defineProperty(exports, "share", { enumerable: true, get: function() {
      return share_1.share;
    } });
    var shareReplay_1 = require_shareReplay();
    Object.defineProperty(exports, "shareReplay", { enumerable: true, get: function() {
      return shareReplay_1.shareReplay;
    } });
    var single_1 = require_single();
    Object.defineProperty(exports, "single", { enumerable: true, get: function() {
      return single_1.single;
    } });
    var skip_1 = require_skip();
    Object.defineProperty(exports, "skip", { enumerable: true, get: function() {
      return skip_1.skip;
    } });
    var skipLast_1 = require_skipLast();
    Object.defineProperty(exports, "skipLast", { enumerable: true, get: function() {
      return skipLast_1.skipLast;
    } });
    var skipUntil_1 = require_skipUntil();
    Object.defineProperty(exports, "skipUntil", { enumerable: true, get: function() {
      return skipUntil_1.skipUntil;
    } });
    var skipWhile_1 = require_skipWhile();
    Object.defineProperty(exports, "skipWhile", { enumerable: true, get: function() {
      return skipWhile_1.skipWhile;
    } });
    var startWith_1 = require_startWith();
    Object.defineProperty(exports, "startWith", { enumerable: true, get: function() {
      return startWith_1.startWith;
    } });
    var subscribeOn_1 = require_subscribeOn();
    Object.defineProperty(exports, "subscribeOn", { enumerable: true, get: function() {
      return subscribeOn_1.subscribeOn;
    } });
    var switchAll_1 = require_switchAll();
    Object.defineProperty(exports, "switchAll", { enumerable: true, get: function() {
      return switchAll_1.switchAll;
    } });
    var switchMap_1 = require_switchMap();
    Object.defineProperty(exports, "switchMap", { enumerable: true, get: function() {
      return switchMap_1.switchMap;
    } });
    var switchMapTo_1 = require_switchMapTo();
    Object.defineProperty(exports, "switchMapTo", { enumerable: true, get: function() {
      return switchMapTo_1.switchMapTo;
    } });
    var switchScan_1 = require_switchScan();
    Object.defineProperty(exports, "switchScan", { enumerable: true, get: function() {
      return switchScan_1.switchScan;
    } });
    var take_1 = require_take();
    Object.defineProperty(exports, "take", { enumerable: true, get: function() {
      return take_1.take;
    } });
    var takeLast_1 = require_takeLast();
    Object.defineProperty(exports, "takeLast", { enumerable: true, get: function() {
      return takeLast_1.takeLast;
    } });
    var takeUntil_1 = require_takeUntil();
    Object.defineProperty(exports, "takeUntil", { enumerable: true, get: function() {
      return takeUntil_1.takeUntil;
    } });
    var takeWhile_1 = require_takeWhile();
    Object.defineProperty(exports, "takeWhile", { enumerable: true, get: function() {
      return takeWhile_1.takeWhile;
    } });
    var tap_1 = require_tap();
    Object.defineProperty(exports, "tap", { enumerable: true, get: function() {
      return tap_1.tap;
    } });
    var throttle_1 = require_throttle();
    Object.defineProperty(exports, "throttle", { enumerable: true, get: function() {
      return throttle_1.throttle;
    } });
    var throttleTime_1 = require_throttleTime();
    Object.defineProperty(exports, "throttleTime", { enumerable: true, get: function() {
      return throttleTime_1.throttleTime;
    } });
    var throwIfEmpty_1 = require_throwIfEmpty();
    Object.defineProperty(exports, "throwIfEmpty", { enumerable: true, get: function() {
      return throwIfEmpty_1.throwIfEmpty;
    } });
    var timeInterval_1 = require_timeInterval();
    Object.defineProperty(exports, "timeInterval", { enumerable: true, get: function() {
      return timeInterval_1.timeInterval;
    } });
    var timeout_2 = require_timeout();
    Object.defineProperty(exports, "timeout", { enumerable: true, get: function() {
      return timeout_2.timeout;
    } });
    var timeoutWith_1 = require_timeoutWith();
    Object.defineProperty(exports, "timeoutWith", { enumerable: true, get: function() {
      return timeoutWith_1.timeoutWith;
    } });
    var timestamp_1 = require_timestamp();
    Object.defineProperty(exports, "timestamp", { enumerable: true, get: function() {
      return timestamp_1.timestamp;
    } });
    var toArray_1 = require_toArray();
    Object.defineProperty(exports, "toArray", { enumerable: true, get: function() {
      return toArray_1.toArray;
    } });
    var window_1 = require_window();
    Object.defineProperty(exports, "window", { enumerable: true, get: function() {
      return window_1.window;
    } });
    var windowCount_1 = require_windowCount();
    Object.defineProperty(exports, "windowCount", { enumerable: true, get: function() {
      return windowCount_1.windowCount;
    } });
    var windowTime_1 = require_windowTime();
    Object.defineProperty(exports, "windowTime", { enumerable: true, get: function() {
      return windowTime_1.windowTime;
    } });
    var windowToggle_1 = require_windowToggle();
    Object.defineProperty(exports, "windowToggle", { enumerable: true, get: function() {
      return windowToggle_1.windowToggle;
    } });
    var windowWhen_1 = require_windowWhen();
    Object.defineProperty(exports, "windowWhen", { enumerable: true, get: function() {
      return windowWhen_1.windowWhen;
    } });
    var withLatestFrom_1 = require_withLatestFrom();
    Object.defineProperty(exports, "withLatestFrom", { enumerable: true, get: function() {
      return withLatestFrom_1.withLatestFrom;
    } });
    var zipAll_1 = require_zipAll();
    Object.defineProperty(exports, "zipAll", { enumerable: true, get: function() {
      return zipAll_1.zipAll;
    } });
    var zipWith_1 = require_zipWith();
    Object.defineProperty(exports, "zipWith", { enumerable: true, get: function() {
      return zipWith_1.zipWith;
    } });
  }
});

// src/proto/index.js
import * as $protobuf from "protobufjs/minimal";
var $Reader = $protobuf.Reader;
var $Writer = $protobuf.Writer;
var $util = $protobuf.util;
var $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});
var prpc = $root.prpc = (() => {
  const prpc3 = {};
  prpc3.PrpcError = function() {
    function PrpcError(properties) {
      if (properties) {
        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          if (properties[keys[i]] != null)
            this[keys[i]] = properties[keys[i]];
      }
    }
    PrpcError.prototype.message = "";
    PrpcError.create = function create2(properties) {
      return new PrpcError(properties);
    };
    PrpcError.encode = function encode(message, writer) {
      if (!writer)
        writer = $Writer.create();
      if (message.message != null && Object.hasOwnProperty.call(message, "message"))
        writer.uint32(
          /* id 1, wireType 2 =*/
          10
        ).string(message.message);
      return writer;
    };
    PrpcError.encodeDelimited = function encodeDelimited(message, writer) {
      return this.encode(message, writer).ldelim();
    };
    PrpcError.decode = function decode(reader, length) {
      if (!(reader instanceof $Reader))
        reader = $Reader.create(reader);
      let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.prpc.PrpcError();
      while (reader.pos < end) {
        let tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.message = reader.string();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    };
    PrpcError.decodeDelimited = function decodeDelimited(reader) {
      if (!(reader instanceof $Reader))
        reader = new $Reader(reader);
      return this.decode(reader, reader.uint32());
    };
    PrpcError.verify = function verify(message) {
      if (typeof message !== "object" || message === null)
        return "object expected";
      if (message.message != null && message.hasOwnProperty("message")) {
        if (!$util.isString(message.message))
          return "message: string expected";
      }
      return null;
    };
    PrpcError.fromObject = function fromObject(object) {
      if (object instanceof $root.prpc.PrpcError)
        return object;
      let message = new $root.prpc.PrpcError();
      if (object.message != null)
        message.message = String(object.message);
      return message;
    };
    PrpcError.toObject = function toObject(message, options2) {
      if (!options2)
        options2 = {};
      let object = {};
      if (options2.defaults)
        object.message = "";
      if (message.message != null && message.hasOwnProperty("message"))
        object.message = message.message;
      return object;
    };
    PrpcError.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return PrpcError;
  }();
  return prpc3;
})();
var pruntime_rpc = $root.pruntime_rpc = (() => {
  const pruntime_rpc2 = {};
  pruntime_rpc2.PhactoryAPI = function() {
    function PhactoryAPI2(rpcImpl, requestDelimited, responseDelimited) {
      $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
    }
    (PhactoryAPI2.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = PhactoryAPI2;
    PhactoryAPI2.create = function create2(rpcImpl, requestDelimited, responseDelimited) {
      return new this(rpcImpl, requestDelimited, responseDelimited);
    };
    Object.defineProperty(PhactoryAPI2.prototype.getInfo = function getInfo(request, callback) {
      return this.rpcCall(getInfo, $root.google.protobuf.Empty, $root.pruntime_rpc.PhactoryInfo, request, callback);
    }, "name", { value: "GetInfo" });
    Object.defineProperty(PhactoryAPI2.prototype.syncHeader = function syncHeader(request, callback) {
      return this.rpcCall(syncHeader, $root.pruntime_rpc.HeadersToSync, $root.pruntime_rpc.SyncedTo, request, callback);
    }, "name", { value: "SyncHeader" });
    Object.defineProperty(PhactoryAPI2.prototype.syncParaHeader = function syncParaHeader(request, callback) {
      return this.rpcCall(syncParaHeader, $root.pruntime_rpc.ParaHeadersToSync, $root.pruntime_rpc.SyncedTo, request, callback);
    }, "name", { value: "SyncParaHeader" });
    Object.defineProperty(PhactoryAPI2.prototype.syncCombinedHeaders = function syncCombinedHeaders(request, callback) {
      return this.rpcCall(syncCombinedHeaders, $root.pruntime_rpc.CombinedHeadersToSync, $root.pruntime_rpc.HeadersSyncedTo, request, callback);
    }, "name", { value: "SyncCombinedHeaders" });
    Object.defineProperty(PhactoryAPI2.prototype.dispatchBlocks = function dispatchBlocks(request, callback) {
      return this.rpcCall(dispatchBlocks, $root.pruntime_rpc.Blocks, $root.pruntime_rpc.SyncedTo, request, callback);
    }, "name", { value: "DispatchBlocks" });
    Object.defineProperty(PhactoryAPI2.prototype.initRuntime = function initRuntime(request, callback) {
      return this.rpcCall(initRuntime, $root.pruntime_rpc.InitRuntimeRequest, $root.pruntime_rpc.InitRuntimeResponse, request, callback);
    }, "name", { value: "InitRuntime" });
    Object.defineProperty(PhactoryAPI2.prototype.getRuntimeInfo = function getRuntimeInfo(request, callback) {
      return this.rpcCall(getRuntimeInfo, $root.pruntime_rpc.GetRuntimeInfoRequest, $root.pruntime_rpc.InitRuntimeResponse, request, callback);
    }, "name", { value: "GetRuntimeInfo" });
    Object.defineProperty(PhactoryAPI2.prototype.getEgressMessages = function getEgressMessages(request, callback) {
      return this.rpcCall(getEgressMessages, $root.google.protobuf.Empty, $root.pruntime_rpc.GetEgressMessagesResponse, request, callback);
    }, "name", { value: "GetEgressMessages" });
    Object.defineProperty(PhactoryAPI2.prototype.contractQuery = function contractQuery(request, callback) {
      return this.rpcCall(contractQuery, $root.pruntime_rpc.ContractQueryRequest, $root.pruntime_rpc.ContractQueryResponse, request, callback);
    }, "name", { value: "ContractQuery" });
    Object.defineProperty(PhactoryAPI2.prototype.getWorkerState = function getWorkerState(request, callback) {
      return this.rpcCall(getWorkerState, $root.pruntime_rpc.GetWorkerStateRequest, $root.pruntime_rpc.WorkerState, request, callback);
    }, "name", { value: "GetWorkerState" });
    Object.defineProperty(PhactoryAPI2.prototype.addEndpoint = function addEndpoint(request, callback) {
      return this.rpcCall(addEndpoint, $root.pruntime_rpc.AddEndpointRequest, $root.pruntime_rpc.GetEndpointResponse, request, callback);
    }, "name", { value: "AddEndpoint" });
    Object.defineProperty(PhactoryAPI2.prototype.refreshEndpointSigningTime = function refreshEndpointSigningTime(request, callback) {
      return this.rpcCall(refreshEndpointSigningTime, $root.google.protobuf.Empty, $root.pruntime_rpc.GetEndpointResponse, request, callback);
    }, "name", { value: "RefreshEndpointSigningTime" });
    Object.defineProperty(PhactoryAPI2.prototype.getEndpointInfo = function getEndpointInfo(request, callback) {
      return this.rpcCall(getEndpointInfo, $root.google.protobuf.Empty, $root.pruntime_rpc.GetEndpointResponse, request, callback);
    }, "name", { value: "GetEndpointInfo" });
    Object.defineProperty(PhactoryAPI2.prototype.signEndpointInfo = function signEndpointInfo(request, callback) {
      return this.rpcCall(signEndpointInfo, $root.pruntime_rpc.SignEndpointsRequest, $root.pruntime_rpc.GetEndpointResponse, request, callback);
    }, "name", { value: "SignEndpointInfo" });
    Object.defineProperty(PhactoryAPI2.prototype.derivePhalaI2pKey = function derivePhalaI2pKey(request, callback) {
      return this.rpcCall(derivePhalaI2pKey, $root.google.protobuf.Empty, $root.pruntime_rpc.DerivePhalaI2pKeyResponse, request, callback);
    }, "name", { value: "DerivePhalaI2pKey" });
    Object.defineProperty(PhactoryAPI2.prototype.echo = function echo(request, callback) {
      return this.rpcCall(echo, $root.pruntime_rpc.EchoMessage, $root.pruntime_rpc.EchoMessage, request, callback);
    }, "name", { value: "Echo" });
    Object.defineProperty(PhactoryAPI2.prototype.handoverCreateChallenge = function handoverCreateChallenge(request, callback) {
      return this.rpcCall(handoverCreateChallenge, $root.google.protobuf.Empty, $root.pruntime_rpc.HandoverChallenge, request, callback);
    }, "name", { value: "HandoverCreateChallenge" });
    Object.defineProperty(PhactoryAPI2.prototype.handoverStart = function handoverStart(request, callback) {
      return this.rpcCall(handoverStart, $root.pruntime_rpc.HandoverChallengeResponse, $root.pruntime_rpc.HandoverWorkerKey, request, callback);
    }, "name", { value: "HandoverStart" });
    Object.defineProperty(PhactoryAPI2.prototype.handoverAcceptChallenge = function handoverAcceptChallenge(request, callback) {
      return this.rpcCall(handoverAcceptChallenge, $root.pruntime_rpc.HandoverChallenge, $root.pruntime_rpc.HandoverChallengeResponse, request, callback);
    }, "name", { value: "HandoverAcceptChallenge" });
    Object.defineProperty(PhactoryAPI2.prototype.handoverReceive = function handoverReceive(request, callback) {
      return this.rpcCall(handoverReceive, $root.pruntime_rpc.HandoverWorkerKey, $root.google.protobuf.Empty, request, callback);
    }, "name", { value: "HandoverReceive" });
    Object.defineProperty(PhactoryAPI2.prototype.configNetwork = function configNetwork(request, callback) {
      return this.rpcCall(configNetwork, $root.pruntime_rpc.NetworkConfig, $root.google.protobuf.Empty, request, callback);
    }, "name", { value: "ConfigNetwork" });
    Object.defineProperty(PhactoryAPI2.prototype.httpFetch = function httpFetch(request, callback) {
      return this.rpcCall(httpFetch, $root.pruntime_rpc.HttpRequest, $root.pruntime_rpc.HttpResponse, request, callback);
    }, "name", { value: "HttpFetch" });
    Object.defineProperty(PhactoryAPI2.prototype.getContractInfo = function getContractInfo(request, callback) {
      return this.rpcCall(getContractInfo, $root.pruntime_rpc.GetContractInfoRequest, $root.pruntime_rpc.GetContractInfoResponse, request, callback);
    }, "name", { value: "GetContractInfo" });
    Object.defineProperty(PhactoryAPI2.prototype.getClusterInfo = function getClusterInfo(request, callback) {
      return this.rpcCall(getClusterInfo, $root.google.protobuf.Empty, $root.pruntime_rpc.GetClusterInfoResponse, request, callback);
    }, "name", { value: "GetClusterInfo" });
    Object.defineProperty(PhactoryAPI2.prototype.uploadSidevmCode = function uploadSidevmCode(request, callback) {
      return this.rpcCall(uploadSidevmCode, $root.pruntime_rpc.SidevmCode, $root.google.protobuf.Empty, request, callback);
    }, "name", { value: "UploadSidevmCode" });
    Object.defineProperty(PhactoryAPI2.prototype.calculateContractId = function calculateContractId(request, callback) {
      return this.rpcCall(calculateContractId, $root.pruntime_rpc.ContractParameters, $root.pruntime_rpc.ContractId, request, callback);
    }, "name", { value: "CalculateContractId" });
    Object.defineProperty(PhactoryAPI2.prototype.getNetworkConfig = function getNetworkConfig(request, callback) {
      return this.rpcCall(getNetworkConfig, $root.google.protobuf.Empty, $root.pruntime_rpc.NetworkConfigResponse, request, callback);
    }, "name", { value: "GetNetworkConfig" });
    Object.defineProperty(PhactoryAPI2.prototype.loadChainState = function loadChainState(request, callback) {
      return this.rpcCall(loadChainState, $root.pruntime_rpc.ChainState, $root.google.protobuf.Empty, request, callback);
    }, "name", { value: "LoadChainState" });
    Object.defineProperty(PhactoryAPI2.prototype.stop = function stop(request, callback) {
      return this.rpcCall(stop, $root.pruntime_rpc.StopOptions, $root.google.protobuf.Empty, request, callback);
    }, "name", { value: "Stop" });
    Object.defineProperty(PhactoryAPI2.prototype.loadStorageProof = function loadStorageProof(request, callback) {
      return this.rpcCall(loadStorageProof, $root.pruntime_rpc.StorageProof, $root.google.protobuf.Empty, request, callback);
    }, "name", { value: "LoadStorageProof" });
    Object.defineProperty(PhactoryAPI2.prototype.takeCheckpoint = function takeCheckpoint(request, callback) {
      return this.rpcCall(takeCheckpoint, $root.google.protobuf.Empty, $root.pruntime_rpc.SyncedTo, request, callback);
    }, "name", { value: "TakeCheckpoint" });
    Object.defineProperty(PhactoryAPI2.prototype.statistics = function statistics(request, callback) {
      return this.rpcCall(statistics, $root.pruntime_rpc.StatisticsReqeust, $root.pruntime_rpc.StatisticsResponse, request, callback);
    }, "name", { value: "Statistics" });
    return PhactoryAPI2;
  }();
  pruntime_rpc2.PhactoryInfo = function() {
    function PhactoryInfo(properties) {
      if (properties) {
        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          if (properties[keys[i]] != null)
            this[keys[i]] = properties[keys[i]];
      }
    }
    PhactoryInfo.prototype.initialized = false;
    PhactoryInfo.prototype.registered = false;
    PhactoryInfo.prototype.genesisBlockHash = null;
    PhactoryInfo.prototype.publicKey = null;
    PhactoryInfo.prototype.ecdhPublicKey = null;
    PhactoryInfo.prototype.headernum = 0;
    PhactoryInfo.prototype.paraHeadernum = 0;
    PhactoryInfo.prototype.blocknum = 0;
    PhactoryInfo.prototype.stateRoot = "";
    PhactoryInfo.prototype.devMode = false;
    PhactoryInfo.prototype.pendingMessages = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
    PhactoryInfo.prototype.score = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
    PhactoryInfo.prototype.gatekeeper = null;
    PhactoryInfo.prototype.version = "";
    PhactoryInfo.prototype.gitRevision = "";
    PhactoryInfo.prototype.memoryUsage = null;
    PhactoryInfo.prototype.waitingForParaheaders = false;
    PhactoryInfo.prototype.system = null;
    PhactoryInfo.prototype.canLoadChainState = false;
    PhactoryInfo.prototype.safeModeLevel = 0;
    PhactoryInfo.prototype.currentBlockTime = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
    PhactoryInfo.prototype.maxSupportedPinkRuntimeVersion = "";
    let $oneOfFields;
    Object.defineProperty(PhactoryInfo.prototype, "_genesisBlockHash", {
      get: $util.oneOfGetter($oneOfFields = ["genesisBlockHash"]),
      set: $util.oneOfSetter($oneOfFields)
    });
    Object.defineProperty(PhactoryInfo.prototype, "_publicKey", {
      get: $util.oneOfGetter($oneOfFields = ["publicKey"]),
      set: $util.oneOfSetter($oneOfFields)
    });
    Object.defineProperty(PhactoryInfo.prototype, "_ecdhPublicKey", {
      get: $util.oneOfGetter($oneOfFields = ["ecdhPublicKey"]),
      set: $util.oneOfSetter($oneOfFields)
    });
    PhactoryInfo.create = function create2(properties) {
      return new PhactoryInfo(properties);
    };
    PhactoryInfo.encode = function encode(message, writer) {
      if (!writer)
        writer = $Writer.create();
      if (message.initialized != null && Object.hasOwnProperty.call(message, "initialized"))
        writer.uint32(
          /* id 1, wireType 0 =*/
          8
        ).bool(message.initialized);
      if (message.registered != null && Object.hasOwnProperty.call(message, "registered"))
        writer.uint32(
          /* id 2, wireType 0 =*/
          16
        ).bool(message.registered);
      if (message.genesisBlockHash != null && Object.hasOwnProperty.call(message, "genesisBlockHash"))
        writer.uint32(
          /* id 4, wireType 2 =*/
          34
        ).string(message.genesisBlockHash);
      if (message.publicKey != null && Object.hasOwnProperty.call(message, "publicKey"))
        writer.uint32(
          /* id 5, wireType 2 =*/
          42
        ).string(message.publicKey);
      if (message.ecdhPublicKey != null && Object.hasOwnProperty.call(message, "ecdhPublicKey"))
        writer.uint32(
          /* id 6, wireType 2 =*/
          50
        ).string(message.ecdhPublicKey);
      if (message.headernum != null && Object.hasOwnProperty.call(message, "headernum"))
        writer.uint32(
          /* id 7, wireType 0 =*/
          56
        ).uint32(message.headernum);
      if (message.paraHeadernum != null && Object.hasOwnProperty.call(message, "paraHeadernum"))
        writer.uint32(
          /* id 8, wireType 0 =*/
          64
        ).uint32(message.paraHeadernum);
      if (message.blocknum != null && Object.hasOwnProperty.call(message, "blocknum"))
        writer.uint32(
          /* id 9, wireType 0 =*/
          72
        ).uint32(message.blocknum);
      if (message.stateRoot != null && Object.hasOwnProperty.call(message, "stateRoot"))
        writer.uint32(
          /* id 10, wireType 2 =*/
          82
        ).string(message.stateRoot);
      if (message.devMode != null && Object.hasOwnProperty.call(message, "devMode"))
        writer.uint32(
          /* id 11, wireType 0 =*/
          88
        ).bool(message.devMode);
      if (message.pendingMessages != null && Object.hasOwnProperty.call(message, "pendingMessages"))
        writer.uint32(
          /* id 12, wireType 0 =*/
          96
        ).uint64(message.pendingMessages);
      if (message.score != null && Object.hasOwnProperty.call(message, "score"))
        writer.uint32(
          /* id 13, wireType 0 =*/
          104
        ).uint64(message.score);
      if (message.gatekeeper != null && Object.hasOwnProperty.call(message, "gatekeeper"))
        $root.pruntime_rpc.GatekeeperStatus.encode(message.gatekeeper, writer.uint32(
          /* id 14, wireType 2 =*/
          114
        ).fork()).ldelim();
      if (message.version != null && Object.hasOwnProperty.call(message, "version"))
        writer.uint32(
          /* id 15, wireType 2 =*/
          122
        ).string(message.version);
      if (message.gitRevision != null && Object.hasOwnProperty.call(message, "gitRevision"))
        writer.uint32(
          /* id 16, wireType 2 =*/
          130
        ).string(message.gitRevision);
      if (message.memoryUsage != null && Object.hasOwnProperty.call(message, "memoryUsage"))
        $root.pruntime_rpc.MemoryUsage.encode(message.memoryUsage, writer.uint32(
          /* id 18, wireType 2 =*/
          146
        ).fork()).ldelim();
      if (message.waitingForParaheaders != null && Object.hasOwnProperty.call(message, "waitingForParaheaders"))
        writer.uint32(
          /* id 21, wireType 0 =*/
          168
        ).bool(message.waitingForParaheaders);
      if (message.system != null && Object.hasOwnProperty.call(message, "system"))
        $root.pruntime_rpc.SystemInfo.encode(message.system, writer.uint32(
          /* id 23, wireType 2 =*/
          186
        ).fork()).ldelim();
      if (message.canLoadChainState != null && Object.hasOwnProperty.call(message, "canLoadChainState"))
        writer.uint32(
          /* id 24, wireType 0 =*/
          192
        ).bool(message.canLoadChainState);
      if (message.safeModeLevel != null && Object.hasOwnProperty.call(message, "safeModeLevel"))
        writer.uint32(
          /* id 25, wireType 0 =*/
          200
        ).uint32(message.safeModeLevel);
      if (message.currentBlockTime != null && Object.hasOwnProperty.call(message, "currentBlockTime"))
        writer.uint32(
          /* id 26, wireType 0 =*/
          208
        ).uint64(message.currentBlockTime);
      if (message.maxSupportedPinkRuntimeVersion != null && Object.hasOwnProperty.call(message, "maxSupportedPinkRuntimeVersion"))
        writer.uint32(
          /* id 27, wireType 2 =*/
          218
        ).string(message.maxSupportedPinkRuntimeVersion);
      return writer;
    };
    PhactoryInfo.encodeDelimited = function encodeDelimited(message, writer) {
      return this.encode(message, writer).ldelim();
    };
    PhactoryInfo.decode = function decode(reader, length) {
      if (!(reader instanceof $Reader))
        reader = $Reader.create(reader);
      let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.pruntime_rpc.PhactoryInfo();
      while (reader.pos < end) {
        let tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.initialized = reader.bool();
            break;
          case 2:
            message.registered = reader.bool();
            break;
          case 4:
            message.genesisBlockHash = reader.string();
            break;
          case 5:
            message.publicKey = reader.string();
            break;
          case 6:
            message.ecdhPublicKey = reader.string();
            break;
          case 7:
            message.headernum = reader.uint32();
            break;
          case 8:
            message.paraHeadernum = reader.uint32();
            break;
          case 9:
            message.blocknum = reader.uint32();
            break;
          case 10:
            message.stateRoot = reader.string();
            break;
          case 11:
            message.devMode = reader.bool();
            break;
          case 12:
            message.pendingMessages = reader.uint64();
            break;
          case 13:
            message.score = reader.uint64();
            break;
          case 14:
            message.gatekeeper = $root.pruntime_rpc.GatekeeperStatus.decode(reader, reader.uint32());
            break;
          case 15:
            message.version = reader.string();
            break;
          case 16:
            message.gitRevision = reader.string();
            break;
          case 18:
            message.memoryUsage = $root.pruntime_rpc.MemoryUsage.decode(reader, reader.uint32());
            break;
          case 21:
            message.waitingForParaheaders = reader.bool();
            break;
          case 23:
            message.system = $root.pruntime_rpc.SystemInfo.decode(reader, reader.uint32());
            break;
          case 24:
            message.canLoadChainState = reader.bool();
            break;
          case 25:
            message.safeModeLevel = reader.uint32();
            break;
          case 26:
            message.currentBlockTime = reader.uint64();
            break;
          case 27:
            message.maxSupportedPinkRuntimeVersion = reader.string();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    };
    PhactoryInfo.decodeDelimited = function decodeDelimited(reader) {
      if (!(reader instanceof $Reader))
        reader = new $Reader(reader);
      return this.decode(reader, reader.uint32());
    };
    PhactoryInfo.verify = function verify(message) {
      if (typeof message !== "object" || message === null)
        return "object expected";
      let properties = {};
      if (message.initialized != null && message.hasOwnProperty("initialized")) {
        if (typeof message.initialized !== "boolean")
          return "initialized: boolean expected";
      }
      if (message.registered != null && message.hasOwnProperty("registered")) {
        if (typeof message.registered !== "boolean")
          return "registered: boolean expected";
      }
      if (message.genesisBlockHash != null && message.hasOwnProperty("genesisBlockHash")) {
        properties._genesisBlockHash = 1;
        if (!$util.isString(message.genesisBlockHash))
          return "genesisBlockHash: string expected";
      }
      if (message.publicKey != null && message.hasOwnProperty("publicKey")) {
        properties._publicKey = 1;
        if (!$util.isString(message.publicKey))
          return "publicKey: string expected";
      }
      if (message.ecdhPublicKey != null && message.hasOwnProperty("ecdhPublicKey")) {
        properties._ecdhPublicKey = 1;
        if (!$util.isString(message.ecdhPublicKey))
          return "ecdhPublicKey: string expected";
      }
      if (message.headernum != null && message.hasOwnProperty("headernum")) {
        if (!$util.isInteger(message.headernum))
          return "headernum: integer expected";
      }
      if (message.paraHeadernum != null && message.hasOwnProperty("paraHeadernum")) {
        if (!$util.isInteger(message.paraHeadernum))
          return "paraHeadernum: integer expected";
      }
      if (message.blocknum != null && message.hasOwnProperty("blocknum")) {
        if (!$util.isInteger(message.blocknum))
          return "blocknum: integer expected";
      }
      if (message.stateRoot != null && message.hasOwnProperty("stateRoot")) {
        if (!$util.isString(message.stateRoot))
          return "stateRoot: string expected";
      }
      if (message.devMode != null && message.hasOwnProperty("devMode")) {
        if (typeof message.devMode !== "boolean")
          return "devMode: boolean expected";
      }
      if (message.pendingMessages != null && message.hasOwnProperty("pendingMessages")) {
        if (!$util.isInteger(message.pendingMessages) && !(message.pendingMessages && $util.isInteger(message.pendingMessages.low) && $util.isInteger(message.pendingMessages.high)))
          return "pendingMessages: integer|Long expected";
      }
      if (message.score != null && message.hasOwnProperty("score")) {
        if (!$util.isInteger(message.score) && !(message.score && $util.isInteger(message.score.low) && $util.isInteger(message.score.high)))
          return "score: integer|Long expected";
      }
      if (message.gatekeeper != null && message.hasOwnProperty("gatekeeper")) {
        let error = $root.pruntime_rpc.GatekeeperStatus.verify(message.gatekeeper);
        if (error)
          return "gatekeeper." + error;
      }
      if (message.version != null && message.hasOwnProperty("version")) {
        if (!$util.isString(message.version))
          return "version: string expected";
      }
      if (message.gitRevision != null && message.hasOwnProperty("gitRevision")) {
        if (!$util.isString(message.gitRevision))
          return "gitRevision: string expected";
      }
      if (message.memoryUsage != null && message.hasOwnProperty("memoryUsage")) {
        let error = $root.pruntime_rpc.MemoryUsage.verify(message.memoryUsage);
        if (error)
          return "memoryUsage." + error;
      }
      if (message.waitingForParaheaders != null && message.hasOwnProperty("waitingForParaheaders")) {
        if (typeof message.waitingForParaheaders !== "boolean")
          return "waitingForParaheaders: boolean expected";
      }
      if (message.system != null && message.hasOwnProperty("system")) {
        let error = $root.pruntime_rpc.SystemInfo.verify(message.system);
        if (error)
          return "system." + error;
      }
      if (message.canLoadChainState != null && message.hasOwnProperty("canLoadChainState")) {
        if (typeof message.canLoadChainState !== "boolean")
          return "canLoadChainState: boolean expected";
      }
      if (message.safeModeLevel != null && message.hasOwnProperty("safeModeLevel")) {
        if (!$util.isInteger(message.safeModeLevel))
          return "safeModeLevel: integer expected";
      }
      if (message.currentBlockTime != null && message.hasOwnProperty("currentBlockTime")) {
        if (!$util.isInteger(message.currentBlockTime) && !(message.currentBlockTime && $util.isInteger(message.currentBlockTime.low) && $util.isInteger(message.currentBlockTime.high)))
          return "currentBlockTime: integer|Long expected";
      }
      if (message.maxSupportedPinkRuntimeVersion != null && message.hasOwnProperty("maxSupportedPinkRuntimeVersion")) {
        if (!$util.isString(message.maxSupportedPinkRuntimeVersion))
          return "maxSupportedPinkRuntimeVersion: string expected";
      }
      return null;
    };
    PhactoryInfo.fromObject = function fromObject(object) {
      if (object instanceof $root.pruntime_rpc.PhactoryInfo)
        return object;
      let message = new $root.pruntime_rpc.PhactoryInfo();
      if (object.initialized != null)
        message.initialized = Boolean(object.initialized);
      if (object.registered != null)
        message.registered = Boolean(object.registered);
      if (object.genesisBlockHash != null)
        message.genesisBlockHash = String(object.genesisBlockHash);
      if (object.publicKey != null)
        message.publicKey = String(object.publicKey);
      if (object.ecdhPublicKey != null)
        message.ecdhPublicKey = String(object.ecdhPublicKey);
      if (object.headernum != null)
        message.headernum = object.headernum >>> 0;
      if (object.paraHeadernum != null)
        message.paraHeadernum = object.paraHeadernum >>> 0;
      if (object.blocknum != null)
        message.blocknum = object.blocknum >>> 0;
      if (object.stateRoot != null)
        message.stateRoot = String(object.stateRoot);
      if (object.devMode != null)
        message.devMode = Boolean(object.devMode);
      if (object.pendingMessages != null) {
        if ($util.Long)
          (message.pendingMessages = $util.Long.fromValue(object.pendingMessages)).unsigned = true;
        else if (typeof object.pendingMessages === "string")
          message.pendingMessages = parseInt(object.pendingMessages, 10);
        else if (typeof object.pendingMessages === "number")
          message.pendingMessages = object.pendingMessages;
        else if (typeof object.pendingMessages === "object")
          message.pendingMessages = new $util.LongBits(object.pendingMessages.low >>> 0, object.pendingMessages.high >>> 0).toNumber(true);
      }
      if (object.score != null) {
        if ($util.Long)
          (message.score = $util.Long.fromValue(object.score)).unsigned = true;
        else if (typeof object.score === "string")
          message.score = parseInt(object.score, 10);
        else if (typeof object.score === "number")
          message.score = object.score;
        else if (typeof object.score === "object")
          message.score = new $util.LongBits(object.score.low >>> 0, object.score.high >>> 0).toNumber(true);
      }
      if (object.gatekeeper != null) {
        if (typeof object.gatekeeper !== "object")
          throw TypeError(".pruntime_rpc.PhactoryInfo.gatekeeper: object expected");
        message.gatekeeper = $root.pruntime_rpc.GatekeeperStatus.fromObject(object.gatekeeper);
      }
      if (object.version != null)
        message.version = String(object.version);
      if (object.gitRevision != null)
        message.gitRevision = String(object.gitRevision);
      if (object.memoryUsage != null) {
        if (typeof object.memoryUsage !== "object")
          throw TypeError(".pruntime_rpc.PhactoryInfo.memoryUsage: object expected");
        message.memoryUsage = $root.pruntime_rpc.MemoryUsage.fromObject(object.memoryUsage);
      }
      if (object.waitingForParaheaders != null)
        message.waitingForParaheaders = Boolean(object.waitingForParaheaders);
      if (object.system != null) {
        if (typeof object.system !== "object")
          throw TypeError(".pruntime_rpc.PhactoryInfo.system: object expected");
        message.system = $root.pruntime_rpc.SystemInfo.fromObject(object.system);
      }
      if (object.canLoadChainState != null)
        message.canLoadChainState = Boolean(object.canLoadChainState);
      if (object.safeModeLevel != null)
        message.safeModeLevel = object.safeModeLevel >>> 0;
      if (object.currentBlockTime != null) {
        if ($util.Long)
          (message.currentBlockTime = $util.Long.fromValue(object.currentBlockTime)).unsigned = true;
        else if (typeof object.currentBlockTime === "string")
          message.currentBlockTime = parseInt(object.currentBlockTime, 10);
        else if (typeof object.currentBlockTime === "number")
          message.currentBlockTime = object.currentBlockTime;
        else if (typeof object.currentBlockTime === "object")
          message.currentBlockTime = new $util.LongBits(object.currentBlockTime.low >>> 0, object.currentBlockTime.high >>> 0).toNumber(true);
      }
      if (object.maxSupportedPinkRuntimeVersion != null)
        message.maxSupportedPinkRuntimeVersion = String(object.maxSupportedPinkRuntimeVersion);
      return message;
    };
    PhactoryInfo.toObject = function toObject(message, options2) {
      if (!options2)
        options2 = {};
      let object = {};
      if (options2.defaults) {
        object.initialized = false;
        object.registered = false;
        object.headernum = 0;
        object.paraHeadernum = 0;
        object.blocknum = 0;
        object.stateRoot = "";
        object.devMode = false;
        if ($util.Long) {
          let long = new $util.Long(0, 0, true);
          object.pendingMessages = options2.longs === String ? long.toString() : options2.longs === Number ? long.toNumber() : long;
        } else
          object.pendingMessages = options2.longs === String ? "0" : 0;
        if ($util.Long) {
          let long = new $util.Long(0, 0, true);
          object.score = options2.longs === String ? long.toString() : options2.longs === Number ? long.toNumber() : long;
        } else
          object.score = options2.longs === String ? "0" : 0;
        object.gatekeeper = null;
        object.version = "";
        object.gitRevision = "";
        object.memoryUsage = null;
        object.waitingForParaheaders = false;
        object.system = null;
        object.canLoadChainState = false;
        object.safeModeLevel = 0;
        if ($util.Long) {
          let long = new $util.Long(0, 0, true);
          object.currentBlockTime = options2.longs === String ? long.toString() : options2.longs === Number ? long.toNumber() : long;
        } else
          object.currentBlockTime = options2.longs === String ? "0" : 0;
        object.maxSupportedPinkRuntimeVersion = "";
      }
      if (message.initialized != null && message.hasOwnProperty("initialized"))
        object.initialized = message.initialized;
      if (message.registered != null && message.hasOwnProperty("registered"))
        object.registered = message.registered;
      if (message.genesisBlockHash != null && message.hasOwnProperty("genesisBlockHash")) {
        object.genesisBlockHash = message.genesisBlockHash;
        if (options2.oneofs)
          object._genesisBlockHash = "genesisBlockHash";
      }
      if (message.publicKey != null && message.hasOwnProperty("publicKey")) {
        object.publicKey = message.publicKey;
        if (options2.oneofs)
          object._publicKey = "publicKey";
      }
      if (message.ecdhPublicKey != null && message.hasOwnProperty("ecdhPublicKey")) {
        object.ecdhPublicKey = message.ecdhPublicKey;
        if (options2.oneofs)
          object._ecdhPublicKey = "ecdhPublicKey";
      }
      if (message.headernum != null && message.hasOwnProperty("headernum"))
        object.headernum = message.headernum;
      if (message.paraHeadernum != null && message.hasOwnProperty("paraHeadernum"))
        object.paraHeadernum = message.paraHeadernum;
      if (message.blocknum != null && message.hasOwnProperty("blocknum"))
        object.blocknum = message.blocknum;
      if (message.stateRoot != null && message.hasOwnProperty("stateRoot"))
        object.stateRoot = message.stateRoot;
      if (message.devMode != null && message.hasOwnProperty("devMode"))
        object.devMode = message.devMode;
      if (message.pendingMessages != null && message.hasOwnProperty("pendingMessages"))
        if (typeof message.pendingMessages === "number")
          object.pendingMessages = options2.longs === String ? String(message.pendingMessages) : message.pendingMessages;
        else
          object.pendingMessages = options2.longs === String ? $util.Long.prototype.toString.call(message.pendingMessages) : options2.longs === Number ? new $util.LongBits(message.pendingMessages.low >>> 0, message.pendingMessages.high >>> 0).toNumber(true) : message.pendingMessages;
      if (message.score != null && message.hasOwnProperty("score"))
        if (typeof message.score === "number")
          object.score = options2.longs === String ? String(message.score) : message.score;
        else
          object.score = options2.longs === String ? $util.Long.prototype.toString.call(message.score) : options2.longs === Number ? new $util.LongBits(message.score.low >>> 0, message.score.high >>> 0).toNumber(true) : message.score;
      if (message.gatekeeper != null && message.hasOwnProperty("gatekeeper"))
        object.gatekeeper = $root.pruntime_rpc.GatekeeperStatus.toObject(message.gatekeeper, options2);
      if (message.version != null && message.hasOwnProperty("version"))
        object.version = message.version;
      if (message.gitRevision != null && message.hasOwnProperty("gitRevision"))
        object.gitRevision = message.gitRevision;
      if (message.memoryUsage != null && message.hasOwnProperty("memoryUsage"))
        object.memoryUsage = $root.pruntime_rpc.MemoryUsage.toObject(message.memoryUsage, options2);
      if (message.waitingForParaheaders != null && message.hasOwnProperty("waitingForParaheaders"))
        object.waitingForParaheaders = message.waitingForParaheaders;
      if (message.system != null && message.hasOwnProperty("system"))
        object.system = $root.pruntime_rpc.SystemInfo.toObject(message.system, options2);
      if (message.canLoadChainState != null && message.hasOwnProperty("canLoadChainState"))
        object.canLoadChainState = message.canLoadChainState;
      if (message.safeModeLevel != null && message.hasOwnProperty("safeModeLevel"))
        object.safeModeLevel = message.safeModeLevel;
      if (message.currentBlockTime != null && message.hasOwnProperty("currentBlockTime"))
        if (typeof message.currentBlockTime === "number")
          object.currentBlockTime = options2.longs === String ? String(message.currentBlockTime) : message.currentBlockTime;
        else
          object.currentBlockTime = options2.longs === String ? $util.Long.prototype.toString.call(message.currentBlockTime) : options2.longs === Number ? new $util.LongBits(message.currentBlockTime.low >>> 0, message.currentBlockTime.high >>> 0).toNumber(true) : message.currentBlockTime;
      if (message.maxSupportedPinkRuntimeVersion != null && message.hasOwnProperty("maxSupportedPinkRuntimeVersion"))
        object.maxSupportedPinkRuntimeVersion = message.maxSupportedPinkRuntimeVersion;
      return object;
    };
    PhactoryInfo.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return PhactoryInfo;
  }();
  pruntime_rpc2.SystemInfo = function() {
    function SystemInfo(properties) {
      if (properties) {
        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          if (properties[keys[i]] != null)
            this[keys[i]] = properties[keys[i]];
      }
    }
    SystemInfo.prototype.registered = false;
    SystemInfo.prototype.publicKey = "";
    SystemInfo.prototype.ecdhPublicKey = "";
    SystemInfo.prototype.gatekeeper = null;
    SystemInfo.prototype.numberOfClusters = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
    SystemInfo.prototype.numberOfContracts = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
    SystemInfo.prototype.maxSupportedConsensusVersion = 0;
    SystemInfo.prototype.genesisBlock = 0;
    SystemInfo.create = function create2(properties) {
      return new SystemInfo(properties);
    };
    SystemInfo.encode = function encode(message, writer) {
      if (!writer)
        writer = $Writer.create();
      if (message.registered != null && Object.hasOwnProperty.call(message, "registered"))
        writer.uint32(
          /* id 1, wireType 0 =*/
          8
        ).bool(message.registered);
      if (message.publicKey != null && Object.hasOwnProperty.call(message, "publicKey"))
        writer.uint32(
          /* id 2, wireType 2 =*/
          18
        ).string(message.publicKey);
      if (message.ecdhPublicKey != null && Object.hasOwnProperty.call(message, "ecdhPublicKey"))
        writer.uint32(
          /* id 3, wireType 2 =*/
          26
        ).string(message.ecdhPublicKey);
      if (message.gatekeeper != null && Object.hasOwnProperty.call(message, "gatekeeper"))
        $root.pruntime_rpc.GatekeeperStatus.encode(message.gatekeeper, writer.uint32(
          /* id 4, wireType 2 =*/
          34
        ).fork()).ldelim();
      if (message.numberOfClusters != null && Object.hasOwnProperty.call(message, "numberOfClusters"))
        writer.uint32(
          /* id 5, wireType 0 =*/
          40
        ).uint64(message.numberOfClusters);
      if (message.numberOfContracts != null && Object.hasOwnProperty.call(message, "numberOfContracts"))
        writer.uint32(
          /* id 6, wireType 0 =*/
          48
        ).uint64(message.numberOfContracts);
      if (message.maxSupportedConsensusVersion != null && Object.hasOwnProperty.call(message, "maxSupportedConsensusVersion"))
        writer.uint32(
          /* id 7, wireType 0 =*/
          56
        ).uint32(message.maxSupportedConsensusVersion);
      if (message.genesisBlock != null && Object.hasOwnProperty.call(message, "genesisBlock"))
        writer.uint32(
          /* id 8, wireType 0 =*/
          64
        ).uint32(message.genesisBlock);
      return writer;
    };
    SystemInfo.encodeDelimited = function encodeDelimited(message, writer) {
      return this.encode(message, writer).ldelim();
    };
    SystemInfo.decode = function decode(reader, length) {
      if (!(reader instanceof $Reader))
        reader = $Reader.create(reader);
      let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.pruntime_rpc.SystemInfo();
      while (reader.pos < end) {
        let tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.registered = reader.bool();
            break;
          case 2:
            message.publicKey = reader.string();
            break;
          case 3:
            message.ecdhPublicKey = reader.string();
            break;
          case 4:
            message.gatekeeper = $root.pruntime_rpc.GatekeeperStatus.decode(reader, reader.uint32());
            break;
          case 5:
            message.numberOfClusters = reader.uint64();
            break;
          case 6:
            message.numberOfContracts = reader.uint64();
            break;
          case 7:
            message.maxSupportedConsensusVersion = reader.uint32();
            break;
          case 8:
            message.genesisBlock = reader.uint32();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    };
    SystemInfo.decodeDelimited = function decodeDelimited(reader) {
      if (!(reader instanceof $Reader))
        reader = new $Reader(reader);
      return this.decode(reader, reader.uint32());
    };
    SystemInfo.verify = function verify(message) {
      if (typeof message !== "object" || message === null)
        return "object expected";
      if (message.registered != null && message.hasOwnProperty("registered")) {
        if (typeof message.registered !== "boolean")
          return "registered: boolean expected";
      }
      if (message.publicKey != null && message.hasOwnProperty("publicKey")) {
        if (!$util.isString(message.publicKey))
          return "publicKey: string expected";
      }
      if (message.ecdhPublicKey != null && message.hasOwnProperty("ecdhPublicKey")) {
        if (!$util.isString(message.ecdhPublicKey))
          return "ecdhPublicKey: string expected";
      }
      if (message.gatekeeper != null && message.hasOwnProperty("gatekeeper")) {
        let error = $root.pruntime_rpc.GatekeeperStatus.verify(message.gatekeeper);
        if (error)
          return "gatekeeper." + error;
      }
      if (message.numberOfClusters != null && message.hasOwnProperty("numberOfClusters")) {
        if (!$util.isInteger(message.numberOfClusters) && !(message.numberOfClusters && $util.isInteger(message.numberOfClusters.low) && $util.isInteger(message.numberOfClusters.high)))
          return "numberOfClusters: integer|Long expected";
      }
      if (message.numberOfContracts != null && message.hasOwnProperty("numberOfContracts")) {
        if (!$util.isInteger(message.numberOfContracts) && !(message.numberOfContracts && $util.isInteger(message.numberOfContracts.low) && $util.isInteger(message.numberOfContracts.high)))
          return "numberOfContracts: integer|Long expected";
      }
      if (message.maxSupportedConsensusVersion != null && message.hasOwnProperty("maxSupportedConsensusVersion")) {
        if (!$util.isInteger(message.maxSupportedConsensusVersion))
          return "maxSupportedConsensusVersion: integer expected";
      }
      if (message.genesisBlock != null && message.hasOwnProperty("genesisBlock")) {
        if (!$util.isInteger(message.genesisBlock))
          return "genesisBlock: integer expected";
      }
      return null;
    };
    SystemInfo.fromObject = function fromObject(object) {
      if (object instanceof $root.pruntime_rpc.SystemInfo)
        return object;
      let message = new $root.pruntime_rpc.SystemInfo();
      if (object.registered != null)
        message.registered = Boolean(object.registered);
      if (object.publicKey != null)
        message.publicKey = String(object.publicKey);
      if (object.ecdhPublicKey != null)
        message.ecdhPublicKey = String(object.ecdhPublicKey);
      if (object.gatekeeper != null) {
        if (typeof object.gatekeeper !== "object")
          throw TypeError(".pruntime_rpc.SystemInfo.gatekeeper: object expected");
        message.gatekeeper = $root.pruntime_rpc.GatekeeperStatus.fromObject(object.gatekeeper);
      }
      if (object.numberOfClusters != null) {
        if ($util.Long)
          (message.numberOfClusters = $util.Long.fromValue(object.numberOfClusters)).unsigned = true;
        else if (typeof object.numberOfClusters === "string")
          message.numberOfClusters = parseInt(object.numberOfClusters, 10);
        else if (typeof object.numberOfClusters === "number")
          message.numberOfClusters = object.numberOfClusters;
        else if (typeof object.numberOfClusters === "object")
          message.numberOfClusters = new $util.LongBits(object.numberOfClusters.low >>> 0, object.numberOfClusters.high >>> 0).toNumber(true);
      }
      if (object.numberOfContracts != null) {
        if ($util.Long)
          (message.numberOfContracts = $util.Long.fromValue(object.numberOfContracts)).unsigned = true;
        else if (typeof object.numberOfContracts === "string")
          message.numberOfContracts = parseInt(object.numberOfContracts, 10);
        else if (typeof object.numberOfContracts === "number")
          message.numberOfContracts = object.numberOfContracts;
        else if (typeof object.numberOfContracts === "object")
          message.numberOfContracts = new $util.LongBits(object.numberOfContracts.low >>> 0, object.numberOfContracts.high >>> 0).toNumber(true);
      }
      if (object.maxSupportedConsensusVersion != null)
        message.maxSupportedConsensusVersion = object.maxSupportedConsensusVersion >>> 0;
      if (object.genesisBlock != null)
        message.genesisBlock = object.genesisBlock >>> 0;
      return message;
    };
    SystemInfo.toObject = function toObject(message, options2) {
      if (!options2)
        options2 = {};
      let object = {};
      if (options2.defaults) {
        object.registered = false;
        object.publicKey = "";
        object.ecdhPublicKey = "";
        object.gatekeeper = null;
        if ($util.Long) {
          let long = new $util.Long(0, 0, true);
          object.numberOfClusters = options2.longs === String ? long.toString() : options2.longs === Number ? long.toNumber() : long;
        } else
          object.numberOfClusters = options2.longs === String ? "0" : 0;
        if ($util.Long) {
          let long = new $util.Long(0, 0, true);
          object.numberOfContracts = options2.longs === String ? long.toString() : options2.longs === Number ? long.toNumber() : long;
        } else
          object.numberOfContracts = options2.longs === String ? "0" : 0;
        object.maxSupportedConsensusVersion = 0;
        object.genesisBlock = 0;
      }
      if (message.registered != null && message.hasOwnProperty("registered"))
        object.registered = message.registered;
      if (message.publicKey != null && message.hasOwnProperty("publicKey"))
        object.publicKey = message.publicKey;
      if (message.ecdhPublicKey != null && message.hasOwnProperty("ecdhPublicKey"))
        object.ecdhPublicKey = message.ecdhPublicKey;
      if (message.gatekeeper != null && message.hasOwnProperty("gatekeeper"))
        object.gatekeeper = $root.pruntime_rpc.GatekeeperStatus.toObject(message.gatekeeper, options2);
      if (message.numberOfClusters != null && message.hasOwnProperty("numberOfClusters"))
        if (typeof message.numberOfClusters === "number")
          object.numberOfClusters = options2.longs === String ? String(message.numberOfClusters) : message.numberOfClusters;
        else
          object.numberOfClusters = options2.longs === String ? $util.Long.prototype.toString.call(message.numberOfClusters) : options2.longs === Number ? new $util.LongBits(message.numberOfClusters.low >>> 0, message.numberOfClusters.high >>> 0).toNumber(true) : message.numberOfClusters;
      if (message.numberOfContracts != null && message.hasOwnProperty("numberOfContracts"))
        if (typeof message.numberOfContracts === "number")
          object.numberOfContracts = options2.longs === String ? String(message.numberOfContracts) : message.numberOfContracts;
        else
          object.numberOfContracts = options2.longs === String ? $util.Long.prototype.toString.call(message.numberOfContracts) : options2.longs === Number ? new $util.LongBits(message.numberOfContracts.low >>> 0, message.numberOfContracts.high >>> 0).toNumber(true) : message.numberOfContracts;
      if (message.maxSupportedConsensusVersion != null && message.hasOwnProperty("maxSupportedConsensusVersion"))
        object.maxSupportedConsensusVersion = message.maxSupportedConsensusVersion;
      if (message.genesisBlock != null && message.hasOwnProperty("genesisBlock"))
        object.genesisBlock = message.genesisBlock;
      return object;
    };
    SystemInfo.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return SystemInfo;
  }();
  pruntime_rpc2.GatekeeperRole = function() {
    const valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "None"] = 0;
    values[valuesById[1] = "Dummy"] = 1;
    values[valuesById[2] = "Active"] = 2;
    return values;
  }();
  pruntime_rpc2.GatekeeperStatus = function() {
    function GatekeeperStatus(properties) {
      if (properties) {
        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          if (properties[keys[i]] != null)
            this[keys[i]] = properties[keys[i]];
      }
    }
    GatekeeperStatus.prototype.role = 0;
    GatekeeperStatus.prototype.masterPublicKey = "";
    GatekeeperStatus.create = function create2(properties) {
      return new GatekeeperStatus(properties);
    };
    GatekeeperStatus.encode = function encode(message, writer) {
      if (!writer)
        writer = $Writer.create();
      if (message.role != null && Object.hasOwnProperty.call(message, "role"))
        writer.uint32(
          /* id 1, wireType 0 =*/
          8
        ).int32(message.role);
      if (message.masterPublicKey != null && Object.hasOwnProperty.call(message, "masterPublicKey"))
        writer.uint32(
          /* id 2, wireType 2 =*/
          18
        ).string(message.masterPublicKey);
      return writer;
    };
    GatekeeperStatus.encodeDelimited = function encodeDelimited(message, writer) {
      return this.encode(message, writer).ldelim();
    };
    GatekeeperStatus.decode = function decode(reader, length) {
      if (!(reader instanceof $Reader))
        reader = $Reader.create(reader);
      let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.pruntime_rpc.GatekeeperStatus();
      while (reader.pos < end) {
        let tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.role = reader.int32();
            break;
          case 2:
            message.masterPublicKey = reader.string();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    };
    GatekeeperStatus.decodeDelimited = function decodeDelimited(reader) {
      if (!(reader instanceof $Reader))
        reader = new $Reader(reader);
      return this.decode(reader, reader.uint32());
    };
    GatekeeperStatus.verify = function verify(message) {
      if (typeof message !== "object" || message === null)
        return "object expected";
      if (message.role != null && message.hasOwnProperty("role"))
        switch (message.role) {
          default:
            return "role: enum value expected";
          case 0:
          case 1:
          case 2:
            break;
        }
      if (message.masterPublicKey != null && message.hasOwnProperty("masterPublicKey")) {
        if (!$util.isString(message.masterPublicKey))
          return "masterPublicKey: string expected";
      }
      return null;
    };
    GatekeeperStatus.fromObject = function fromObject(object) {
      if (object instanceof $root.pruntime_rpc.GatekeeperStatus)
        return object;
      let message = new $root.pruntime_rpc.GatekeeperStatus();
      switch (object.role) {
        case "None":
        case 0:
          message.role = 0;
          break;
        case "Dummy":
        case 1:
          message.role = 1;
          break;
        case "Active":
        case 2:
          message.role = 2;
          break;
      }
      if (object.masterPublicKey != null)
        message.masterPublicKey = String(object.masterPublicKey);
      return message;
    };
    GatekeeperStatus.toObject = function toObject(message, options2) {
      if (!options2)
        options2 = {};
      let object = {};
      if (options2.defaults) {
        object.role = options2.enums === String ? "None" : 0;
        object.masterPublicKey = "";
      }
      if (message.role != null && message.hasOwnProperty("role"))
        object.role = options2.enums === String ? $root.pruntime_rpc.GatekeeperRole[message.role] : message.role;
      if (message.masterPublicKey != null && message.hasOwnProperty("masterPublicKey"))
        object.masterPublicKey = message.masterPublicKey;
      return object;
    };
    GatekeeperStatus.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GatekeeperStatus;
  }();
  pruntime_rpc2.MemoryUsage = function() {
    function MemoryUsage(properties) {
      if (properties) {
        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          if (properties[keys[i]] != null)
            this[keys[i]] = properties[keys[i]];
      }
    }
    MemoryUsage.prototype.rustUsed = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
    MemoryUsage.prototype.rustPeakUsed = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
    MemoryUsage.prototype.totalPeakUsed = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
    MemoryUsage.prototype.free = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
    MemoryUsage.create = function create2(properties) {
      return new MemoryUsage(properties);
    };
    MemoryUsage.encode = function encode(message, writer) {
      if (!writer)
        writer = $Writer.create();
      if (message.rustUsed != null && Object.hasOwnProperty.call(message, "rustUsed"))
        writer.uint32(
          /* id 1, wireType 0 =*/
          8
        ).uint64(message.rustUsed);
      if (message.rustPeakUsed != null && Object.hasOwnProperty.call(message, "rustPeakUsed"))
        writer.uint32(
          /* id 2, wireType 0 =*/
          16
        ).uint64(message.rustPeakUsed);
      if (message.totalPeakUsed != null && Object.hasOwnProperty.call(message, "totalPeakUsed"))
        writer.uint32(
          /* id 3, wireType 0 =*/
          24
        ).uint64(message.totalPeakUsed);
      if (message.free != null && Object.hasOwnProperty.call(message, "free"))
        writer.uint32(
          /* id 4, wireType 0 =*/
          32
        ).uint64(message.free);
      return writer;
    };
    MemoryUsage.encodeDelimited = function encodeDelimited(message, writer) {
      return this.encode(message, writer).ldelim();
    };
    MemoryUsage.decode = function decode(reader, length) {
      if (!(reader instanceof $Reader))
        reader = $Reader.create(reader);
      let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.pruntime_rpc.MemoryUsage();
      while (reader.pos < end) {
        let tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.rustUsed = reader.uint64();
            break;
          case 2:
            message.rustPeakUsed = reader.uint64();
            break;
          case 3:
            message.totalPeakUsed = reader.uint64();
            break;
          case 4:
            message.free = reader.uint64();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    };
    MemoryUsage.decodeDelimited = function decodeDelimited(reader) {
      if (!(reader instanceof $Reader))
        reader = new $Reader(reader);
      return this.decode(reader, reader.uint32());
    };
    MemoryUsage.verify = function verify(message) {
      if (typeof message !== "object" || message === null)
        return "object expected";
      if (message.rustUsed != null && message.hasOwnProperty("rustUsed")) {
        if (!$util.isInteger(message.rustUsed) && !(message.rustUsed && $util.isInteger(message.rustUsed.low) && $util.isInteger(message.rustUsed.high)))
          return "rustUsed: integer|Long expected";
      }
      if (message.rustPeakUsed != null && message.hasOwnProperty("rustPeakUsed")) {
        if (!$util.isInteger(message.rustPeakUsed) && !(message.rustPeakUsed && $util.isInteger(message.rustPeakUsed.low) && $util.isInteger(message.rustPeakUsed.high)))
          return "rustPeakUsed: integer|Long expected";
      }
      if (message.totalPeakUsed != null && message.hasOwnProperty("totalPeakUsed")) {
        if (!$util.isInteger(message.totalPeakUsed) && !(message.totalPeakUsed && $util.isInteger(message.totalPeakUsed.low) && $util.isInteger(message.totalPeakUsed.high)))
          return "totalPeakUsed: integer|Long expected";
      }
      if (message.free != null && message.hasOwnProperty("free")) {
        if (!$util.isInteger(message.free) && !(message.free && $util.isInteger(message.free.low) && $util.isInteger(message.free.high)))
          return "free: integer|Long expected";
      }
      return null;
    };
    MemoryUsage.fromObject = function fromObject(object) {
      if (object instanceof $root.pruntime_rpc.MemoryUsage)
        return object;
      let message = new $root.pruntime_rpc.MemoryUsage();
      if (object.rustUsed != null) {
        if ($util.Long)
          (message.rustUsed = $util.Long.fromValue(object.rustUsed)).unsigned = true;
        else if (typeof object.rustUsed === "string")
          message.rustUsed = parseInt(object.rustUsed, 10);
        else if (typeof object.rustUsed === "number")
          message.rustUsed = object.rustUsed;
        else if (typeof object.rustUsed === "object")
          message.rustUsed = new $util.LongBits(object.rustUsed.low >>> 0, object.rustUsed.high >>> 0).toNumber(true);
      }
      if (object.rustPeakUsed != null) {
        if ($util.Long)
          (message.rustPeakUsed = $util.Long.fromValue(object.rustPeakUsed)).unsigned = true;
        else if (typeof object.rustPeakUsed === "string")
          message.rustPeakUsed = parseInt(object.rustPeakUsed, 10);
        else if (typeof object.rustPeakUsed === "number")
          message.rustPeakUsed = object.rustPeakUsed;
        else if (typeof object.rustPeakUsed === "object")
          message.rustPeakUsed = new $util.LongBits(object.rustPeakUsed.low >>> 0, object.rustPeakUsed.high >>> 0).toNumber(true);
      }
      if (object.totalPeakUsed != null) {
        if ($util.Long)
          (message.totalPeakUsed = $util.Long.fromValue(object.totalPeakUsed)).unsigned = true;
        else if (typeof object.totalPeakUsed === "string")
          message.totalPeakUsed = parseInt(object.totalPeakUsed, 10);
        else if (typeof object.totalPeakUsed === "number")
          message.totalPeakUsed = object.totalPeakUsed;
        else if (typeof object.totalPeakUsed === "object")
          message.totalPeakUsed = new $util.LongBits(object.totalPeakUsed.low >>> 0, object.totalPeakUsed.high >>> 0).toNumber(true);
      }
      if (object.free != null) {
        if ($util.Long)
          (message.free = $util.Long.fromValue(object.free)).unsigned = true;
        else if (typeof object.free === "string")
          message.free = parseInt(object.free, 10);
        else if (typeof object.free === "number")
          message.free = object.free;
        else if (typeof object.free === "object")
          message.free = new $util.LongBits(object.free.low >>> 0, object.free.high >>> 0).toNumber(true);
      }
      return message;
    };
    MemoryUsage.toObject = function toObject(message, options2) {
      if (!options2)
        options2 = {};
      let object = {};
      if (options2.defaults) {
        if ($util.Long) {
          let long = new $util.Long(0, 0, true);
          object.rustUsed = options2.longs === String ? long.toString() : options2.longs === Number ? long.toNumber() : long;
        } else
          object.rustUsed = options2.longs === String ? "0" : 0;
        if ($util.Long) {
          let long = new $util.Long(0, 0, true);
          object.rustPeakUsed = options2.longs === String ? long.toString() : options2.longs === Number ? long.toNumber() : long;
        } else
          object.rustPeakUsed = options2.longs === String ? "0" : 0;
        if ($util.Long) {
          let long = new $util.Long(0, 0, true);
          object.totalPeakUsed = options2.longs === String ? long.toString() : options2.longs === Number ? long.toNumber() : long;
        } else
          object.totalPeakUsed = options2.longs === String ? "0" : 0;
        if ($util.Long) {
          let long = new $util.Long(0, 0, true);
          object.free = options2.longs === String ? long.toString() : options2.longs === Number ? long.toNumber() : long;
        } else
          object.free = options2.longs === String ? "0" : 0;
      }
      if (message.rustUsed != null && message.hasOwnProperty("rustUsed"))
        if (typeof message.rustUsed === "number")
          object.rustUsed = options2.longs === String ? String(message.rustUsed) : message.rustUsed;
        else
          object.rustUsed = options2.longs === String ? $util.Long.prototype.toString.call(message.rustUsed) : options2.longs === Number ? new $util.LongBits(message.rustUsed.low >>> 0, message.rustUsed.high >>> 0).toNumber(true) : message.rustUsed;
      if (message.rustPeakUsed != null && message.hasOwnProperty("rustPeakUsed"))
        if (typeof message.rustPeakUsed === "number")
          object.rustPeakUsed = options2.longs === String ? String(message.rustPeakUsed) : message.rustPeakUsed;
        else
          object.rustPeakUsed = options2.longs === String ? $util.Long.prototype.toString.call(message.rustPeakUsed) : options2.longs === Number ? new $util.LongBits(message.rustPeakUsed.low >>> 0, message.rustPeakUsed.high >>> 0).toNumber(true) : message.rustPeakUsed;
      if (message.totalPeakUsed != null && message.hasOwnProperty("totalPeakUsed"))
        if (typeof message.totalPeakUsed === "number")
          object.totalPeakUsed = options2.longs === String ? String(message.totalPeakUsed) : message.totalPeakUsed;
        else
          object.totalPeakUsed = options2.longs === String ? $util.Long.prototype.toString.call(message.totalPeakUsed) : options2.longs === Number ? new $util.LongBits(message.totalPeakUsed.low >>> 0, message.totalPeakUsed.high >>> 0).toNumber(true) : message.totalPeakUsed;
      if (message.free != null && message.hasOwnProperty("free"))
        if (typeof message.free === "number")
          object.free = options2.longs === String ? String(message.free) : message.free;
        else
          object.free = options2.longs === String ? $util.Long.prototype.toString.call(message.free) : options2.longs === Number ? new $util.LongBits(message.free.low >>> 0, message.free.high >>> 0).toNumber(true) : message.free;
      return object;
    };
    MemoryUsage.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return MemoryUsage;
  }();
  pruntime_rpc2.SyncedTo = function() {
    function SyncedTo(properties) {
      if (properties) {
        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          if (properties[keys[i]] != null)
            this[keys[i]] = properties[keys[i]];
      }
    }
    SyncedTo.prototype.syncedTo = 0;
    SyncedTo.create = function create2(properties) {
      return new SyncedTo(properties);
    };
    SyncedTo.encode = function encode(message, writer) {
      if (!writer)
        writer = $Writer.create();
      if (message.syncedTo != null && Object.hasOwnProperty.call(message, "syncedTo"))
        writer.uint32(
          /* id 1, wireType 0 =*/
          8
        ).uint32(message.syncedTo);
      return writer;
    };
    SyncedTo.encodeDelimited = function encodeDelimited(message, writer) {
      return this.encode(message, writer).ldelim();
    };
    SyncedTo.decode = function decode(reader, length) {
      if (!(reader instanceof $Reader))
        reader = $Reader.create(reader);
      let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.pruntime_rpc.SyncedTo();
      while (reader.pos < end) {
        let tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.syncedTo = reader.uint32();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    };
    SyncedTo.decodeDelimited = function decodeDelimited(reader) {
      if (!(reader instanceof $Reader))
        reader = new $Reader(reader);
      return this.decode(reader, reader.uint32());
    };
    SyncedTo.verify = function verify(message) {
      if (typeof message !== "object" || message === null)
        return "object expected";
      if (message.syncedTo != null && message.hasOwnProperty("syncedTo")) {
        if (!$util.isInteger(message.syncedTo))
          return "syncedTo: integer expected";
      }
      return null;
    };
    SyncedTo.fromObject = function fromObject(object) {
      if (object instanceof $root.pruntime_rpc.SyncedTo)
        return object;
      let message = new $root.pruntime_rpc.SyncedTo();
      if (object.syncedTo != null)
        message.syncedTo = object.syncedTo >>> 0;
      return message;
    };
    SyncedTo.toObject = function toObject(message, options2) {
      if (!options2)
        options2 = {};
      let object = {};
      if (options2.defaults)
        object.syncedTo = 0;
      if (message.syncedTo != null && message.hasOwnProperty("syncedTo"))
        object.syncedTo = message.syncedTo;
      return object;
    };
    SyncedTo.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return SyncedTo;
  }();
  pruntime_rpc2.HeadersToSync = function() {
    function HeadersToSync(properties) {
      if (properties) {
        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          if (properties[keys[i]] != null)
            this[keys[i]] = properties[keys[i]];
      }
    }
    HeadersToSync.prototype.encodedHeaders = $util.newBuffer([]);
    HeadersToSync.prototype.encodedAuthoritySetChange = null;
    let $oneOfFields;
    Object.defineProperty(HeadersToSync.prototype, "_encodedAuthoritySetChange", {
      get: $util.oneOfGetter($oneOfFields = ["encodedAuthoritySetChange"]),
      set: $util.oneOfSetter($oneOfFields)
    });
    HeadersToSync.create = function create2(properties) {
      return new HeadersToSync(properties);
    };
    HeadersToSync.encode = function encode(message, writer) {
      if (!writer)
        writer = $Writer.create();
      if (message.encodedHeaders != null && Object.hasOwnProperty.call(message, "encodedHeaders"))
        writer.uint32(
          /* id 1, wireType 2 =*/
          10
        ).bytes(message.encodedHeaders);
      if (message.encodedAuthoritySetChange != null && Object.hasOwnProperty.call(message, "encodedAuthoritySetChange"))
        writer.uint32(
          /* id 2, wireType 2 =*/
          18
        ).bytes(message.encodedAuthoritySetChange);
      return writer;
    };
    HeadersToSync.encodeDelimited = function encodeDelimited(message, writer) {
      return this.encode(message, writer).ldelim();
    };
    HeadersToSync.decode = function decode(reader, length) {
      if (!(reader instanceof $Reader))
        reader = $Reader.create(reader);
      let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.pruntime_rpc.HeadersToSync();
      while (reader.pos < end) {
        let tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.encodedHeaders = reader.bytes();
            break;
          case 2:
            message.encodedAuthoritySetChange = reader.bytes();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    };
    HeadersToSync.decodeDelimited = function decodeDelimited(reader) {
      if (!(reader instanceof $Reader))
        reader = new $Reader(reader);
      return this.decode(reader, reader.uint32());
    };
    HeadersToSync.verify = function verify(message) {
      if (typeof message !== "object" || message === null)
        return "object expected";
      let properties = {};
      if (message.encodedHeaders != null && message.hasOwnProperty("encodedHeaders")) {
        if (!(message.encodedHeaders && typeof message.encodedHeaders.length === "number" || $util.isString(message.encodedHeaders)))
          return "encodedHeaders: buffer expected";
      }
      if (message.encodedAuthoritySetChange != null && message.hasOwnProperty("encodedAuthoritySetChange")) {
        properties._encodedAuthoritySetChange = 1;
        if (!(message.encodedAuthoritySetChange && typeof message.encodedAuthoritySetChange.length === "number" || $util.isString(message.encodedAuthoritySetChange)))
          return "encodedAuthoritySetChange: buffer expected";
      }
      return null;
    };
    HeadersToSync.fromObject = function fromObject(object) {
      if (object instanceof $root.pruntime_rpc.HeadersToSync)
        return object;
      let message = new $root.pruntime_rpc.HeadersToSync();
      if (object.encodedHeaders != null) {
        if (typeof object.encodedHeaders === "string")
          $util.base64.decode(object.encodedHeaders, message.encodedHeaders = $util.newBuffer($util.base64.length(object.encodedHeaders)), 0);
        else if (object.encodedHeaders.length)
          message.encodedHeaders = object.encodedHeaders;
      }
      if (object.encodedAuthoritySetChange != null) {
        if (typeof object.encodedAuthoritySetChange === "string")
          $util.base64.decode(object.encodedAuthoritySetChange, message.encodedAuthoritySetChange = $util.newBuffer($util.base64.length(object.encodedAuthoritySetChange)), 0);
        else if (object.encodedAuthoritySetChange.length)
          message.encodedAuthoritySetChange = object.encodedAuthoritySetChange;
      }
      return message;
    };
    HeadersToSync.toObject = function toObject(message, options2) {
      if (!options2)
        options2 = {};
      let object = {};
      if (options2.defaults)
        if (options2.bytes === String)
          object.encodedHeaders = "";
        else {
          object.encodedHeaders = [];
          if (options2.bytes !== Array)
            object.encodedHeaders = $util.newBuffer(object.encodedHeaders);
        }
      if (message.encodedHeaders != null && message.hasOwnProperty("encodedHeaders"))
        object.encodedHeaders = options2.bytes === String ? $util.base64.encode(message.encodedHeaders, 0, message.encodedHeaders.length) : options2.bytes === Array ? Array.prototype.slice.call(message.encodedHeaders) : message.encodedHeaders;
      if (message.encodedAuthoritySetChange != null && message.hasOwnProperty("encodedAuthoritySetChange")) {
        object.encodedAuthoritySetChange = options2.bytes === String ? $util.base64.encode(message.encodedAuthoritySetChange, 0, message.encodedAuthoritySetChange.length) : options2.bytes === Array ? Array.prototype.slice.call(message.encodedAuthoritySetChange) : message.encodedAuthoritySetChange;
        if (options2.oneofs)
          object._encodedAuthoritySetChange = "encodedAuthoritySetChange";
      }
      return object;
    };
    HeadersToSync.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return HeadersToSync;
  }();
  pruntime_rpc2.ParaHeadersToSync = function() {
    function ParaHeadersToSync(properties) {
      this.proof = [];
      if (properties) {
        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          if (properties[keys[i]] != null)
            this[keys[i]] = properties[keys[i]];
      }
    }
    ParaHeadersToSync.prototype.encodedHeaders = $util.newBuffer([]);
    ParaHeadersToSync.prototype.proof = $util.emptyArray;
    ParaHeadersToSync.create = function create2(properties) {
      return new ParaHeadersToSync(properties);
    };
    ParaHeadersToSync.encode = function encode(message, writer) {
      if (!writer)
        writer = $Writer.create();
      if (message.encodedHeaders != null && Object.hasOwnProperty.call(message, "encodedHeaders"))
        writer.uint32(
          /* id 1, wireType 2 =*/
          10
        ).bytes(message.encodedHeaders);
      if (message.proof != null && message.proof.length)
        for (let i = 0; i < message.proof.length; ++i)
          writer.uint32(
            /* id 2, wireType 2 =*/
            18
          ).bytes(message.proof[i]);
      return writer;
    };
    ParaHeadersToSync.encodeDelimited = function encodeDelimited(message, writer) {
      return this.encode(message, writer).ldelim();
    };
    ParaHeadersToSync.decode = function decode(reader, length) {
      if (!(reader instanceof $Reader))
        reader = $Reader.create(reader);
      let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.pruntime_rpc.ParaHeadersToSync();
      while (reader.pos < end) {
        let tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.encodedHeaders = reader.bytes();
            break;
          case 2:
            if (!(message.proof && message.proof.length))
              message.proof = [];
            message.proof.push(reader.bytes());
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    };
    ParaHeadersToSync.decodeDelimited = function decodeDelimited(reader) {
      if (!(reader instanceof $Reader))
        reader = new $Reader(reader);
      return this.decode(reader, reader.uint32());
    };
    ParaHeadersToSync.verify = function verify(message) {
      if (typeof message !== "object" || message === null)
        return "object expected";
      if (message.encodedHeaders != null && message.hasOwnProperty("encodedHeaders")) {
        if (!(message.encodedHeaders && typeof message.encodedHeaders.length === "number" || $util.isString(message.encodedHeaders)))
          return "encodedHeaders: buffer expected";
      }
      if (message.proof != null && message.hasOwnProperty("proof")) {
        if (!Array.isArray(message.proof))
          return "proof: array expected";
        for (let i = 0; i < message.proof.length; ++i)
          if (!(message.proof[i] && typeof message.proof[i].length === "number" || $util.isString(message.proof[i])))
            return "proof: buffer[] expected";
      }
      return null;
    };
    ParaHeadersToSync.fromObject = function fromObject(object) {
      if (object instanceof $root.pruntime_rpc.ParaHeadersToSync)
        return object;
      let message = new $root.pruntime_rpc.ParaHeadersToSync();
      if (object.encodedHeaders != null) {
        if (typeof object.encodedHeaders === "string")
          $util.base64.decode(object.encodedHeaders, message.encodedHeaders = $util.newBuffer($util.base64.length(object.encodedHeaders)), 0);
        else if (object.encodedHeaders.length)
          message.encodedHeaders = object.encodedHeaders;
      }
      if (object.proof) {
        if (!Array.isArray(object.proof))
          throw TypeError(".pruntime_rpc.ParaHeadersToSync.proof: array expected");
        message.proof = [];
        for (let i = 0; i < object.proof.length; ++i)
          if (typeof object.proof[i] === "string")
            $util.base64.decode(object.proof[i], message.proof[i] = $util.newBuffer($util.base64.length(object.proof[i])), 0);
          else if (object.proof[i].length)
            message.proof[i] = object.proof[i];
      }
      return message;
    };
    ParaHeadersToSync.toObject = function toObject(message, options2) {
      if (!options2)
        options2 = {};
      let object = {};
      if (options2.arrays || options2.defaults)
        object.proof = [];
      if (options2.defaults)
        if (options2.bytes === String)
          object.encodedHeaders = "";
        else {
          object.encodedHeaders = [];
          if (options2.bytes !== Array)
            object.encodedHeaders = $util.newBuffer(object.encodedHeaders);
        }
      if (message.encodedHeaders != null && message.hasOwnProperty("encodedHeaders"))
        object.encodedHeaders = options2.bytes === String ? $util.base64.encode(message.encodedHeaders, 0, message.encodedHeaders.length) : options2.bytes === Array ? Array.prototype.slice.call(message.encodedHeaders) : message.encodedHeaders;
      if (message.proof && message.proof.length) {
        object.proof = [];
        for (let j = 0; j < message.proof.length; ++j)
          object.proof[j] = options2.bytes === String ? $util.base64.encode(message.proof[j], 0, message.proof[j].length) : options2.bytes === Array ? Array.prototype.slice.call(message.proof[j]) : message.proof[j];
      }
      return object;
    };
    ParaHeadersToSync.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return ParaHeadersToSync;
  }();
  pruntime_rpc2.CombinedHeadersToSync = function() {
    function CombinedHeadersToSync(properties) {
      this.proof = [];
      if (properties) {
        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          if (properties[keys[i]] != null)
            this[keys[i]] = properties[keys[i]];
      }
    }
    CombinedHeadersToSync.prototype.encodedRelaychainHeaders = $util.newBuffer([]);
    CombinedHeadersToSync.prototype.authoritySetChange = null;
    CombinedHeadersToSync.prototype.encodedParachainHeaders = $util.newBuffer([]);
    CombinedHeadersToSync.prototype.proof = $util.emptyArray;
    let $oneOfFields;
    Object.defineProperty(CombinedHeadersToSync.prototype, "_authoritySetChange", {
      get: $util.oneOfGetter($oneOfFields = ["authoritySetChange"]),
      set: $util.oneOfSetter($oneOfFields)
    });
    CombinedHeadersToSync.create = function create2(properties) {
      return new CombinedHeadersToSync(properties);
    };
    CombinedHeadersToSync.encode = function encode(message, writer) {
      if (!writer)
        writer = $Writer.create();
      if (message.encodedRelaychainHeaders != null && Object.hasOwnProperty.call(message, "encodedRelaychainHeaders"))
        writer.uint32(
          /* id 1, wireType 2 =*/
          10
        ).bytes(message.encodedRelaychainHeaders);
      if (message.authoritySetChange != null && Object.hasOwnProperty.call(message, "authoritySetChange"))
        writer.uint32(
          /* id 2, wireType 2 =*/
          18
        ).bytes(message.authoritySetChange);
      if (message.encodedParachainHeaders != null && Object.hasOwnProperty.call(message, "encodedParachainHeaders"))
        writer.uint32(
          /* id 3, wireType 2 =*/
          26
        ).bytes(message.encodedParachainHeaders);
      if (message.proof != null && message.proof.length)
        for (let i = 0; i < message.proof.length; ++i)
          writer.uint32(
            /* id 4, wireType 2 =*/
            34
          ).bytes(message.proof[i]);
      return writer;
    };
    CombinedHeadersToSync.encodeDelimited = function encodeDelimited(message, writer) {
      return this.encode(message, writer).ldelim();
    };
    CombinedHeadersToSync.decode = function decode(reader, length) {
      if (!(reader instanceof $Reader))
        reader = $Reader.create(reader);
      let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.pruntime_rpc.CombinedHeadersToSync();
      while (reader.pos < end) {
        let tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.encodedRelaychainHeaders = reader.bytes();
            break;
          case 2:
            message.authoritySetChange = reader.bytes();
            break;
          case 3:
            message.encodedParachainHeaders = reader.bytes();
            break;
          case 4:
            if (!(message.proof && message.proof.length))
              message.proof = [];
            message.proof.push(reader.bytes());
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    };
    CombinedHeadersToSync.decodeDelimited = function decodeDelimited(reader) {
      if (!(reader instanceof $Reader))
        reader = new $Reader(reader);
      return this.decode(reader, reader.uint32());
    };
    CombinedHeadersToSync.verify = function verify(message) {
      if (typeof message !== "object" || message === null)
        return "object expected";
      let properties = {};
      if (message.encodedRelaychainHeaders != null && message.hasOwnProperty("encodedRelaychainHeaders")) {
        if (!(message.encodedRelaychainHeaders && typeof message.encodedRelaychainHeaders.length === "number" || $util.isString(message.encodedRelaychainHeaders)))
          return "encodedRelaychainHeaders: buffer expected";
      }
      if (message.authoritySetChange != null && message.hasOwnProperty("authoritySetChange")) {
        properties._authoritySetChange = 1;
        if (!(message.authoritySetChange && typeof message.authoritySetChange.length === "number" || $util.isString(message.authoritySetChange)))
          return "authoritySetChange: buffer expected";
      }
      if (message.encodedParachainHeaders != null && message.hasOwnProperty("encodedParachainHeaders")) {
        if (!(message.encodedParachainHeaders && typeof message.encodedParachainHeaders.length === "number" || $util.isString(message.encodedParachainHeaders)))
          return "encodedParachainHeaders: buffer expected";
      }
      if (message.proof != null && message.hasOwnProperty("proof")) {
        if (!Array.isArray(message.proof))
          return "proof: array expected";
        for (let i = 0; i < message.proof.length; ++i)
          if (!(message.proof[i] && typeof message.proof[i].length === "number" || $util.isString(message.proof[i])))
            return "proof: buffer[] expected";
      }
      return null;
    };
    CombinedHeadersToSync.fromObject = function fromObject(object) {
      if (object instanceof $root.pruntime_rpc.CombinedHeadersToSync)
        return object;
      let message = new $root.pruntime_rpc.CombinedHeadersToSync();
      if (object.encodedRelaychainHeaders != null) {
        if (typeof object.encodedRelaychainHeaders === "string")
          $util.base64.decode(object.encodedRelaychainHeaders, message.encodedRelaychainHeaders = $util.newBuffer($util.base64.length(object.encodedRelaychainHeaders)), 0);
        else if (object.encodedRelaychainHeaders.length)
          message.encodedRelaychainHeaders = object.encodedRelaychainHeaders;
      }
      if (object.authoritySetChange != null) {
        if (typeof object.authoritySetChange === "string")
          $util.base64.decode(object.authoritySetChange, message.authoritySetChange = $util.newBuffer($util.base64.length(object.authoritySetChange)), 0);
        else if (object.authoritySetChange.length)
          message.authoritySetChange = object.authoritySetChange;
      }
      if (object.encodedParachainHeaders != null) {
        if (typeof object.encodedParachainHeaders === "string")
          $util.base64.decode(object.encodedParachainHeaders, message.encodedParachainHeaders = $util.newBuffer($util.base64.length(object.encodedParachainHeaders)), 0);
        else if (object.encodedParachainHeaders.length)
          message.encodedParachainHeaders = object.encodedParachainHeaders;
      }
      if (object.proof) {
        if (!Array.isArray(object.proof))
          throw TypeError(".pruntime_rpc.CombinedHeadersToSync.proof: array expected");
        message.proof = [];
        for (let i = 0; i < object.proof.length; ++i)
          if (typeof object.proof[i] === "string")
            $util.base64.decode(object.proof[i], message.proof[i] = $util.newBuffer($util.base64.length(object.proof[i])), 0);
          else if (object.proof[i].length)
            message.proof[i] = object.proof[i];
      }
      return message;
    };
    CombinedHeadersToSync.toObject = function toObject(message, options2) {
      if (!options2)
        options2 = {};
      let object = {};
      if (options2.arrays || options2.defaults)
        object.proof = [];
      if (options2.defaults) {
        if (options2.bytes === String)
          object.encodedRelaychainHeaders = "";
        else {
          object.encodedRelaychainHeaders = [];
          if (options2.bytes !== Array)
            object.encodedRelaychainHeaders = $util.newBuffer(object.encodedRelaychainHeaders);
        }
        if (options2.bytes === String)
          object.encodedParachainHeaders = "";
        else {
          object.encodedParachainHeaders = [];
          if (options2.bytes !== Array)
            object.encodedParachainHeaders = $util.newBuffer(object.encodedParachainHeaders);
        }
      }
      if (message.encodedRelaychainHeaders != null && message.hasOwnProperty("encodedRelaychainHeaders"))
        object.encodedRelaychainHeaders = options2.bytes === String ? $util.base64.encode(message.encodedRelaychainHeaders, 0, message.encodedRelaychainHeaders.length) : options2.bytes === Array ? Array.prototype.slice.call(message.encodedRelaychainHeaders) : message.encodedRelaychainHeaders;
      if (message.authoritySetChange != null && message.hasOwnProperty("authoritySetChange")) {
        object.authoritySetChange = options2.bytes === String ? $util.base64.encode(message.authoritySetChange, 0, message.authoritySetChange.length) : options2.bytes === Array ? Array.prototype.slice.call(message.authoritySetChange) : message.authoritySetChange;
        if (options2.oneofs)
          object._authoritySetChange = "authoritySetChange";
      }
      if (message.encodedParachainHeaders != null && message.hasOwnProperty("encodedParachainHeaders"))
        object.encodedParachainHeaders = options2.bytes === String ? $util.base64.encode(message.encodedParachainHeaders, 0, message.encodedParachainHeaders.length) : options2.bytes === Array ? Array.prototype.slice.call(message.encodedParachainHeaders) : message.encodedParachainHeaders;
      if (message.proof && message.proof.length) {
        object.proof = [];
        for (let j = 0; j < message.proof.length; ++j)
          object.proof[j] = options2.bytes === String ? $util.base64.encode(message.proof[j], 0, message.proof[j].length) : options2.bytes === Array ? Array.prototype.slice.call(message.proof[j]) : message.proof[j];
      }
      return object;
    };
    CombinedHeadersToSync.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return CombinedHeadersToSync;
  }();
  pruntime_rpc2.HeadersSyncedTo = function() {
    function HeadersSyncedTo(properties) {
      if (properties) {
        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          if (properties[keys[i]] != null)
            this[keys[i]] = properties[keys[i]];
      }
    }
    HeadersSyncedTo.prototype.relaychainSyncedTo = 0;
    HeadersSyncedTo.prototype.parachainSyncedTo = 0;
    HeadersSyncedTo.create = function create2(properties) {
      return new HeadersSyncedTo(properties);
    };
    HeadersSyncedTo.encode = function encode(message, writer) {
      if (!writer)
        writer = $Writer.create();
      if (message.relaychainSyncedTo != null && Object.hasOwnProperty.call(message, "relaychainSyncedTo"))
        writer.uint32(
          /* id 1, wireType 0 =*/
          8
        ).uint32(message.relaychainSyncedTo);
      if (message.parachainSyncedTo != null && Object.hasOwnProperty.call(message, "parachainSyncedTo"))
        writer.uint32(
          /* id 2, wireType 0 =*/
          16
        ).uint32(message.parachainSyncedTo);
      return writer;
    };
    HeadersSyncedTo.encodeDelimited = function encodeDelimited(message, writer) {
      return this.encode(message, writer).ldelim();
    };
    HeadersSyncedTo.decode = function decode(reader, length) {
      if (!(reader instanceof $Reader))
        reader = $Reader.create(reader);
      let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.pruntime_rpc.HeadersSyncedTo();
      while (reader.pos < end) {
        let tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.relaychainSyncedTo = reader.uint32();
            break;
          case 2:
            message.parachainSyncedTo = reader.uint32();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    };
    HeadersSyncedTo.decodeDelimited = function decodeDelimited(reader) {
      if (!(reader instanceof $Reader))
        reader = new $Reader(reader);
      return this.decode(reader, reader.uint32());
    };
    HeadersSyncedTo.verify = function verify(message) {
      if (typeof message !== "object" || message === null)
        return "object expected";
      if (message.relaychainSyncedTo != null && message.hasOwnProperty("relaychainSyncedTo")) {
        if (!$util.isInteger(message.relaychainSyncedTo))
          return "relaychainSyncedTo: integer expected";
      }
      if (message.parachainSyncedTo != null && message.hasOwnProperty("parachainSyncedTo")) {
        if (!$util.isInteger(message.parachainSyncedTo))
          return "parachainSyncedTo: integer expected";
      }
      return null;
    };
    HeadersSyncedTo.fromObject = function fromObject(object) {
      if (object instanceof $root.pruntime_rpc.HeadersSyncedTo)
        return object;
      let message = new $root.pruntime_rpc.HeadersSyncedTo();
      if (object.relaychainSyncedTo != null)
        message.relaychainSyncedTo = object.relaychainSyncedTo >>> 0;
      if (object.parachainSyncedTo != null)
        message.parachainSyncedTo = object.parachainSyncedTo >>> 0;
      return message;
    };
    HeadersSyncedTo.toObject = function toObject(message, options2) {
      if (!options2)
        options2 = {};
      let object = {};
      if (options2.defaults) {
        object.relaychainSyncedTo = 0;
        object.parachainSyncedTo = 0;
      }
      if (message.relaychainSyncedTo != null && message.hasOwnProperty("relaychainSyncedTo"))
        object.relaychainSyncedTo = message.relaychainSyncedTo;
      if (message.parachainSyncedTo != null && message.hasOwnProperty("parachainSyncedTo"))
        object.parachainSyncedTo = message.parachainSyncedTo;
      return object;
    };
    HeadersSyncedTo.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return HeadersSyncedTo;
  }();
  pruntime_rpc2.Blocks = function() {
    function Blocks(properties) {
      if (properties) {
        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          if (properties[keys[i]] != null)
            this[keys[i]] = properties[keys[i]];
      }
    }
    Blocks.prototype.encodedBlocks = $util.newBuffer([]);
    Blocks.create = function create2(properties) {
      return new Blocks(properties);
    };
    Blocks.encode = function encode(message, writer) {
      if (!writer)
        writer = $Writer.create();
      if (message.encodedBlocks != null && Object.hasOwnProperty.call(message, "encodedBlocks"))
        writer.uint32(
          /* id 1, wireType 2 =*/
          10
        ).bytes(message.encodedBlocks);
      return writer;
    };
    Blocks.encodeDelimited = function encodeDelimited(message, writer) {
      return this.encode(message, writer).ldelim();
    };
    Blocks.decode = function decode(reader, length) {
      if (!(reader instanceof $Reader))
        reader = $Reader.create(reader);
      let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.pruntime_rpc.Blocks();
      while (reader.pos < end) {
        let tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.encodedBlocks = reader.bytes();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    };
    Blocks.decodeDelimited = function decodeDelimited(reader) {
      if (!(reader instanceof $Reader))
        reader = new $Reader(reader);
      return this.decode(reader, reader.uint32());
    };
    Blocks.verify = function verify(message) {
      if (typeof message !== "object" || message === null)
        return "object expected";
      if (message.encodedBlocks != null && message.hasOwnProperty("encodedBlocks")) {
        if (!(message.encodedBlocks && typeof message.encodedBlocks.length === "number" || $util.isString(message.encodedBlocks)))
          return "encodedBlocks: buffer expected";
      }
      return null;
    };
    Blocks.fromObject = function fromObject(object) {
      if (object instanceof $root.pruntime_rpc.Blocks)
        return object;
      let message = new $root.pruntime_rpc.Blocks();
      if (object.encodedBlocks != null) {
        if (typeof object.encodedBlocks === "string")
          $util.base64.decode(object.encodedBlocks, message.encodedBlocks = $util.newBuffer($util.base64.length(object.encodedBlocks)), 0);
        else if (object.encodedBlocks.length)
          message.encodedBlocks = object.encodedBlocks;
      }
      return message;
    };
    Blocks.toObject = function toObject(message, options2) {
      if (!options2)
        options2 = {};
      let object = {};
      if (options2.defaults)
        if (options2.bytes === String)
          object.encodedBlocks = "";
        else {
          object.encodedBlocks = [];
          if (options2.bytes !== Array)
            object.encodedBlocks = $util.newBuffer(object.encodedBlocks);
        }
      if (message.encodedBlocks != null && message.hasOwnProperty("encodedBlocks"))
        object.encodedBlocks = options2.bytes === String ? $util.base64.encode(message.encodedBlocks, 0, message.encodedBlocks.length) : options2.bytes === Array ? Array.prototype.slice.call(message.encodedBlocks) : message.encodedBlocks;
      return object;
    };
    Blocks.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return Blocks;
  }();
  pruntime_rpc2.InitRuntimeRequest = function() {
    function InitRuntimeRequest(properties) {
      if (properties) {
        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          if (properties[keys[i]] != null)
            this[keys[i]] = properties[keys[i]];
      }
    }
    InitRuntimeRequest.prototype.skipRa = false;
    InitRuntimeRequest.prototype.encodedGenesisInfo = $util.newBuffer([]);
    InitRuntimeRequest.prototype.debugSetKey = null;
    InitRuntimeRequest.prototype.encodedGenesisState = $util.newBuffer([]);
    InitRuntimeRequest.prototype.encodedOperator = null;
    InitRuntimeRequest.prototype.isParachain = false;
    InitRuntimeRequest.prototype.attestationProvider = null;
    let $oneOfFields;
    Object.defineProperty(InitRuntimeRequest.prototype, "_debugSetKey", {
      get: $util.oneOfGetter($oneOfFields = ["debugSetKey"]),
      set: $util.oneOfSetter($oneOfFields)
    });
    Object.defineProperty(InitRuntimeRequest.prototype, "_encodedOperator", {
      get: $util.oneOfGetter($oneOfFields = ["encodedOperator"]),
      set: $util.oneOfSetter($oneOfFields)
    });
    Object.defineProperty(InitRuntimeRequest.prototype, "_attestationProvider", {
      get: $util.oneOfGetter($oneOfFields = ["attestationProvider"]),
      set: $util.oneOfSetter($oneOfFields)
    });
    InitRuntimeRequest.create = function create2(properties) {
      return new InitRuntimeRequest(properties);
    };
    InitRuntimeRequest.encode = function encode(message, writer) {
      if (!writer)
        writer = $Writer.create();
      if (message.skipRa != null && Object.hasOwnProperty.call(message, "skipRa"))
        writer.uint32(
          /* id 1, wireType 0 =*/
          8
        ).bool(message.skipRa);
      if (message.encodedGenesisInfo != null && Object.hasOwnProperty.call(message, "encodedGenesisInfo"))
        writer.uint32(
          /* id 2, wireType 2 =*/
          18
        ).bytes(message.encodedGenesisInfo);
      if (message.debugSetKey != null && Object.hasOwnProperty.call(message, "debugSetKey"))
        writer.uint32(
          /* id 3, wireType 2 =*/
          26
        ).bytes(message.debugSetKey);
      if (message.encodedGenesisState != null && Object.hasOwnProperty.call(message, "encodedGenesisState"))
        writer.uint32(
          /* id 4, wireType 2 =*/
          34
        ).bytes(message.encodedGenesisState);
      if (message.encodedOperator != null && Object.hasOwnProperty.call(message, "encodedOperator"))
        writer.uint32(
          /* id 5, wireType 2 =*/
          42
        ).bytes(message.encodedOperator);
      if (message.isParachain != null && Object.hasOwnProperty.call(message, "isParachain"))
        writer.uint32(
          /* id 6, wireType 0 =*/
          48
        ).bool(message.isParachain);
      if (message.attestationProvider != null && Object.hasOwnProperty.call(message, "attestationProvider"))
        writer.uint32(
          /* id 7, wireType 2 =*/
          58
        ).bytes(message.attestationProvider);
      return writer;
    };
    InitRuntimeRequest.encodeDelimited = function encodeDelimited(message, writer) {
      return this.encode(message, writer).ldelim();
    };
    InitRuntimeRequest.decode = function decode(reader, length) {
      if (!(reader instanceof $Reader))
        reader = $Reader.create(reader);
      let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.pruntime_rpc.InitRuntimeRequest();
      while (reader.pos < end) {
        let tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.skipRa = reader.bool();
            break;
          case 2:
            message.encodedGenesisInfo = reader.bytes();
            break;
          case 3:
            message.debugSetKey = reader.bytes();
            break;
          case 4:
            message.encodedGenesisState = reader.bytes();
            break;
          case 5:
            message.encodedOperator = reader.bytes();
            break;
          case 6:
            message.isParachain = reader.bool();
            break;
          case 7:
            message.attestationProvider = reader.bytes();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    };
    InitRuntimeRequest.decodeDelimited = function decodeDelimited(reader) {
      if (!(reader instanceof $Reader))
        reader = new $Reader(reader);
      return this.decode(reader, reader.uint32());
    };
    InitRuntimeRequest.verify = function verify(message) {
      if (typeof message !== "object" || message === null)
        return "object expected";
      let properties = {};
      if (message.skipRa != null && message.hasOwnProperty("skipRa")) {
        if (typeof message.skipRa !== "boolean")
          return "skipRa: boolean expected";
      }
      if (message.encodedGenesisInfo != null && message.hasOwnProperty("encodedGenesisInfo")) {
        if (!(message.encodedGenesisInfo && typeof message.encodedGenesisInfo.length === "number" || $util.isString(message.encodedGenesisInfo)))
          return "encodedGenesisInfo: buffer expected";
      }
      if (message.debugSetKey != null && message.hasOwnProperty("debugSetKey")) {
        properties._debugSetKey = 1;
        if (!(message.debugSetKey && typeof message.debugSetKey.length === "number" || $util.isString(message.debugSetKey)))
          return "debugSetKey: buffer expected";
      }
      if (message.encodedGenesisState != null && message.hasOwnProperty("encodedGenesisState")) {
        if (!(message.encodedGenesisState && typeof message.encodedGenesisState.length === "number" || $util.isString(message.encodedGenesisState)))
          return "encodedGenesisState: buffer expected";
      }
      if (message.encodedOperator != null && message.hasOwnProperty("encodedOperator")) {
        properties._encodedOperator = 1;
        if (!(message.encodedOperator && typeof message.encodedOperator.length === "number" || $util.isString(message.encodedOperator)))
          return "encodedOperator: buffer expected";
      }
      if (message.isParachain != null && message.hasOwnProperty("isParachain")) {
        if (typeof message.isParachain !== "boolean")
          return "isParachain: boolean expected";
      }
      if (message.attestationProvider != null && message.hasOwnProperty("attestationProvider")) {
        properties._attestationProvider = 1;
        if (!(message.attestationProvider && typeof message.attestationProvider.length === "number" || $util.isString(message.attestationProvider)))
          return "attestationProvider: buffer expected";
      }
      return null;
    };
    InitRuntimeRequest.fromObject = function fromObject(object) {
      if (object instanceof $root.pruntime_rpc.InitRuntimeRequest)
        return object;
      let message = new $root.pruntime_rpc.InitRuntimeRequest();
      if (object.skipRa != null)
        message.skipRa = Boolean(object.skipRa);
      if (object.encodedGenesisInfo != null) {
        if (typeof object.encodedGenesisInfo === "string")
          $util.base64.decode(object.encodedGenesisInfo, message.encodedGenesisInfo = $util.newBuffer($util.base64.length(object.encodedGenesisInfo)), 0);
        else if (object.encodedGenesisInfo.length)
          message.encodedGenesisInfo = object.encodedGenesisInfo;
      }
      if (object.debugSetKey != null) {
        if (typeof object.debugSetKey === "string")
          $util.base64.decode(object.debugSetKey, message.debugSetKey = $util.newBuffer($util.base64.length(object.debugSetKey)), 0);
        else if (object.debugSetKey.length)
          message.debugSetKey = object.debugSetKey;
      }
      if (object.encodedGenesisState != null) {
        if (typeof object.encodedGenesisState === "string")
          $util.base64.decode(object.encodedGenesisState, message.encodedGenesisState = $util.newBuffer($util.base64.length(object.encodedGenesisState)), 0);
        else if (object.encodedGenesisState.length)
          message.encodedGenesisState = object.encodedGenesisState;
      }
      if (object.encodedOperator != null) {
        if (typeof object.encodedOperator === "string")
          $util.base64.decode(object.encodedOperator, message.encodedOperator = $util.newBuffer($util.base64.length(object.encodedOperator)), 0);
        else if (object.encodedOperator.length)
          message.encodedOperator = object.encodedOperator;
      }
      if (object.isParachain != null)
        message.isParachain = Boolean(object.isParachain);
      if (object.attestationProvider != null) {
        if (typeof object.attestationProvider === "string")
          $util.base64.decode(object.attestationProvider, message.attestationProvider = $util.newBuffer($util.base64.length(object.attestationProvider)), 0);
        else if (object.attestationProvider.length)
          message.attestationProvider = object.attestationProvider;
      }
      return message;
    };
    InitRuntimeRequest.toObject = function toObject(message, options2) {
      if (!options2)
        options2 = {};
      let object = {};
      if (options2.defaults) {
        object.skipRa = false;
        if (options2.bytes === String)
          object.encodedGenesisInfo = "";
        else {
          object.encodedGenesisInfo = [];
          if (options2.bytes !== Array)
            object.encodedGenesisInfo = $util.newBuffer(object.encodedGenesisInfo);
        }
        if (options2.bytes === String)
          object.encodedGenesisState = "";
        else {
          object.encodedGenesisState = [];
          if (options2.bytes !== Array)
            object.encodedGenesisState = $util.newBuffer(object.encodedGenesisState);
        }
        object.isParachain = false;
      }
      if (message.skipRa != null && message.hasOwnProperty("skipRa"))
        object.skipRa = message.skipRa;
      if (message.encodedGenesisInfo != null && message.hasOwnProperty("encodedGenesisInfo"))
        object.encodedGenesisInfo = options2.bytes === String ? $util.base64.encode(message.encodedGenesisInfo, 0, message.encodedGenesisInfo.length) : options2.bytes === Array ? Array.prototype.slice.call(message.encodedGenesisInfo) : message.encodedGenesisInfo;
      if (message.debugSetKey != null && message.hasOwnProperty("debugSetKey")) {
        object.debugSetKey = options2.bytes === String ? $util.base64.encode(message.debugSetKey, 0, message.debugSetKey.length) : options2.bytes === Array ? Array.prototype.slice.call(message.debugSetKey) : message.debugSetKey;
        if (options2.oneofs)
          object._debugSetKey = "debugSetKey";
      }
      if (message.encodedGenesisState != null && message.hasOwnProperty("encodedGenesisState"))
        object.encodedGenesisState = options2.bytes === String ? $util.base64.encode(message.encodedGenesisState, 0, message.encodedGenesisState.length) : options2.bytes === Array ? Array.prototype.slice.call(message.encodedGenesisState) : message.encodedGenesisState;
      if (message.encodedOperator != null && message.hasOwnProperty("encodedOperator")) {
        object.encodedOperator = options2.bytes === String ? $util.base64.encode(message.encodedOperator, 0, message.encodedOperator.length) : options2.bytes === Array ? Array.prototype.slice.call(message.encodedOperator) : message.encodedOperator;
        if (options2.oneofs)
          object._encodedOperator = "encodedOperator";
      }
      if (message.isParachain != null && message.hasOwnProperty("isParachain"))
        object.isParachain = message.isParachain;
      if (message.attestationProvider != null && message.hasOwnProperty("attestationProvider")) {
        object.attestationProvider = options2.bytes === String ? $util.base64.encode(message.attestationProvider, 0, message.attestationProvider.length) : options2.bytes === Array ? Array.prototype.slice.call(message.attestationProvider) : message.attestationProvider;
        if (options2.oneofs)
          object._attestationProvider = "attestationProvider";
      }
      return object;
    };
    InitRuntimeRequest.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return InitRuntimeRequest;
  }();
  pruntime_rpc2.GetRuntimeInfoRequest = function() {
    function GetRuntimeInfoRequest(properties) {
      if (properties) {
        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          if (properties[keys[i]] != null)
            this[keys[i]] = properties[keys[i]];
      }
    }
    GetRuntimeInfoRequest.prototype.forceRefreshRa = false;
    GetRuntimeInfoRequest.prototype.encodedOperator = null;
    let $oneOfFields;
    Object.defineProperty(GetRuntimeInfoRequest.prototype, "_encodedOperator", {
      get: $util.oneOfGetter($oneOfFields = ["encodedOperator"]),
      set: $util.oneOfSetter($oneOfFields)
    });
    GetRuntimeInfoRequest.create = function create2(properties) {
      return new GetRuntimeInfoRequest(properties);
    };
    GetRuntimeInfoRequest.encode = function encode(message, writer) {
      if (!writer)
        writer = $Writer.create();
      if (message.forceRefreshRa != null && Object.hasOwnProperty.call(message, "forceRefreshRa"))
        writer.uint32(
          /* id 1, wireType 0 =*/
          8
        ).bool(message.forceRefreshRa);
      if (message.encodedOperator != null && Object.hasOwnProperty.call(message, "encodedOperator"))
        writer.uint32(
          /* id 2, wireType 2 =*/
          18
        ).bytes(message.encodedOperator);
      return writer;
    };
    GetRuntimeInfoRequest.encodeDelimited = function encodeDelimited(message, writer) {
      return this.encode(message, writer).ldelim();
    };
    GetRuntimeInfoRequest.decode = function decode(reader, length) {
      if (!(reader instanceof $Reader))
        reader = $Reader.create(reader);
      let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.pruntime_rpc.GetRuntimeInfoRequest();
      while (reader.pos < end) {
        let tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.forceRefreshRa = reader.bool();
            break;
          case 2:
            message.encodedOperator = reader.bytes();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    };
    GetRuntimeInfoRequest.decodeDelimited = function decodeDelimited(reader) {
      if (!(reader instanceof $Reader))
        reader = new $Reader(reader);
      return this.decode(reader, reader.uint32());
    };
    GetRuntimeInfoRequest.verify = function verify(message) {
      if (typeof message !== "object" || message === null)
        return "object expected";
      let properties = {};
      if (message.forceRefreshRa != null && message.hasOwnProperty("forceRefreshRa")) {
        if (typeof message.forceRefreshRa !== "boolean")
          return "forceRefreshRa: boolean expected";
      }
      if (message.encodedOperator != null && message.hasOwnProperty("encodedOperator")) {
        properties._encodedOperator = 1;
        if (!(message.encodedOperator && typeof message.encodedOperator.length === "number" || $util.isString(message.encodedOperator)))
          return "encodedOperator: buffer expected";
      }
      return null;
    };
    GetRuntimeInfoRequest.fromObject = function fromObject(object) {
      if (object instanceof $root.pruntime_rpc.GetRuntimeInfoRequest)
        return object;
      let message = new $root.pruntime_rpc.GetRuntimeInfoRequest();
      if (object.forceRefreshRa != null)
        message.forceRefreshRa = Boolean(object.forceRefreshRa);
      if (object.encodedOperator != null) {
        if (typeof object.encodedOperator === "string")
          $util.base64.decode(object.encodedOperator, message.encodedOperator = $util.newBuffer($util.base64.length(object.encodedOperator)), 0);
        else if (object.encodedOperator.length)
          message.encodedOperator = object.encodedOperator;
      }
      return message;
    };
    GetRuntimeInfoRequest.toObject = function toObject(message, options2) {
      if (!options2)
        options2 = {};
      let object = {};
      if (options2.defaults)
        object.forceRefreshRa = false;
      if (message.forceRefreshRa != null && message.hasOwnProperty("forceRefreshRa"))
        object.forceRefreshRa = message.forceRefreshRa;
      if (message.encodedOperator != null && message.hasOwnProperty("encodedOperator")) {
        object.encodedOperator = options2.bytes === String ? $util.base64.encode(message.encodedOperator, 0, message.encodedOperator.length) : options2.bytes === Array ? Array.prototype.slice.call(message.encodedOperator) : message.encodedOperator;
        if (options2.oneofs)
          object._encodedOperator = "encodedOperator";
      }
      return object;
    };
    GetRuntimeInfoRequest.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GetRuntimeInfoRequest;
  }();
  pruntime_rpc2.InitRuntimeResponse = function() {
    function InitRuntimeResponse(properties) {
      if (properties) {
        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          if (properties[keys[i]] != null)
            this[keys[i]] = properties[keys[i]];
      }
    }
    InitRuntimeResponse.prototype.encodedRuntimeInfo = $util.newBuffer([]);
    InitRuntimeResponse.prototype.encodedGenesisBlockHash = $util.newBuffer([]);
    InitRuntimeResponse.prototype.encodedPublicKey = $util.newBuffer([]);
    InitRuntimeResponse.prototype.encodedEcdhPublicKey = $util.newBuffer([]);
    InitRuntimeResponse.prototype.attestation = null;
    let $oneOfFields;
    Object.defineProperty(InitRuntimeResponse.prototype, "_attestation", {
      get: $util.oneOfGetter($oneOfFields = ["attestation"]),
      set: $util.oneOfSetter($oneOfFields)
    });
    InitRuntimeResponse.create = function create2(properties) {
      return new InitRuntimeResponse(properties);
    };
    InitRuntimeResponse.encode = function encode(message, writer) {
      if (!writer)
        writer = $Writer.create();
      if (message.encodedRuntimeInfo != null && Object.hasOwnProperty.call(message, "encodedRuntimeInfo"))
        writer.uint32(
          /* id 1, wireType 2 =*/
          10
        ).bytes(message.encodedRuntimeInfo);
      if (message.encodedGenesisBlockHash != null && Object.hasOwnProperty.call(message, "encodedGenesisBlockHash"))
        writer.uint32(
          /* id 2, wireType 2 =*/
          18
        ).bytes(message.encodedGenesisBlockHash);
      if (message.encodedPublicKey != null && Object.hasOwnProperty.call(message, "encodedPublicKey"))
        writer.uint32(
          /* id 3, wireType 2 =*/
          26
        ).bytes(message.encodedPublicKey);
      if (message.encodedEcdhPublicKey != null && Object.hasOwnProperty.call(message, "encodedEcdhPublicKey"))
        writer.uint32(
          /* id 4, wireType 2 =*/
          34
        ).bytes(message.encodedEcdhPublicKey);
      if (message.attestation != null && Object.hasOwnProperty.call(message, "attestation"))
        $root.pruntime_rpc.Attestation.encode(message.attestation, writer.uint32(
          /* id 5, wireType 2 =*/
          42
        ).fork()).ldelim();
      return writer;
    };
    InitRuntimeResponse.encodeDelimited = function encodeDelimited(message, writer) {
      return this.encode(message, writer).ldelim();
    };
    InitRuntimeResponse.decode = function decode(reader, length) {
      if (!(reader instanceof $Reader))
        reader = $Reader.create(reader);
      let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.pruntime_rpc.InitRuntimeResponse();
      while (reader.pos < end) {
        let tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.encodedRuntimeInfo = reader.bytes();
            break;
          case 2:
            message.encodedGenesisBlockHash = reader.bytes();
            break;
          case 3:
            message.encodedPublicKey = reader.bytes();
            break;
          case 4:
            message.encodedEcdhPublicKey = reader.bytes();
            break;
          case 5:
            message.attestation = $root.pruntime_rpc.Attestation.decode(reader, reader.uint32());
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    };
    InitRuntimeResponse.decodeDelimited = function decodeDelimited(reader) {
      if (!(reader instanceof $Reader))
        reader = new $Reader(reader);
      return this.decode(reader, reader.uint32());
    };
    InitRuntimeResponse.verify = function verify(message) {
      if (typeof message !== "object" || message === null)
        return "object expected";
      let properties = {};
      if (message.encodedRuntimeInfo != null && message.hasOwnProperty("encodedRuntimeInfo")) {
        if (!(message.encodedRuntimeInfo && typeof message.encodedRuntimeInfo.length === "number" || $util.isString(message.encodedRuntimeInfo)))
          return "encodedRuntimeInfo: buffer expected";
      }
      if (message.encodedGenesisBlockHash != null && message.hasOwnProperty("encodedGenesisBlockHash")) {
        if (!(message.encodedGenesisBlockHash && typeof message.encodedGenesisBlockHash.length === "number" || $util.isString(message.encodedGenesisBlockHash)))
          return "encodedGenesisBlockHash: buffer expected";
      }
      if (message.encodedPublicKey != null && message.hasOwnProperty("encodedPublicKey")) {
        if (!(message.encodedPublicKey && typeof message.encodedPublicKey.length === "number" || $util.isString(message.encodedPublicKey)))
          return "encodedPublicKey: buffer expected";
      }
      if (message.encodedEcdhPublicKey != null && message.hasOwnProperty("encodedEcdhPublicKey")) {
        if (!(message.encodedEcdhPublicKey && typeof message.encodedEcdhPublicKey.length === "number" || $util.isString(message.encodedEcdhPublicKey)))
          return "encodedEcdhPublicKey: buffer expected";
      }
      if (message.attestation != null && message.hasOwnProperty("attestation")) {
        properties._attestation = 1;
        {
          let error = $root.pruntime_rpc.Attestation.verify(message.attestation);
          if (error)
            return "attestation." + error;
        }
      }
      return null;
    };
    InitRuntimeResponse.fromObject = function fromObject(object) {
      if (object instanceof $root.pruntime_rpc.InitRuntimeResponse)
        return object;
      let message = new $root.pruntime_rpc.InitRuntimeResponse();
      if (object.encodedRuntimeInfo != null) {
        if (typeof object.encodedRuntimeInfo === "string")
          $util.base64.decode(object.encodedRuntimeInfo, message.encodedRuntimeInfo = $util.newBuffer($util.base64.length(object.encodedRuntimeInfo)), 0);
        else if (object.encodedRuntimeInfo.length)
          message.encodedRuntimeInfo = object.encodedRuntimeInfo;
      }
      if (object.encodedGenesisBlockHash != null) {
        if (typeof object.encodedGenesisBlockHash === "string")
          $util.base64.decode(object.encodedGenesisBlockHash, message.encodedGenesisBlockHash = $util.newBuffer($util.base64.length(object.encodedGenesisBlockHash)), 0);
        else if (object.encodedGenesisBlockHash.length)
          message.encodedGenesisBlockHash = object.encodedGenesisBlockHash;
      }
      if (object.encodedPublicKey != null) {
        if (typeof object.encodedPublicKey === "string")
          $util.base64.decode(object.encodedPublicKey, message.encodedPublicKey = $util.newBuffer($util.base64.length(object.encodedPublicKey)), 0);
        else if (object.encodedPublicKey.length)
          message.encodedPublicKey = object.encodedPublicKey;
      }
      if (object.encodedEcdhPublicKey != null) {
        if (typeof object.encodedEcdhPublicKey === "string")
          $util.base64.decode(object.encodedEcdhPublicKey, message.encodedEcdhPublicKey = $util.newBuffer($util.base64.length(object.encodedEcdhPublicKey)), 0);
        else if (object.encodedEcdhPublicKey.length)
          message.encodedEcdhPublicKey = object.encodedEcdhPublicKey;
      }
      if (object.attestation != null) {
        if (typeof object.attestation !== "object")
          throw TypeError(".pruntime_rpc.InitRuntimeResponse.attestation: object expected");
        message.attestation = $root.pruntime_rpc.Attestation.fromObject(object.attestation);
      }
      return message;
    };
    InitRuntimeResponse.toObject = function toObject(message, options2) {
      if (!options2)
        options2 = {};
      let object = {};
      if (options2.defaults) {
        if (options2.bytes === String)
          object.encodedRuntimeInfo = "";
        else {
          object.encodedRuntimeInfo = [];
          if (options2.bytes !== Array)
            object.encodedRuntimeInfo = $util.newBuffer(object.encodedRuntimeInfo);
        }
        if (options2.bytes === String)
          object.encodedGenesisBlockHash = "";
        else {
          object.encodedGenesisBlockHash = [];
          if (options2.bytes !== Array)
            object.encodedGenesisBlockHash = $util.newBuffer(object.encodedGenesisBlockHash);
        }
        if (options2.bytes === String)
          object.encodedPublicKey = "";
        else {
          object.encodedPublicKey = [];
          if (options2.bytes !== Array)
            object.encodedPublicKey = $util.newBuffer(object.encodedPublicKey);
        }
        if (options2.bytes === String)
          object.encodedEcdhPublicKey = "";
        else {
          object.encodedEcdhPublicKey = [];
          if (options2.bytes !== Array)
            object.encodedEcdhPublicKey = $util.newBuffer(object.encodedEcdhPublicKey);
        }
      }
      if (message.encodedRuntimeInfo != null && message.hasOwnProperty("encodedRuntimeInfo"))
        object.encodedRuntimeInfo = options2.bytes === String ? $util.base64.encode(message.encodedRuntimeInfo, 0, message.encodedRuntimeInfo.length) : options2.bytes === Array ? Array.prototype.slice.call(message.encodedRuntimeInfo) : message.encodedRuntimeInfo;
      if (message.encodedGenesisBlockHash != null && message.hasOwnProperty("encodedGenesisBlockHash"))
        object.encodedGenesisBlockHash = options2.bytes === String ? $util.base64.encode(message.encodedGenesisBlockHash, 0, message.encodedGenesisBlockHash.length) : options2.bytes === Array ? Array.prototype.slice.call(message.encodedGenesisBlockHash) : message.encodedGenesisBlockHash;
      if (message.encodedPublicKey != null && message.hasOwnProperty("encodedPublicKey"))
        object.encodedPublicKey = options2.bytes === String ? $util.base64.encode(message.encodedPublicKey, 0, message.encodedPublicKey.length) : options2.bytes === Array ? Array.prototype.slice.call(message.encodedPublicKey) : message.encodedPublicKey;
      if (message.encodedEcdhPublicKey != null && message.hasOwnProperty("encodedEcdhPublicKey"))
        object.encodedEcdhPublicKey = options2.bytes === String ? $util.base64.encode(message.encodedEcdhPublicKey, 0, message.encodedEcdhPublicKey.length) : options2.bytes === Array ? Array.prototype.slice.call(message.encodedEcdhPublicKey) : message.encodedEcdhPublicKey;
      if (message.attestation != null && message.hasOwnProperty("attestation")) {
        object.attestation = $root.pruntime_rpc.Attestation.toObject(message.attestation, options2);
        if (options2.oneofs)
          object._attestation = "attestation";
      }
      return object;
    };
    InitRuntimeResponse.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return InitRuntimeResponse;
  }();
  pruntime_rpc2.Attestation = function() {
    function Attestation(properties) {
      if (properties) {
        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          if (properties[keys[i]] != null)
            this[keys[i]] = properties[keys[i]];
      }
    }
    Attestation.prototype.version = 0;
    Attestation.prototype.provider = "";
    Attestation.prototype.payload = null;
    Attestation.prototype.encodedReport = $util.newBuffer([]);
    Attestation.prototype.timestamp = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
    Attestation.create = function create2(properties) {
      return new Attestation(properties);
    };
    Attestation.encode = function encode(message, writer) {
      if (!writer)
        writer = $Writer.create();
      if (message.version != null && Object.hasOwnProperty.call(message, "version"))
        writer.uint32(
          /* id 1, wireType 0 =*/
          8
        ).int32(message.version);
      if (message.provider != null && Object.hasOwnProperty.call(message, "provider"))
        writer.uint32(
          /* id 2, wireType 2 =*/
          18
        ).string(message.provider);
      if (message.payload != null && Object.hasOwnProperty.call(message, "payload"))
        $root.pruntime_rpc.AttestationReport.encode(message.payload, writer.uint32(
          /* id 3, wireType 2 =*/
          26
        ).fork()).ldelim();
      if (message.timestamp != null && Object.hasOwnProperty.call(message, "timestamp"))
        writer.uint32(
          /* id 4, wireType 0 =*/
          32
        ).uint64(message.timestamp);
      if (message.encodedReport != null && Object.hasOwnProperty.call(message, "encodedReport"))
        writer.uint32(
          /* id 5, wireType 2 =*/
          42
        ).bytes(message.encodedReport);
      return writer;
    };
    Attestation.encodeDelimited = function encodeDelimited(message, writer) {
      return this.encode(message, writer).ldelim();
    };
    Attestation.decode = function decode(reader, length) {
      if (!(reader instanceof $Reader))
        reader = $Reader.create(reader);
      let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.pruntime_rpc.Attestation();
      while (reader.pos < end) {
        let tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.version = reader.int32();
            break;
          case 2:
            message.provider = reader.string();
            break;
          case 3:
            message.payload = $root.pruntime_rpc.AttestationReport.decode(reader, reader.uint32());
            break;
          case 5:
            message.encodedReport = reader.bytes();
            break;
          case 4:
            message.timestamp = reader.uint64();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    };
    Attestation.decodeDelimited = function decodeDelimited(reader) {
      if (!(reader instanceof $Reader))
        reader = new $Reader(reader);
      return this.decode(reader, reader.uint32());
    };
    Attestation.verify = function verify(message) {
      if (typeof message !== "object" || message === null)
        return "object expected";
      if (message.version != null && message.hasOwnProperty("version")) {
        if (!$util.isInteger(message.version))
          return "version: integer expected";
      }
      if (message.provider != null && message.hasOwnProperty("provider")) {
        if (!$util.isString(message.provider))
          return "provider: string expected";
      }
      if (message.payload != null && message.hasOwnProperty("payload")) {
        let error = $root.pruntime_rpc.AttestationReport.verify(message.payload);
        if (error)
          return "payload." + error;
      }
      if (message.encodedReport != null && message.hasOwnProperty("encodedReport")) {
        if (!(message.encodedReport && typeof message.encodedReport.length === "number" || $util.isString(message.encodedReport)))
          return "encodedReport: buffer expected";
      }
      if (message.timestamp != null && message.hasOwnProperty("timestamp")) {
        if (!$util.isInteger(message.timestamp) && !(message.timestamp && $util.isInteger(message.timestamp.low) && $util.isInteger(message.timestamp.high)))
          return "timestamp: integer|Long expected";
      }
      return null;
    };
    Attestation.fromObject = function fromObject(object) {
      if (object instanceof $root.pruntime_rpc.Attestation)
        return object;
      let message = new $root.pruntime_rpc.Attestation();
      if (object.version != null)
        message.version = object.version | 0;
      if (object.provider != null)
        message.provider = String(object.provider);
      if (object.payload != null) {
        if (typeof object.payload !== "object")
          throw TypeError(".pruntime_rpc.Attestation.payload: object expected");
        message.payload = $root.pruntime_rpc.AttestationReport.fromObject(object.payload);
      }
      if (object.encodedReport != null) {
        if (typeof object.encodedReport === "string")
          $util.base64.decode(object.encodedReport, message.encodedReport = $util.newBuffer($util.base64.length(object.encodedReport)), 0);
        else if (object.encodedReport.length)
          message.encodedReport = object.encodedReport;
      }
      if (object.timestamp != null) {
        if ($util.Long)
          (message.timestamp = $util.Long.fromValue(object.timestamp)).unsigned = true;
        else if (typeof object.timestamp === "string")
          message.timestamp = parseInt(object.timestamp, 10);
        else if (typeof object.timestamp === "number")
          message.timestamp = object.timestamp;
        else if (typeof object.timestamp === "object")
          message.timestamp = new $util.LongBits(object.timestamp.low >>> 0, object.timestamp.high >>> 0).toNumber(true);
      }
      return message;
    };
    Attestation.toObject = function toObject(message, options2) {
      if (!options2)
        options2 = {};
      let object = {};
      if (options2.defaults) {
        object.version = 0;
        object.provider = "";
        object.payload = null;
        if ($util.Long) {
          let long = new $util.Long(0, 0, true);
          object.timestamp = options2.longs === String ? long.toString() : options2.longs === Number ? long.toNumber() : long;
        } else
          object.timestamp = options2.longs === String ? "0" : 0;
        if (options2.bytes === String)
          object.encodedReport = "";
        else {
          object.encodedReport = [];
          if (options2.bytes !== Array)
            object.encodedReport = $util.newBuffer(object.encodedReport);
        }
      }
      if (message.version != null && message.hasOwnProperty("version"))
        object.version = message.version;
      if (message.provider != null && message.hasOwnProperty("provider"))
        object.provider = message.provider;
      if (message.payload != null && message.hasOwnProperty("payload"))
        object.payload = $root.pruntime_rpc.AttestationReport.toObject(message.payload, options2);
      if (message.timestamp != null && message.hasOwnProperty("timestamp"))
        if (typeof message.timestamp === "number")
          object.timestamp = options2.longs === String ? String(message.timestamp) : message.timestamp;
        else
          object.timestamp = options2.longs === String ? $util.Long.prototype.toString.call(message.timestamp) : options2.longs === Number ? new $util.LongBits(message.timestamp.low >>> 0, message.timestamp.high >>> 0).toNumber(true) : message.timestamp;
      if (message.encodedReport != null && message.hasOwnProperty("encodedReport"))
        object.encodedReport = options2.bytes === String ? $util.base64.encode(message.encodedReport, 0, message.encodedReport.length) : options2.bytes === Array ? Array.prototype.slice.call(message.encodedReport) : message.encodedReport;
      return object;
    };
    Attestation.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return Attestation;
  }();
  pruntime_rpc2.AttestationReport = function() {
    function AttestationReport(properties) {
      if (properties) {
        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          if (properties[keys[i]] != null)
            this[keys[i]] = properties[keys[i]];
      }
    }
    AttestationReport.prototype.report = "";
    AttestationReport.prototype.signature = $util.newBuffer([]);
    AttestationReport.prototype.signingCert = $util.newBuffer([]);
    AttestationReport.create = function create2(properties) {
      return new AttestationReport(properties);
    };
    AttestationReport.encode = function encode(message, writer) {
      if (!writer)
        writer = $Writer.create();
      if (message.report != null && Object.hasOwnProperty.call(message, "report"))
        writer.uint32(
          /* id 1, wireType 2 =*/
          10
        ).string(message.report);
      if (message.signature != null && Object.hasOwnProperty.call(message, "signature"))
        writer.uint32(
          /* id 2, wireType 2 =*/
          18
        ).bytes(message.signature);
      if (message.signingCert != null && Object.hasOwnProperty.call(message, "signingCert"))
        writer.uint32(
          /* id 3, wireType 2 =*/
          26
        ).bytes(message.signingCert);
      return writer;
    };
    AttestationReport.encodeDelimited = function encodeDelimited(message, writer) {
      return this.encode(message, writer).ldelim();
    };
    AttestationReport.decode = function decode(reader, length) {
      if (!(reader instanceof $Reader))
        reader = $Reader.create(reader);
      let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.pruntime_rpc.AttestationReport();
      while (reader.pos < end) {
        let tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.report = reader.string();
            break;
          case 2:
            message.signature = reader.bytes();
            break;
          case 3:
            message.signingCert = reader.bytes();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    };
    AttestationReport.decodeDelimited = function decodeDelimited(reader) {
      if (!(reader instanceof $Reader))
        reader = new $Reader(reader);
      return this.decode(reader, reader.uint32());
    };
    AttestationReport.verify = function verify(message) {
      if (typeof message !== "object" || message === null)
        return "object expected";
      if (message.report != null && message.hasOwnProperty("report")) {
        if (!$util.isString(message.report))
          return "report: string expected";
      }
      if (message.signature != null && message.hasOwnProperty("signature")) {
        if (!(message.signature && typeof message.signature.length === "number" || $util.isString(message.signature)))
          return "signature: buffer expected";
      }
      if (message.signingCert != null && message.hasOwnProperty("signingCert")) {
        if (!(message.signingCert && typeof message.signingCert.length === "number" || $util.isString(message.signingCert)))
          return "signingCert: buffer expected";
      }
      return null;
    };
    AttestationReport.fromObject = function fromObject(object) {
      if (object instanceof $root.pruntime_rpc.AttestationReport)
        return object;
      let message = new $root.pruntime_rpc.AttestationReport();
      if (object.report != null)
        message.report = String(object.report);
      if (object.signature != null) {
        if (typeof object.signature === "string")
          $util.base64.decode(object.signature, message.signature = $util.newBuffer($util.base64.length(object.signature)), 0);
        else if (object.signature.length)
          message.signature = object.signature;
      }
      if (object.signingCert != null) {
        if (typeof object.signingCert === "string")
          $util.base64.decode(object.signingCert, message.signingCert = $util.newBuffer($util.base64.length(object.signingCert)), 0);
        else if (object.signingCert.length)
          message.signingCert = object.signingCert;
      }
      return message;
    };
    AttestationReport.toObject = function toObject(message, options2) {
      if (!options2)
        options2 = {};
      let object = {};
      if (options2.defaults) {
        object.report = "";
        if (options2.bytes === String)
          object.signature = "";
        else {
          object.signature = [];
          if (options2.bytes !== Array)
            object.signature = $util.newBuffer(object.signature);
        }
        if (options2.bytes === String)
          object.signingCert = "";
        else {
          object.signingCert = [];
          if (options2.bytes !== Array)
            object.signingCert = $util.newBuffer(object.signingCert);
        }
      }
      if (message.report != null && message.hasOwnProperty("report"))
        object.report = message.report;
      if (message.signature != null && message.hasOwnProperty("signature"))
        object.signature = options2.bytes === String ? $util.base64.encode(message.signature, 0, message.signature.length) : options2.bytes === Array ? Array.prototype.slice.call(message.signature) : message.signature;
      if (message.signingCert != null && message.hasOwnProperty("signingCert"))
        object.signingCert = options2.bytes === String ? $util.base64.encode(message.signingCert, 0, message.signingCert.length) : options2.bytes === Array ? Array.prototype.slice.call(message.signingCert) : message.signingCert;
      return object;
    };
    AttestationReport.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return AttestationReport;
  }();
  pruntime_rpc2.GetEgressMessagesResponse = function() {
    function GetEgressMessagesResponse(properties) {
      if (properties) {
        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          if (properties[keys[i]] != null)
            this[keys[i]] = properties[keys[i]];
      }
    }
    GetEgressMessagesResponse.prototype.encodedMessages = $util.newBuffer([]);
    GetEgressMessagesResponse.create = function create2(properties) {
      return new GetEgressMessagesResponse(properties);
    };
    GetEgressMessagesResponse.encode = function encode(message, writer) {
      if (!writer)
        writer = $Writer.create();
      if (message.encodedMessages != null && Object.hasOwnProperty.call(message, "encodedMessages"))
        writer.uint32(
          /* id 1, wireType 2 =*/
          10
        ).bytes(message.encodedMessages);
      return writer;
    };
    GetEgressMessagesResponse.encodeDelimited = function encodeDelimited(message, writer) {
      return this.encode(message, writer).ldelim();
    };
    GetEgressMessagesResponse.decode = function decode(reader, length) {
      if (!(reader instanceof $Reader))
        reader = $Reader.create(reader);
      let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.pruntime_rpc.GetEgressMessagesResponse();
      while (reader.pos < end) {
        let tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.encodedMessages = reader.bytes();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    };
    GetEgressMessagesResponse.decodeDelimited = function decodeDelimited(reader) {
      if (!(reader instanceof $Reader))
        reader = new $Reader(reader);
      return this.decode(reader, reader.uint32());
    };
    GetEgressMessagesResponse.verify = function verify(message) {
      if (typeof message !== "object" || message === null)
        return "object expected";
      if (message.encodedMessages != null && message.hasOwnProperty("encodedMessages")) {
        if (!(message.encodedMessages && typeof message.encodedMessages.length === "number" || $util.isString(message.encodedMessages)))
          return "encodedMessages: buffer expected";
      }
      return null;
    };
    GetEgressMessagesResponse.fromObject = function fromObject(object) {
      if (object instanceof $root.pruntime_rpc.GetEgressMessagesResponse)
        return object;
      let message = new $root.pruntime_rpc.GetEgressMessagesResponse();
      if (object.encodedMessages != null) {
        if (typeof object.encodedMessages === "string")
          $util.base64.decode(object.encodedMessages, message.encodedMessages = $util.newBuffer($util.base64.length(object.encodedMessages)), 0);
        else if (object.encodedMessages.length)
          message.encodedMessages = object.encodedMessages;
      }
      return message;
    };
    GetEgressMessagesResponse.toObject = function toObject(message, options2) {
      if (!options2)
        options2 = {};
      let object = {};
      if (options2.defaults)
        if (options2.bytes === String)
          object.encodedMessages = "";
        else {
          object.encodedMessages = [];
          if (options2.bytes !== Array)
            object.encodedMessages = $util.newBuffer(object.encodedMessages);
        }
      if (message.encodedMessages != null && message.hasOwnProperty("encodedMessages"))
        object.encodedMessages = options2.bytes === String ? $util.base64.encode(message.encodedMessages, 0, message.encodedMessages.length) : options2.bytes === Array ? Array.prototype.slice.call(message.encodedMessages) : message.encodedMessages;
      return object;
    };
    GetEgressMessagesResponse.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GetEgressMessagesResponse;
  }();
  pruntime_rpc2.ContractQueryRequest = function() {
    function ContractQueryRequest(properties) {
      if (properties) {
        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          if (properties[keys[i]] != null)
            this[keys[i]] = properties[keys[i]];
      }
    }
    ContractQueryRequest.prototype.encodedEncryptedData = $util.newBuffer([]);
    ContractQueryRequest.prototype.signature = null;
    ContractQueryRequest.create = function create2(properties) {
      return new ContractQueryRequest(properties);
    };
    ContractQueryRequest.encode = function encode(message, writer) {
      if (!writer)
        writer = $Writer.create();
      if (message.encodedEncryptedData != null && Object.hasOwnProperty.call(message, "encodedEncryptedData"))
        writer.uint32(
          /* id 1, wireType 2 =*/
          10
        ).bytes(message.encodedEncryptedData);
      if (message.signature != null && Object.hasOwnProperty.call(message, "signature"))
        $root.pruntime_rpc.Signature.encode(message.signature, writer.uint32(
          /* id 2, wireType 2 =*/
          18
        ).fork()).ldelim();
      return writer;
    };
    ContractQueryRequest.encodeDelimited = function encodeDelimited(message, writer) {
      return this.encode(message, writer).ldelim();
    };
    ContractQueryRequest.decode = function decode(reader, length) {
      if (!(reader instanceof $Reader))
        reader = $Reader.create(reader);
      let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.pruntime_rpc.ContractQueryRequest();
      while (reader.pos < end) {
        let tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.encodedEncryptedData = reader.bytes();
            break;
          case 2:
            message.signature = $root.pruntime_rpc.Signature.decode(reader, reader.uint32());
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    };
    ContractQueryRequest.decodeDelimited = function decodeDelimited(reader) {
      if (!(reader instanceof $Reader))
        reader = new $Reader(reader);
      return this.decode(reader, reader.uint32());
    };
    ContractQueryRequest.verify = function verify(message) {
      if (typeof message !== "object" || message === null)
        return "object expected";
      if (message.encodedEncryptedData != null && message.hasOwnProperty("encodedEncryptedData")) {
        if (!(message.encodedEncryptedData && typeof message.encodedEncryptedData.length === "number" || $util.isString(message.encodedEncryptedData)))
          return "encodedEncryptedData: buffer expected";
      }
      if (message.signature != null && message.hasOwnProperty("signature")) {
        let error = $root.pruntime_rpc.Signature.verify(message.signature);
        if (error)
          return "signature." + error;
      }
      return null;
    };
    ContractQueryRequest.fromObject = function fromObject(object) {
      if (object instanceof $root.pruntime_rpc.ContractQueryRequest)
        return object;
      let message = new $root.pruntime_rpc.ContractQueryRequest();
      if (object.encodedEncryptedData != null) {
        if (typeof object.encodedEncryptedData === "string")
          $util.base64.decode(object.encodedEncryptedData, message.encodedEncryptedData = $util.newBuffer($util.base64.length(object.encodedEncryptedData)), 0);
        else if (object.encodedEncryptedData.length)
          message.encodedEncryptedData = object.encodedEncryptedData;
      }
      if (object.signature != null) {
        if (typeof object.signature !== "object")
          throw TypeError(".pruntime_rpc.ContractQueryRequest.signature: object expected");
        message.signature = $root.pruntime_rpc.Signature.fromObject(object.signature);
      }
      return message;
    };
    ContractQueryRequest.toObject = function toObject(message, options2) {
      if (!options2)
        options2 = {};
      let object = {};
      if (options2.defaults) {
        if (options2.bytes === String)
          object.encodedEncryptedData = "";
        else {
          object.encodedEncryptedData = [];
          if (options2.bytes !== Array)
            object.encodedEncryptedData = $util.newBuffer(object.encodedEncryptedData);
        }
        object.signature = null;
      }
      if (message.encodedEncryptedData != null && message.hasOwnProperty("encodedEncryptedData"))
        object.encodedEncryptedData = options2.bytes === String ? $util.base64.encode(message.encodedEncryptedData, 0, message.encodedEncryptedData.length) : options2.bytes === Array ? Array.prototype.slice.call(message.encodedEncryptedData) : message.encodedEncryptedData;
      if (message.signature != null && message.hasOwnProperty("signature"))
        object.signature = $root.pruntime_rpc.Signature.toObject(message.signature, options2);
      return object;
    };
    ContractQueryRequest.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return ContractQueryRequest;
  }();
  pruntime_rpc2.Signature = function() {
    function Signature(properties) {
      if (properties) {
        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          if (properties[keys[i]] != null)
            this[keys[i]] = properties[keys[i]];
      }
    }
    Signature.prototype.signedBy = null;
    Signature.prototype.signatureType = 0;
    Signature.prototype.signature = $util.newBuffer([]);
    Signature.create = function create2(properties) {
      return new Signature(properties);
    };
    Signature.encode = function encode(message, writer) {
      if (!writer)
        writer = $Writer.create();
      if (message.signedBy != null && Object.hasOwnProperty.call(message, "signedBy"))
        $root.pruntime_rpc.Certificate.encode(message.signedBy, writer.uint32(
          /* id 1, wireType 2 =*/
          10
        ).fork()).ldelim();
      if (message.signatureType != null && Object.hasOwnProperty.call(message, "signatureType"))
        writer.uint32(
          /* id 2, wireType 0 =*/
          16
        ).int32(message.signatureType);
      if (message.signature != null && Object.hasOwnProperty.call(message, "signature"))
        writer.uint32(
          /* id 3, wireType 2 =*/
          26
        ).bytes(message.signature);
      return writer;
    };
    Signature.encodeDelimited = function encodeDelimited(message, writer) {
      return this.encode(message, writer).ldelim();
    };
    Signature.decode = function decode(reader, length) {
      if (!(reader instanceof $Reader))
        reader = $Reader.create(reader);
      let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.pruntime_rpc.Signature();
      while (reader.pos < end) {
        let tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.signedBy = $root.pruntime_rpc.Certificate.decode(reader, reader.uint32());
            break;
          case 2:
            message.signatureType = reader.int32();
            break;
          case 3:
            message.signature = reader.bytes();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    };
    Signature.decodeDelimited = function decodeDelimited(reader) {
      if (!(reader instanceof $Reader))
        reader = new $Reader(reader);
      return this.decode(reader, reader.uint32());
    };
    Signature.verify = function verify(message) {
      if (typeof message !== "object" || message === null)
        return "object expected";
      if (message.signedBy != null && message.hasOwnProperty("signedBy")) {
        let error = $root.pruntime_rpc.Certificate.verify(message.signedBy);
        if (error)
          return "signedBy." + error;
      }
      if (message.signatureType != null && message.hasOwnProperty("signatureType"))
        switch (message.signatureType) {
          default:
            return "signatureType: enum value expected";
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
            break;
        }
      if (message.signature != null && message.hasOwnProperty("signature")) {
        if (!(message.signature && typeof message.signature.length === "number" || $util.isString(message.signature)))
          return "signature: buffer expected";
      }
      return null;
    };
    Signature.fromObject = function fromObject(object) {
      if (object instanceof $root.pruntime_rpc.Signature)
        return object;
      let message = new $root.pruntime_rpc.Signature();
      if (object.signedBy != null) {
        if (typeof object.signedBy !== "object")
          throw TypeError(".pruntime_rpc.Signature.signedBy: object expected");
        message.signedBy = $root.pruntime_rpc.Certificate.fromObject(object.signedBy);
      }
      switch (object.signatureType) {
        case "Ed25519":
        case 0:
          message.signatureType = 0;
          break;
        case "Sr25519":
        case 1:
          message.signatureType = 1;
          break;
        case "Ecdsa":
        case 2:
          message.signatureType = 2;
          break;
        case "Ed25519WrapBytes":
        case 3:
          message.signatureType = 3;
          break;
        case "Sr25519WrapBytes":
        case 4:
          message.signatureType = 4;
          break;
        case "EcdsaWrapBytes":
        case 5:
          message.signatureType = 5;
          break;
      }
      if (object.signature != null) {
        if (typeof object.signature === "string")
          $util.base64.decode(object.signature, message.signature = $util.newBuffer($util.base64.length(object.signature)), 0);
        else if (object.signature.length)
          message.signature = object.signature;
      }
      return message;
    };
    Signature.toObject = function toObject(message, options2) {
      if (!options2)
        options2 = {};
      let object = {};
      if (options2.defaults) {
        object.signedBy = null;
        object.signatureType = options2.enums === String ? "Ed25519" : 0;
        if (options2.bytes === String)
          object.signature = "";
        else {
          object.signature = [];
          if (options2.bytes !== Array)
            object.signature = $util.newBuffer(object.signature);
        }
      }
      if (message.signedBy != null && message.hasOwnProperty("signedBy"))
        object.signedBy = $root.pruntime_rpc.Certificate.toObject(message.signedBy, options2);
      if (message.signatureType != null && message.hasOwnProperty("signatureType"))
        object.signatureType = options2.enums === String ? $root.pruntime_rpc.SignatureType[message.signatureType] : message.signatureType;
      if (message.signature != null && message.hasOwnProperty("signature"))
        object.signature = options2.bytes === String ? $util.base64.encode(message.signature, 0, message.signature.length) : options2.bytes === Array ? Array.prototype.slice.call(message.signature) : message.signature;
      return object;
    };
    Signature.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return Signature;
  }();
  pruntime_rpc2.Certificate = function() {
    function Certificate(properties) {
      if (properties) {
        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          if (properties[keys[i]] != null)
            this[keys[i]] = properties[keys[i]];
      }
    }
    Certificate.prototype.encodedBody = $util.newBuffer([]);
    Certificate.prototype.signature = null;
    Certificate.create = function create2(properties) {
      return new Certificate(properties);
    };
    Certificate.encode = function encode(message, writer) {
      if (!writer)
        writer = $Writer.create();
      if (message.encodedBody != null && Object.hasOwnProperty.call(message, "encodedBody"))
        writer.uint32(
          /* id 1, wireType 2 =*/
          10
        ).bytes(message.encodedBody);
      if (message.signature != null && Object.hasOwnProperty.call(message, "signature"))
        $root.pruntime_rpc.Signature.encode(message.signature, writer.uint32(
          /* id 2, wireType 2 =*/
          18
        ).fork()).ldelim();
      return writer;
    };
    Certificate.encodeDelimited = function encodeDelimited(message, writer) {
      return this.encode(message, writer).ldelim();
    };
    Certificate.decode = function decode(reader, length) {
      if (!(reader instanceof $Reader))
        reader = $Reader.create(reader);
      let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.pruntime_rpc.Certificate();
      while (reader.pos < end) {
        let tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.encodedBody = reader.bytes();
            break;
          case 2:
            message.signature = $root.pruntime_rpc.Signature.decode(reader, reader.uint32());
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    };
    Certificate.decodeDelimited = function decodeDelimited(reader) {
      if (!(reader instanceof $Reader))
        reader = new $Reader(reader);
      return this.decode(reader, reader.uint32());
    };
    Certificate.verify = function verify(message) {
      if (typeof message !== "object" || message === null)
        return "object expected";
      if (message.encodedBody != null && message.hasOwnProperty("encodedBody")) {
        if (!(message.encodedBody && typeof message.encodedBody.length === "number" || $util.isString(message.encodedBody)))
          return "encodedBody: buffer expected";
      }
      if (message.signature != null && message.hasOwnProperty("signature")) {
        let error = $root.pruntime_rpc.Signature.verify(message.signature);
        if (error)
          return "signature." + error;
      }
      return null;
    };
    Certificate.fromObject = function fromObject(object) {
      if (object instanceof $root.pruntime_rpc.Certificate)
        return object;
      let message = new $root.pruntime_rpc.Certificate();
      if (object.encodedBody != null) {
        if (typeof object.encodedBody === "string")
          $util.base64.decode(object.encodedBody, message.encodedBody = $util.newBuffer($util.base64.length(object.encodedBody)), 0);
        else if (object.encodedBody.length)
          message.encodedBody = object.encodedBody;
      }
      if (object.signature != null) {
        if (typeof object.signature !== "object")
          throw TypeError(".pruntime_rpc.Certificate.signature: object expected");
        message.signature = $root.pruntime_rpc.Signature.fromObject(object.signature);
      }
      return message;
    };
    Certificate.toObject = function toObject(message, options2) {
      if (!options2)
        options2 = {};
      let object = {};
      if (options2.defaults) {
        if (options2.bytes === String)
          object.encodedBody = "";
        else {
          object.encodedBody = [];
          if (options2.bytes !== Array)
            object.encodedBody = $util.newBuffer(object.encodedBody);
        }
        object.signature = null;
      }
      if (message.encodedBody != null && message.hasOwnProperty("encodedBody"))
        object.encodedBody = options2.bytes === String ? $util.base64.encode(message.encodedBody, 0, message.encodedBody.length) : options2.bytes === Array ? Array.prototype.slice.call(message.encodedBody) : message.encodedBody;
      if (message.signature != null && message.hasOwnProperty("signature"))
        object.signature = $root.pruntime_rpc.Signature.toObject(message.signature, options2);
      return object;
    };
    Certificate.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return Certificate;
  }();
  pruntime_rpc2.SignatureType = function() {
    const valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "Ed25519"] = 0;
    values[valuesById[1] = "Sr25519"] = 1;
    values[valuesById[2] = "Ecdsa"] = 2;
    values[valuesById[3] = "Ed25519WrapBytes"] = 3;
    values[valuesById[4] = "Sr25519WrapBytes"] = 4;
    values[valuesById[5] = "EcdsaWrapBytes"] = 5;
    return values;
  }();
  pruntime_rpc2.ContractQueryResponse = function() {
    function ContractQueryResponse(properties) {
      if (properties) {
        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          if (properties[keys[i]] != null)
            this[keys[i]] = properties[keys[i]];
      }
    }
    ContractQueryResponse.prototype.encodedEncryptedData = $util.newBuffer([]);
    ContractQueryResponse.create = function create2(properties) {
      return new ContractQueryResponse(properties);
    };
    ContractQueryResponse.encode = function encode(message, writer) {
      if (!writer)
        writer = $Writer.create();
      if (message.encodedEncryptedData != null && Object.hasOwnProperty.call(message, "encodedEncryptedData"))
        writer.uint32(
          /* id 1, wireType 2 =*/
          10
        ).bytes(message.encodedEncryptedData);
      return writer;
    };
    ContractQueryResponse.encodeDelimited = function encodeDelimited(message, writer) {
      return this.encode(message, writer).ldelim();
    };
    ContractQueryResponse.decode = function decode(reader, length) {
      if (!(reader instanceof $Reader))
        reader = $Reader.create(reader);
      let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.pruntime_rpc.ContractQueryResponse();
      while (reader.pos < end) {
        let tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.encodedEncryptedData = reader.bytes();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    };
    ContractQueryResponse.decodeDelimited = function decodeDelimited(reader) {
      if (!(reader instanceof $Reader))
        reader = new $Reader(reader);
      return this.decode(reader, reader.uint32());
    };
    ContractQueryResponse.verify = function verify(message) {
      if (typeof message !== "object" || message === null)
        return "object expected";
      if (message.encodedEncryptedData != null && message.hasOwnProperty("encodedEncryptedData")) {
        if (!(message.encodedEncryptedData && typeof message.encodedEncryptedData.length === "number" || $util.isString(message.encodedEncryptedData)))
          return "encodedEncryptedData: buffer expected";
      }
      return null;
    };
    ContractQueryResponse.fromObject = function fromObject(object) {
      if (object instanceof $root.pruntime_rpc.ContractQueryResponse)
        return object;
      let message = new $root.pruntime_rpc.ContractQueryResponse();
      if (object.encodedEncryptedData != null) {
        if (typeof object.encodedEncryptedData === "string")
          $util.base64.decode(object.encodedEncryptedData, message.encodedEncryptedData = $util.newBuffer($util.base64.length(object.encodedEncryptedData)), 0);
        else if (object.encodedEncryptedData.length)
          message.encodedEncryptedData = object.encodedEncryptedData;
      }
      return message;
    };
    ContractQueryResponse.toObject = function toObject(message, options2) {
      if (!options2)
        options2 = {};
      let object = {};
      if (options2.defaults)
        if (options2.bytes === String)
          object.encodedEncryptedData = "";
        else {
          object.encodedEncryptedData = [];
          if (options2.bytes !== Array)
            object.encodedEncryptedData = $util.newBuffer(object.encodedEncryptedData);
        }
      if (message.encodedEncryptedData != null && message.hasOwnProperty("encodedEncryptedData"))
        object.encodedEncryptedData = options2.bytes === String ? $util.base64.encode(message.encodedEncryptedData, 0, message.encodedEncryptedData.length) : options2.bytes === Array ? Array.prototype.slice.call(message.encodedEncryptedData) : message.encodedEncryptedData;
      return object;
    };
    ContractQueryResponse.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return ContractQueryResponse;
  }();
  pruntime_rpc2.GetWorkerStateRequest = function() {
    function GetWorkerStateRequest(properties) {
      if (properties) {
        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          if (properties[keys[i]] != null)
            this[keys[i]] = properties[keys[i]];
      }
    }
    GetWorkerStateRequest.prototype.publicKey = $util.newBuffer([]);
    GetWorkerStateRequest.create = function create2(properties) {
      return new GetWorkerStateRequest(properties);
    };
    GetWorkerStateRequest.encode = function encode(message, writer) {
      if (!writer)
        writer = $Writer.create();
      if (message.publicKey != null && Object.hasOwnProperty.call(message, "publicKey"))
        writer.uint32(
          /* id 1, wireType 2 =*/
          10
        ).bytes(message.publicKey);
      return writer;
    };
    GetWorkerStateRequest.encodeDelimited = function encodeDelimited(message, writer) {
      return this.encode(message, writer).ldelim();
    };
    GetWorkerStateRequest.decode = function decode(reader, length) {
      if (!(reader instanceof $Reader))
        reader = $Reader.create(reader);
      let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.pruntime_rpc.GetWorkerStateRequest();
      while (reader.pos < end) {
        let tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.publicKey = reader.bytes();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    };
    GetWorkerStateRequest.decodeDelimited = function decodeDelimited(reader) {
      if (!(reader instanceof $Reader))
        reader = new $Reader(reader);
      return this.decode(reader, reader.uint32());
    };
    GetWorkerStateRequest.verify = function verify(message) {
      if (typeof message !== "object" || message === null)
        return "object expected";
      if (message.publicKey != null && message.hasOwnProperty("publicKey")) {
        if (!(message.publicKey && typeof message.publicKey.length === "number" || $util.isString(message.publicKey)))
          return "publicKey: buffer expected";
      }
      return null;
    };
    GetWorkerStateRequest.fromObject = function fromObject(object) {
      if (object instanceof $root.pruntime_rpc.GetWorkerStateRequest)
        return object;
      let message = new $root.pruntime_rpc.GetWorkerStateRequest();
      if (object.publicKey != null) {
        if (typeof object.publicKey === "string")
          $util.base64.decode(object.publicKey, message.publicKey = $util.newBuffer($util.base64.length(object.publicKey)), 0);
        else if (object.publicKey.length)
          message.publicKey = object.publicKey;
      }
      return message;
    };
    GetWorkerStateRequest.toObject = function toObject(message, options2) {
      if (!options2)
        options2 = {};
      let object = {};
      if (options2.defaults)
        if (options2.bytes === String)
          object.publicKey = "";
        else {
          object.publicKey = [];
          if (options2.bytes !== Array)
            object.publicKey = $util.newBuffer(object.publicKey);
        }
      if (message.publicKey != null && message.hasOwnProperty("publicKey"))
        object.publicKey = options2.bytes === String ? $util.base64.encode(message.publicKey, 0, message.publicKey.length) : options2.bytes === Array ? Array.prototype.slice.call(message.publicKey) : message.publicKey;
      return object;
    };
    GetWorkerStateRequest.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GetWorkerStateRequest;
  }();
  pruntime_rpc2.WorkerStat = function() {
    function WorkerStat(properties) {
      if (properties) {
        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          if (properties[keys[i]] != null)
            this[keys[i]] = properties[keys[i]];
      }
    }
    WorkerStat.prototype.lastHeartbeatForBlock = 0;
    WorkerStat.prototype.lastHeartbeatAtBlock = 0;
    WorkerStat.prototype.lastGkResponsiveEvent = 0;
    WorkerStat.prototype.lastGkResponsiveEventAtBlock = 0;
    WorkerStat.create = function create2(properties) {
      return new WorkerStat(properties);
    };
    WorkerStat.encode = function encode(message, writer) {
      if (!writer)
        writer = $Writer.create();
      if (message.lastHeartbeatForBlock != null && Object.hasOwnProperty.call(message, "lastHeartbeatForBlock"))
        writer.uint32(
          /* id 1, wireType 0 =*/
          8
        ).uint32(message.lastHeartbeatForBlock);
      if (message.lastHeartbeatAtBlock != null && Object.hasOwnProperty.call(message, "lastHeartbeatAtBlock"))
        writer.uint32(
          /* id 2, wireType 0 =*/
          16
        ).uint32(message.lastHeartbeatAtBlock);
      if (message.lastGkResponsiveEvent != null && Object.hasOwnProperty.call(message, "lastGkResponsiveEvent"))
        writer.uint32(
          /* id 3, wireType 0 =*/
          24
        ).int32(message.lastGkResponsiveEvent);
      if (message.lastGkResponsiveEventAtBlock != null && Object.hasOwnProperty.call(message, "lastGkResponsiveEventAtBlock"))
        writer.uint32(
          /* id 4, wireType 0 =*/
          32
        ).uint32(message.lastGkResponsiveEventAtBlock);
      return writer;
    };
    WorkerStat.encodeDelimited = function encodeDelimited(message, writer) {
      return this.encode(message, writer).ldelim();
    };
    WorkerStat.decode = function decode(reader, length) {
      if (!(reader instanceof $Reader))
        reader = $Reader.create(reader);
      let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.pruntime_rpc.WorkerStat();
      while (reader.pos < end) {
        let tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.lastHeartbeatForBlock = reader.uint32();
            break;
          case 2:
            message.lastHeartbeatAtBlock = reader.uint32();
            break;
          case 3:
            message.lastGkResponsiveEvent = reader.int32();
            break;
          case 4:
            message.lastGkResponsiveEventAtBlock = reader.uint32();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    };
    WorkerStat.decodeDelimited = function decodeDelimited(reader) {
      if (!(reader instanceof $Reader))
        reader = new $Reader(reader);
      return this.decode(reader, reader.uint32());
    };
    WorkerStat.verify = function verify(message) {
      if (typeof message !== "object" || message === null)
        return "object expected";
      if (message.lastHeartbeatForBlock != null && message.hasOwnProperty("lastHeartbeatForBlock")) {
        if (!$util.isInteger(message.lastHeartbeatForBlock))
          return "lastHeartbeatForBlock: integer expected";
      }
      if (message.lastHeartbeatAtBlock != null && message.hasOwnProperty("lastHeartbeatAtBlock")) {
        if (!$util.isInteger(message.lastHeartbeatAtBlock))
          return "lastHeartbeatAtBlock: integer expected";
      }
      if (message.lastGkResponsiveEvent != null && message.hasOwnProperty("lastGkResponsiveEvent"))
        switch (message.lastGkResponsiveEvent) {
          default:
            return "lastGkResponsiveEvent: enum value expected";
          case 0:
          case 1:
          case 2:
            break;
        }
      if (message.lastGkResponsiveEventAtBlock != null && message.hasOwnProperty("lastGkResponsiveEventAtBlock")) {
        if (!$util.isInteger(message.lastGkResponsiveEventAtBlock))
          return "lastGkResponsiveEventAtBlock: integer expected";
      }
      return null;
    };
    WorkerStat.fromObject = function fromObject(object) {
      if (object instanceof $root.pruntime_rpc.WorkerStat)
        return object;
      let message = new $root.pruntime_rpc.WorkerStat();
      if (object.lastHeartbeatForBlock != null)
        message.lastHeartbeatForBlock = object.lastHeartbeatForBlock >>> 0;
      if (object.lastHeartbeatAtBlock != null)
        message.lastHeartbeatAtBlock = object.lastHeartbeatAtBlock >>> 0;
      switch (object.lastGkResponsiveEvent) {
        case "NoEvent":
        case 0:
          message.lastGkResponsiveEvent = 0;
          break;
        case "EnterUnresponsive":
        case 1:
          message.lastGkResponsiveEvent = 1;
          break;
        case "ExitUnresponsive":
        case 2:
          message.lastGkResponsiveEvent = 2;
          break;
      }
      if (object.lastGkResponsiveEventAtBlock != null)
        message.lastGkResponsiveEventAtBlock = object.lastGkResponsiveEventAtBlock >>> 0;
      return message;
    };
    WorkerStat.toObject = function toObject(message, options2) {
      if (!options2)
        options2 = {};
      let object = {};
      if (options2.defaults) {
        object.lastHeartbeatForBlock = 0;
        object.lastHeartbeatAtBlock = 0;
        object.lastGkResponsiveEvent = options2.enums === String ? "NoEvent" : 0;
        object.lastGkResponsiveEventAtBlock = 0;
      }
      if (message.lastHeartbeatForBlock != null && message.hasOwnProperty("lastHeartbeatForBlock"))
        object.lastHeartbeatForBlock = message.lastHeartbeatForBlock;
      if (message.lastHeartbeatAtBlock != null && message.hasOwnProperty("lastHeartbeatAtBlock"))
        object.lastHeartbeatAtBlock = message.lastHeartbeatAtBlock;
      if (message.lastGkResponsiveEvent != null && message.hasOwnProperty("lastGkResponsiveEvent"))
        object.lastGkResponsiveEvent = options2.enums === String ? $root.pruntime_rpc.ResponsiveEvent[message.lastGkResponsiveEvent] : message.lastGkResponsiveEvent;
      if (message.lastGkResponsiveEventAtBlock != null && message.hasOwnProperty("lastGkResponsiveEventAtBlock"))
        object.lastGkResponsiveEventAtBlock = message.lastGkResponsiveEventAtBlock;
      return object;
    };
    WorkerStat.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return WorkerStat;
  }();
  pruntime_rpc2.WorkerState = function() {
    function WorkerState(properties) {
      this.waitingHeartbeats = [];
      if (properties) {
        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          if (properties[keys[i]] != null)
            this[keys[i]] = properties[keys[i]];
      }
    }
    WorkerState.prototype.registered = false;
    WorkerState.prototype.unresponsive = false;
    WorkerState.prototype.benchState = null;
    WorkerState.prototype.workingState = null;
    WorkerState.prototype.waitingHeartbeats = $util.emptyArray;
    WorkerState.prototype.tokenomicInfo = null;
    WorkerState.prototype.stat = null;
    WorkerState.create = function create2(properties) {
      return new WorkerState(properties);
    };
    WorkerState.encode = function encode(message, writer) {
      if (!writer)
        writer = $Writer.create();
      if (message.registered != null && Object.hasOwnProperty.call(message, "registered"))
        writer.uint32(
          /* id 1, wireType 0 =*/
          8
        ).bool(message.registered);
      if (message.unresponsive != null && Object.hasOwnProperty.call(message, "unresponsive"))
        writer.uint32(
          /* id 2, wireType 0 =*/
          16
        ).bool(message.unresponsive);
      if (message.benchState != null && Object.hasOwnProperty.call(message, "benchState"))
        $root.pruntime_rpc.BenchState.encode(message.benchState, writer.uint32(
          /* id 3, wireType 2 =*/
          26
        ).fork()).ldelim();
      if (message.workingState != null && Object.hasOwnProperty.call(message, "workingState"))
        $root.pruntime_rpc.WorkingState.encode(message.workingState, writer.uint32(
          /* id 4, wireType 2 =*/
          34
        ).fork()).ldelim();
      if (message.waitingHeartbeats != null && message.waitingHeartbeats.length) {
        writer.uint32(
          /* id 5, wireType 2 =*/
          42
        ).fork();
        for (let i = 0; i < message.waitingHeartbeats.length; ++i)
          writer.uint32(message.waitingHeartbeats[i]);
        writer.ldelim();
      }
      if (message.tokenomicInfo != null && Object.hasOwnProperty.call(message, "tokenomicInfo"))
        $root.pruntime_rpc.TokenomicInfo.encode(message.tokenomicInfo, writer.uint32(
          /* id 10, wireType 2 =*/
          82
        ).fork()).ldelim();
      if (message.stat != null && Object.hasOwnProperty.call(message, "stat"))
        $root.pruntime_rpc.WorkerStat.encode(message.stat, writer.uint32(
          /* id 11, wireType 2 =*/
          90
        ).fork()).ldelim();
      return writer;
    };
    WorkerState.encodeDelimited = function encodeDelimited(message, writer) {
      return this.encode(message, writer).ldelim();
    };
    WorkerState.decode = function decode(reader, length) {
      if (!(reader instanceof $Reader))
        reader = $Reader.create(reader);
      let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.pruntime_rpc.WorkerState();
      while (reader.pos < end) {
        let tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.registered = reader.bool();
            break;
          case 2:
            message.unresponsive = reader.bool();
            break;
          case 3:
            message.benchState = $root.pruntime_rpc.BenchState.decode(reader, reader.uint32());
            break;
          case 4:
            message.workingState = $root.pruntime_rpc.WorkingState.decode(reader, reader.uint32());
            break;
          case 5:
            if (!(message.waitingHeartbeats && message.waitingHeartbeats.length))
              message.waitingHeartbeats = [];
            if ((tag & 7) === 2) {
              let end2 = reader.uint32() + reader.pos;
              while (reader.pos < end2)
                message.waitingHeartbeats.push(reader.uint32());
            } else
              message.waitingHeartbeats.push(reader.uint32());
            break;
          case 10:
            message.tokenomicInfo = $root.pruntime_rpc.TokenomicInfo.decode(reader, reader.uint32());
            break;
          case 11:
            message.stat = $root.pruntime_rpc.WorkerStat.decode(reader, reader.uint32());
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    };
    WorkerState.decodeDelimited = function decodeDelimited(reader) {
      if (!(reader instanceof $Reader))
        reader = new $Reader(reader);
      return this.decode(reader, reader.uint32());
    };
    WorkerState.verify = function verify(message) {
      if (typeof message !== "object" || message === null)
        return "object expected";
      if (message.registered != null && message.hasOwnProperty("registered")) {
        if (typeof message.registered !== "boolean")
          return "registered: boolean expected";
      }
      if (message.unresponsive != null && message.hasOwnProperty("unresponsive")) {
        if (typeof message.unresponsive !== "boolean")
          return "unresponsive: boolean expected";
      }
      if (message.benchState != null && message.hasOwnProperty("benchState")) {
        let error = $root.pruntime_rpc.BenchState.verify(message.benchState);
        if (error)
          return "benchState." + error;
      }
      if (message.workingState != null && message.hasOwnProperty("workingState")) {
        let error = $root.pruntime_rpc.WorkingState.verify(message.workingState);
        if (error)
          return "workingState." + error;
      }
      if (message.waitingHeartbeats != null && message.hasOwnProperty("waitingHeartbeats")) {
        if (!Array.isArray(message.waitingHeartbeats))
          return "waitingHeartbeats: array expected";
        for (let i = 0; i < message.waitingHeartbeats.length; ++i)
          if (!$util.isInteger(message.waitingHeartbeats[i]))
            return "waitingHeartbeats: integer[] expected";
      }
      if (message.tokenomicInfo != null && message.hasOwnProperty("tokenomicInfo")) {
        let error = $root.pruntime_rpc.TokenomicInfo.verify(message.tokenomicInfo);
        if (error)
          return "tokenomicInfo." + error;
      }
      if (message.stat != null && message.hasOwnProperty("stat")) {
        let error = $root.pruntime_rpc.WorkerStat.verify(message.stat);
        if (error)
          return "stat." + error;
      }
      return null;
    };
    WorkerState.fromObject = function fromObject(object) {
      if (object instanceof $root.pruntime_rpc.WorkerState)
        return object;
      let message = new $root.pruntime_rpc.WorkerState();
      if (object.registered != null)
        message.registered = Boolean(object.registered);
      if (object.unresponsive != null)
        message.unresponsive = Boolean(object.unresponsive);
      if (object.benchState != null) {
        if (typeof object.benchState !== "object")
          throw TypeError(".pruntime_rpc.WorkerState.benchState: object expected");
        message.benchState = $root.pruntime_rpc.BenchState.fromObject(object.benchState);
      }
      if (object.workingState != null) {
        if (typeof object.workingState !== "object")
          throw TypeError(".pruntime_rpc.WorkerState.workingState: object expected");
        message.workingState = $root.pruntime_rpc.WorkingState.fromObject(object.workingState);
      }
      if (object.waitingHeartbeats) {
        if (!Array.isArray(object.waitingHeartbeats))
          throw TypeError(".pruntime_rpc.WorkerState.waitingHeartbeats: array expected");
        message.waitingHeartbeats = [];
        for (let i = 0; i < object.waitingHeartbeats.length; ++i)
          message.waitingHeartbeats[i] = object.waitingHeartbeats[i] >>> 0;
      }
      if (object.tokenomicInfo != null) {
        if (typeof object.tokenomicInfo !== "object")
          throw TypeError(".pruntime_rpc.WorkerState.tokenomicInfo: object expected");
        message.tokenomicInfo = $root.pruntime_rpc.TokenomicInfo.fromObject(object.tokenomicInfo);
      }
      if (object.stat != null) {
        if (typeof object.stat !== "object")
          throw TypeError(".pruntime_rpc.WorkerState.stat: object expected");
        message.stat = $root.pruntime_rpc.WorkerStat.fromObject(object.stat);
      }
      return message;
    };
    WorkerState.toObject = function toObject(message, options2) {
      if (!options2)
        options2 = {};
      let object = {};
      if (options2.arrays || options2.defaults)
        object.waitingHeartbeats = [];
      if (options2.defaults) {
        object.registered = false;
        object.unresponsive = false;
        object.benchState = null;
        object.workingState = null;
        object.tokenomicInfo = null;
        object.stat = null;
      }
      if (message.registered != null && message.hasOwnProperty("registered"))
        object.registered = message.registered;
      if (message.unresponsive != null && message.hasOwnProperty("unresponsive"))
        object.unresponsive = message.unresponsive;
      if (message.benchState != null && message.hasOwnProperty("benchState"))
        object.benchState = $root.pruntime_rpc.BenchState.toObject(message.benchState, options2);
      if (message.workingState != null && message.hasOwnProperty("workingState"))
        object.workingState = $root.pruntime_rpc.WorkingState.toObject(message.workingState, options2);
      if (message.waitingHeartbeats && message.waitingHeartbeats.length) {
        object.waitingHeartbeats = [];
        for (let j = 0; j < message.waitingHeartbeats.length; ++j)
          object.waitingHeartbeats[j] = message.waitingHeartbeats[j];
      }
      if (message.tokenomicInfo != null && message.hasOwnProperty("tokenomicInfo"))
        object.tokenomicInfo = $root.pruntime_rpc.TokenomicInfo.toObject(message.tokenomicInfo, options2);
      if (message.stat != null && message.hasOwnProperty("stat"))
        object.stat = $root.pruntime_rpc.WorkerStat.toObject(message.stat, options2);
      return object;
    };
    WorkerState.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return WorkerState;
  }();
  pruntime_rpc2.HandoverChallenge = function() {
    function HandoverChallenge(properties) {
      if (properties) {
        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          if (properties[keys[i]] != null)
            this[keys[i]] = properties[keys[i]];
      }
    }
    HandoverChallenge.prototype.encodedChallenge = $util.newBuffer([]);
    HandoverChallenge.create = function create2(properties) {
      return new HandoverChallenge(properties);
    };
    HandoverChallenge.encode = function encode(message, writer) {
      if (!writer)
        writer = $Writer.create();
      if (message.encodedChallenge != null && Object.hasOwnProperty.call(message, "encodedChallenge"))
        writer.uint32(
          /* id 1, wireType 2 =*/
          10
        ).bytes(message.encodedChallenge);
      return writer;
    };
    HandoverChallenge.encodeDelimited = function encodeDelimited(message, writer) {
      return this.encode(message, writer).ldelim();
    };
    HandoverChallenge.decode = function decode(reader, length) {
      if (!(reader instanceof $Reader))
        reader = $Reader.create(reader);
      let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.pruntime_rpc.HandoverChallenge();
      while (reader.pos < end) {
        let tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.encodedChallenge = reader.bytes();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    };
    HandoverChallenge.decodeDelimited = function decodeDelimited(reader) {
      if (!(reader instanceof $Reader))
        reader = new $Reader(reader);
      return this.decode(reader, reader.uint32());
    };
    HandoverChallenge.verify = function verify(message) {
      if (typeof message !== "object" || message === null)
        return "object expected";
      if (message.encodedChallenge != null && message.hasOwnProperty("encodedChallenge")) {
        if (!(message.encodedChallenge && typeof message.encodedChallenge.length === "number" || $util.isString(message.encodedChallenge)))
          return "encodedChallenge: buffer expected";
      }
      return null;
    };
    HandoverChallenge.fromObject = function fromObject(object) {
      if (object instanceof $root.pruntime_rpc.HandoverChallenge)
        return object;
      let message = new $root.pruntime_rpc.HandoverChallenge();
      if (object.encodedChallenge != null) {
        if (typeof object.encodedChallenge === "string")
          $util.base64.decode(object.encodedChallenge, message.encodedChallenge = $util.newBuffer($util.base64.length(object.encodedChallenge)), 0);
        else if (object.encodedChallenge.length)
          message.encodedChallenge = object.encodedChallenge;
      }
      return message;
    };
    HandoverChallenge.toObject = function toObject(message, options2) {
      if (!options2)
        options2 = {};
      let object = {};
      if (options2.defaults)
        if (options2.bytes === String)
          object.encodedChallenge = "";
        else {
          object.encodedChallenge = [];
          if (options2.bytes !== Array)
            object.encodedChallenge = $util.newBuffer(object.encodedChallenge);
        }
      if (message.encodedChallenge != null && message.hasOwnProperty("encodedChallenge"))
        object.encodedChallenge = options2.bytes === String ? $util.base64.encode(message.encodedChallenge, 0, message.encodedChallenge.length) : options2.bytes === Array ? Array.prototype.slice.call(message.encodedChallenge) : message.encodedChallenge;
      return object;
    };
    HandoverChallenge.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return HandoverChallenge;
  }();
  pruntime_rpc2.HandoverChallengeResponse = function() {
    function HandoverChallengeResponse(properties) {
      if (properties) {
        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          if (properties[keys[i]] != null)
            this[keys[i]] = properties[keys[i]];
      }
    }
    HandoverChallengeResponse.prototype.encodedChallengeHandler = $util.newBuffer([]);
    HandoverChallengeResponse.prototype.attestation = null;
    HandoverChallengeResponse.create = function create2(properties) {
      return new HandoverChallengeResponse(properties);
    };
    HandoverChallengeResponse.encode = function encode(message, writer) {
      if (!writer)
        writer = $Writer.create();
      if (message.encodedChallengeHandler != null && Object.hasOwnProperty.call(message, "encodedChallengeHandler"))
        writer.uint32(
          /* id 1, wireType 2 =*/
          10
        ).bytes(message.encodedChallengeHandler);
      if (message.attestation != null && Object.hasOwnProperty.call(message, "attestation"))
        $root.pruntime_rpc.Attestation.encode(message.attestation, writer.uint32(
          /* id 2, wireType 2 =*/
          18
        ).fork()).ldelim();
      return writer;
    };
    HandoverChallengeResponse.encodeDelimited = function encodeDelimited(message, writer) {
      return this.encode(message, writer).ldelim();
    };
    HandoverChallengeResponse.decode = function decode(reader, length) {
      if (!(reader instanceof $Reader))
        reader = $Reader.create(reader);
      let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.pruntime_rpc.HandoverChallengeResponse();
      while (reader.pos < end) {
        let tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.encodedChallengeHandler = reader.bytes();
            break;
          case 2:
            message.attestation = $root.pruntime_rpc.Attestation.decode(reader, reader.uint32());
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    };
    HandoverChallengeResponse.decodeDelimited = function decodeDelimited(reader) {
      if (!(reader instanceof $Reader))
        reader = new $Reader(reader);
      return this.decode(reader, reader.uint32());
    };
    HandoverChallengeResponse.verify = function verify(message) {
      if (typeof message !== "object" || message === null)
        return "object expected";
      if (message.encodedChallengeHandler != null && message.hasOwnProperty("encodedChallengeHandler")) {
        if (!(message.encodedChallengeHandler && typeof message.encodedChallengeHandler.length === "number" || $util.isString(message.encodedChallengeHandler)))
          return "encodedChallengeHandler: buffer expected";
      }
      if (message.attestation != null && message.hasOwnProperty("attestation")) {
        let error = $root.pruntime_rpc.Attestation.verify(message.attestation);
        if (error)
          return "attestation." + error;
      }
      return null;
    };
    HandoverChallengeResponse.fromObject = function fromObject(object) {
      if (object instanceof $root.pruntime_rpc.HandoverChallengeResponse)
        return object;
      let message = new $root.pruntime_rpc.HandoverChallengeResponse();
      if (object.encodedChallengeHandler != null) {
        if (typeof object.encodedChallengeHandler === "string")
          $util.base64.decode(object.encodedChallengeHandler, message.encodedChallengeHandler = $util.newBuffer($util.base64.length(object.encodedChallengeHandler)), 0);
        else if (object.encodedChallengeHandler.length)
          message.encodedChallengeHandler = object.encodedChallengeHandler;
      }
      if (object.attestation != null) {
        if (typeof object.attestation !== "object")
          throw TypeError(".pruntime_rpc.HandoverChallengeResponse.attestation: object expected");
        message.attestation = $root.pruntime_rpc.Attestation.fromObject(object.attestation);
      }
      return message;
    };
    HandoverChallengeResponse.toObject = function toObject(message, options2) {
      if (!options2)
        options2 = {};
      let object = {};
      if (options2.defaults) {
        if (options2.bytes === String)
          object.encodedChallengeHandler = "";
        else {
          object.encodedChallengeHandler = [];
          if (options2.bytes !== Array)
            object.encodedChallengeHandler = $util.newBuffer(object.encodedChallengeHandler);
        }
        object.attestation = null;
      }
      if (message.encodedChallengeHandler != null && message.hasOwnProperty("encodedChallengeHandler"))
        object.encodedChallengeHandler = options2.bytes === String ? $util.base64.encode(message.encodedChallengeHandler, 0, message.encodedChallengeHandler.length) : options2.bytes === Array ? Array.prototype.slice.call(message.encodedChallengeHandler) : message.encodedChallengeHandler;
      if (message.attestation != null && message.hasOwnProperty("attestation"))
        object.attestation = $root.pruntime_rpc.Attestation.toObject(message.attestation, options2);
      return object;
    };
    HandoverChallengeResponse.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return HandoverChallengeResponse;
  }();
  pruntime_rpc2.HandoverWorkerKey = function() {
    function HandoverWorkerKey(properties) {
      if (properties) {
        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          if (properties[keys[i]] != null)
            this[keys[i]] = properties[keys[i]];
      }
    }
    HandoverWorkerKey.prototype.encodedWorkerKey = $util.newBuffer([]);
    HandoverWorkerKey.prototype.attestation = null;
    HandoverWorkerKey.create = function create2(properties) {
      return new HandoverWorkerKey(properties);
    };
    HandoverWorkerKey.encode = function encode(message, writer) {
      if (!writer)
        writer = $Writer.create();
      if (message.encodedWorkerKey != null && Object.hasOwnProperty.call(message, "encodedWorkerKey"))
        writer.uint32(
          /* id 1, wireType 2 =*/
          10
        ).bytes(message.encodedWorkerKey);
      if (message.attestation != null && Object.hasOwnProperty.call(message, "attestation"))
        $root.pruntime_rpc.Attestation.encode(message.attestation, writer.uint32(
          /* id 2, wireType 2 =*/
          18
        ).fork()).ldelim();
      return writer;
    };
    HandoverWorkerKey.encodeDelimited = function encodeDelimited(message, writer) {
      return this.encode(message, writer).ldelim();
    };
    HandoverWorkerKey.decode = function decode(reader, length) {
      if (!(reader instanceof $Reader))
        reader = $Reader.create(reader);
      let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.pruntime_rpc.HandoverWorkerKey();
      while (reader.pos < end) {
        let tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.encodedWorkerKey = reader.bytes();
            break;
          case 2:
            message.attestation = $root.pruntime_rpc.Attestation.decode(reader, reader.uint32());
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    };
    HandoverWorkerKey.decodeDelimited = function decodeDelimited(reader) {
      if (!(reader instanceof $Reader))
        reader = new $Reader(reader);
      return this.decode(reader, reader.uint32());
    };
    HandoverWorkerKey.verify = function verify(message) {
      if (typeof message !== "object" || message === null)
        return "object expected";
      if (message.encodedWorkerKey != null && message.hasOwnProperty("encodedWorkerKey")) {
        if (!(message.encodedWorkerKey && typeof message.encodedWorkerKey.length === "number" || $util.isString(message.encodedWorkerKey)))
          return "encodedWorkerKey: buffer expected";
      }
      if (message.attestation != null && message.hasOwnProperty("attestation")) {
        let error = $root.pruntime_rpc.Attestation.verify(message.attestation);
        if (error)
          return "attestation." + error;
      }
      return null;
    };
    HandoverWorkerKey.fromObject = function fromObject(object) {
      if (object instanceof $root.pruntime_rpc.HandoverWorkerKey)
        return object;
      let message = new $root.pruntime_rpc.HandoverWorkerKey();
      if (object.encodedWorkerKey != null) {
        if (typeof object.encodedWorkerKey === "string")
          $util.base64.decode(object.encodedWorkerKey, message.encodedWorkerKey = $util.newBuffer($util.base64.length(object.encodedWorkerKey)), 0);
        else if (object.encodedWorkerKey.length)
          message.encodedWorkerKey = object.encodedWorkerKey;
      }
      if (object.attestation != null) {
        if (typeof object.attestation !== "object")
          throw TypeError(".pruntime_rpc.HandoverWorkerKey.attestation: object expected");
        message.attestation = $root.pruntime_rpc.Attestation.fromObject(object.attestation);
      }
      return message;
    };
    HandoverWorkerKey.toObject = function toObject(message, options2) {
      if (!options2)
        options2 = {};
      let object = {};
      if (options2.defaults) {
        if (options2.bytes === String)
          object.encodedWorkerKey = "";
        else {
          object.encodedWorkerKey = [];
          if (options2.bytes !== Array)
            object.encodedWorkerKey = $util.newBuffer(object.encodedWorkerKey);
        }
        object.attestation = null;
      }
      if (message.encodedWorkerKey != null && message.hasOwnProperty("encodedWorkerKey"))
        object.encodedWorkerKey = options2.bytes === String ? $util.base64.encode(message.encodedWorkerKey, 0, message.encodedWorkerKey.length) : options2.bytes === Array ? Array.prototype.slice.call(message.encodedWorkerKey) : message.encodedWorkerKey;
      if (message.attestation != null && message.hasOwnProperty("attestation"))
        object.attestation = $root.pruntime_rpc.Attestation.toObject(message.attestation, options2);
      return object;
    };
    HandoverWorkerKey.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return HandoverWorkerKey;
  }();
  pruntime_rpc2.BenchState = function() {
    function BenchState(properties) {
      if (properties) {
        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          if (properties[keys[i]] != null)
            this[keys[i]] = properties[keys[i]];
      }
    }
    BenchState.prototype.startBlock = 0;
    BenchState.prototype.startTime = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
    BenchState.prototype.duration = 0;
    BenchState.create = function create2(properties) {
      return new BenchState(properties);
    };
    BenchState.encode = function encode(message, writer) {
      if (!writer)
        writer = $Writer.create();
      if (message.startBlock != null && Object.hasOwnProperty.call(message, "startBlock"))
        writer.uint32(
          /* id 1, wireType 0 =*/
          8
        ).uint32(message.startBlock);
      if (message.startTime != null && Object.hasOwnProperty.call(message, "startTime"))
        writer.uint32(
          /* id 2, wireType 0 =*/
          16
        ).uint64(message.startTime);
      if (message.duration != null && Object.hasOwnProperty.call(message, "duration"))
        writer.uint32(
          /* id 4, wireType 0 =*/
          32
        ).uint32(message.duration);
      return writer;
    };
    BenchState.encodeDelimited = function encodeDelimited(message, writer) {
      return this.encode(message, writer).ldelim();
    };
    BenchState.decode = function decode(reader, length) {
      if (!(reader instanceof $Reader))
        reader = $Reader.create(reader);
      let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.pruntime_rpc.BenchState();
      while (reader.pos < end) {
        let tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.startBlock = reader.uint32();
            break;
          case 2:
            message.startTime = reader.uint64();
            break;
          case 4:
            message.duration = reader.uint32();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    };
    BenchState.decodeDelimited = function decodeDelimited(reader) {
      if (!(reader instanceof $Reader))
        reader = new $Reader(reader);
      return this.decode(reader, reader.uint32());
    };
    BenchState.verify = function verify(message) {
      if (typeof message !== "object" || message === null)
        return "object expected";
      if (message.startBlock != null && message.hasOwnProperty("startBlock")) {
        if (!$util.isInteger(message.startBlock))
          return "startBlock: integer expected";
      }
      if (message.startTime != null && message.hasOwnProperty("startTime")) {
        if (!$util.isInteger(message.startTime) && !(message.startTime && $util.isInteger(message.startTime.low) && $util.isInteger(message.startTime.high)))
          return "startTime: integer|Long expected";
      }
      if (message.duration != null && message.hasOwnProperty("duration")) {
        if (!$util.isInteger(message.duration))
          return "duration: integer expected";
      }
      return null;
    };
    BenchState.fromObject = function fromObject(object) {
      if (object instanceof $root.pruntime_rpc.BenchState)
        return object;
      let message = new $root.pruntime_rpc.BenchState();
      if (object.startBlock != null)
        message.startBlock = object.startBlock >>> 0;
      if (object.startTime != null) {
        if ($util.Long)
          (message.startTime = $util.Long.fromValue(object.startTime)).unsigned = true;
        else if (typeof object.startTime === "string")
          message.startTime = parseInt(object.startTime, 10);
        else if (typeof object.startTime === "number")
          message.startTime = object.startTime;
        else if (typeof object.startTime === "object")
          message.startTime = new $util.LongBits(object.startTime.low >>> 0, object.startTime.high >>> 0).toNumber(true);
      }
      if (object.duration != null)
        message.duration = object.duration >>> 0;
      return message;
    };
    BenchState.toObject = function toObject(message, options2) {
      if (!options2)
        options2 = {};
      let object = {};
      if (options2.defaults) {
        object.startBlock = 0;
        if ($util.Long) {
          let long = new $util.Long(0, 0, true);
          object.startTime = options2.longs === String ? long.toString() : options2.longs === Number ? long.toNumber() : long;
        } else
          object.startTime = options2.longs === String ? "0" : 0;
        object.duration = 0;
      }
      if (message.startBlock != null && message.hasOwnProperty("startBlock"))
        object.startBlock = message.startBlock;
      if (message.startTime != null && message.hasOwnProperty("startTime"))
        if (typeof message.startTime === "number")
          object.startTime = options2.longs === String ? String(message.startTime) : message.startTime;
        else
          object.startTime = options2.longs === String ? $util.Long.prototype.toString.call(message.startTime) : options2.longs === Number ? new $util.LongBits(message.startTime.low >>> 0, message.startTime.high >>> 0).toNumber(true) : message.startTime;
      if (message.duration != null && message.hasOwnProperty("duration"))
        object.duration = message.duration;
      return object;
    };
    BenchState.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return BenchState;
  }();
  pruntime_rpc2.WorkingState = function() {
    function WorkingState(properties) {
      if (properties) {
        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          if (properties[keys[i]] != null)
            this[keys[i]] = properties[keys[i]];
      }
    }
    WorkingState.prototype.sessionId = 0;
    WorkingState.prototype.paused = false;
    WorkingState.prototype.startTime = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
    WorkingState.create = function create2(properties) {
      return new WorkingState(properties);
    };
    WorkingState.encode = function encode(message, writer) {
      if (!writer)
        writer = $Writer.create();
      if (message.sessionId != null && Object.hasOwnProperty.call(message, "sessionId"))
        writer.uint32(
          /* id 1, wireType 0 =*/
          8
        ).uint32(message.sessionId);
      if (message.paused != null && Object.hasOwnProperty.call(message, "paused"))
        writer.uint32(
          /* id 2, wireType 0 =*/
          16
        ).bool(message.paused);
      if (message.startTime != null && Object.hasOwnProperty.call(message, "startTime"))
        writer.uint32(
          /* id 3, wireType 0 =*/
          24
        ).uint64(message.startTime);
      return writer;
    };
    WorkingState.encodeDelimited = function encodeDelimited(message, writer) {
      return this.encode(message, writer).ldelim();
    };
    WorkingState.decode = function decode(reader, length) {
      if (!(reader instanceof $Reader))
        reader = $Reader.create(reader);
      let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.pruntime_rpc.WorkingState();
      while (reader.pos < end) {
        let tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.sessionId = reader.uint32();
            break;
          case 2:
            message.paused = reader.bool();
            break;
          case 3:
            message.startTime = reader.uint64();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    };
    WorkingState.decodeDelimited = function decodeDelimited(reader) {
      if (!(reader instanceof $Reader))
        reader = new $Reader(reader);
      return this.decode(reader, reader.uint32());
    };
    WorkingState.verify = function verify(message) {
      if (typeof message !== "object" || message === null)
        return "object expected";
      if (message.sessionId != null && message.hasOwnProperty("sessionId")) {
        if (!$util.isInteger(message.sessionId))
          return "sessionId: integer expected";
      }
      if (message.paused != null && message.hasOwnProperty("paused")) {
        if (typeof message.paused !== "boolean")
          return "paused: boolean expected";
      }
      if (message.startTime != null && message.hasOwnProperty("startTime")) {
        if (!$util.isInteger(message.startTime) && !(message.startTime && $util.isInteger(message.startTime.low) && $util.isInteger(message.startTime.high)))
          return "startTime: integer|Long expected";
      }
      return null;
    };
    WorkingState.fromObject = function fromObject(object) {
      if (object instanceof $root.pruntime_rpc.WorkingState)
        return object;
      let message = new $root.pruntime_rpc.WorkingState();
      if (object.sessionId != null)
        message.sessionId = object.sessionId >>> 0;
      if (object.paused != null)
        message.paused = Boolean(object.paused);
      if (object.startTime != null) {
        if ($util.Long)
          (message.startTime = $util.Long.fromValue(object.startTime)).unsigned = true;
        else if (typeof object.startTime === "string")
          message.startTime = parseInt(object.startTime, 10);
        else if (typeof object.startTime === "number")
          message.startTime = object.startTime;
        else if (typeof object.startTime === "object")
          message.startTime = new $util.LongBits(object.startTime.low >>> 0, object.startTime.high >>> 0).toNumber(true);
      }
      return message;
    };
    WorkingState.toObject = function toObject(message, options2) {
      if (!options2)
        options2 = {};
      let object = {};
      if (options2.defaults) {
        object.sessionId = 0;
        object.paused = false;
        if ($util.Long) {
          let long = new $util.Long(0, 0, true);
          object.startTime = options2.longs === String ? long.toString() : options2.longs === Number ? long.toNumber() : long;
        } else
          object.startTime = options2.longs === String ? "0" : 0;
      }
      if (message.sessionId != null && message.hasOwnProperty("sessionId"))
        object.sessionId = message.sessionId;
      if (message.paused != null && message.hasOwnProperty("paused"))
        object.paused = message.paused;
      if (message.startTime != null && message.hasOwnProperty("startTime"))
        if (typeof message.startTime === "number")
          object.startTime = options2.longs === String ? String(message.startTime) : message.startTime;
        else
          object.startTime = options2.longs === String ? $util.Long.prototype.toString.call(message.startTime) : options2.longs === Number ? new $util.LongBits(message.startTime.low >>> 0, message.startTime.high >>> 0).toNumber(true) : message.startTime;
      return object;
    };
    WorkingState.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return WorkingState;
  }();
  pruntime_rpc2.EchoMessage = function() {
    function EchoMessage(properties) {
      if (properties) {
        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          if (properties[keys[i]] != null)
            this[keys[i]] = properties[keys[i]];
      }
    }
    EchoMessage.prototype.echoMsg = $util.newBuffer([]);
    EchoMessage.create = function create2(properties) {
      return new EchoMessage(properties);
    };
    EchoMessage.encode = function encode(message, writer) {
      if (!writer)
        writer = $Writer.create();
      if (message.echoMsg != null && Object.hasOwnProperty.call(message, "echoMsg"))
        writer.uint32(
          /* id 1, wireType 2 =*/
          10
        ).bytes(message.echoMsg);
      return writer;
    };
    EchoMessage.encodeDelimited = function encodeDelimited(message, writer) {
      return this.encode(message, writer).ldelim();
    };
    EchoMessage.decode = function decode(reader, length) {
      if (!(reader instanceof $Reader))
        reader = $Reader.create(reader);
      let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.pruntime_rpc.EchoMessage();
      while (reader.pos < end) {
        let tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.echoMsg = reader.bytes();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    };
    EchoMessage.decodeDelimited = function decodeDelimited(reader) {
      if (!(reader instanceof $Reader))
        reader = new $Reader(reader);
      return this.decode(reader, reader.uint32());
    };
    EchoMessage.verify = function verify(message) {
      if (typeof message !== "object" || message === null)
        return "object expected";
      if (message.echoMsg != null && message.hasOwnProperty("echoMsg")) {
        if (!(message.echoMsg && typeof message.echoMsg.length === "number" || $util.isString(message.echoMsg)))
          return "echoMsg: buffer expected";
      }
      return null;
    };
    EchoMessage.fromObject = function fromObject(object) {
      if (object instanceof $root.pruntime_rpc.EchoMessage)
        return object;
      let message = new $root.pruntime_rpc.EchoMessage();
      if (object.echoMsg != null) {
        if (typeof object.echoMsg === "string")
          $util.base64.decode(object.echoMsg, message.echoMsg = $util.newBuffer($util.base64.length(object.echoMsg)), 0);
        else if (object.echoMsg.length)
          message.echoMsg = object.echoMsg;
      }
      return message;
    };
    EchoMessage.toObject = function toObject(message, options2) {
      if (!options2)
        options2 = {};
      let object = {};
      if (options2.defaults)
        if (options2.bytes === String)
          object.echoMsg = "";
        else {
          object.echoMsg = [];
          if (options2.bytes !== Array)
            object.echoMsg = $util.newBuffer(object.echoMsg);
        }
      if (message.echoMsg != null && message.hasOwnProperty("echoMsg"))
        object.echoMsg = options2.bytes === String ? $util.base64.encode(message.echoMsg, 0, message.echoMsg.length) : options2.bytes === Array ? Array.prototype.slice.call(message.echoMsg) : message.echoMsg;
      return object;
    };
    EchoMessage.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return EchoMessage;
  }();
  pruntime_rpc2.ResponsiveEvent = function() {
    const valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "NoEvent"] = 0;
    values[valuesById[1] = "EnterUnresponsive"] = 1;
    values[valuesById[2] = "ExitUnresponsive"] = 2;
    return values;
  }();
  pruntime_rpc2.AddEndpointRequest = function() {
    function AddEndpointRequest(properties) {
      if (properties) {
        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          if (properties[keys[i]] != null)
            this[keys[i]] = properties[keys[i]];
      }
    }
    AddEndpointRequest.prototype.encodedEndpointType = $util.newBuffer([]);
    AddEndpointRequest.prototype.endpoint = "";
    AddEndpointRequest.create = function create2(properties) {
      return new AddEndpointRequest(properties);
    };
    AddEndpointRequest.encode = function encode(message, writer) {
      if (!writer)
        writer = $Writer.create();
      if (message.encodedEndpointType != null && Object.hasOwnProperty.call(message, "encodedEndpointType"))
        writer.uint32(
          /* id 1, wireType 2 =*/
          10
        ).bytes(message.encodedEndpointType);
      if (message.endpoint != null && Object.hasOwnProperty.call(message, "endpoint"))
        writer.uint32(
          /* id 2, wireType 2 =*/
          18
        ).string(message.endpoint);
      return writer;
    };
    AddEndpointRequest.encodeDelimited = function encodeDelimited(message, writer) {
      return this.encode(message, writer).ldelim();
    };
    AddEndpointRequest.decode = function decode(reader, length) {
      if (!(reader instanceof $Reader))
        reader = $Reader.create(reader);
      let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.pruntime_rpc.AddEndpointRequest();
      while (reader.pos < end) {
        let tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.encodedEndpointType = reader.bytes();
            break;
          case 2:
            message.endpoint = reader.string();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    };
    AddEndpointRequest.decodeDelimited = function decodeDelimited(reader) {
      if (!(reader instanceof $Reader))
        reader = new $Reader(reader);
      return this.decode(reader, reader.uint32());
    };
    AddEndpointRequest.verify = function verify(message) {
      if (typeof message !== "object" || message === null)
        return "object expected";
      if (message.encodedEndpointType != null && message.hasOwnProperty("encodedEndpointType")) {
        if (!(message.encodedEndpointType && typeof message.encodedEndpointType.length === "number" || $util.isString(message.encodedEndpointType)))
          return "encodedEndpointType: buffer expected";
      }
      if (message.endpoint != null && message.hasOwnProperty("endpoint")) {
        if (!$util.isString(message.endpoint))
          return "endpoint: string expected";
      }
      return null;
    };
    AddEndpointRequest.fromObject = function fromObject(object) {
      if (object instanceof $root.pruntime_rpc.AddEndpointRequest)
        return object;
      let message = new $root.pruntime_rpc.AddEndpointRequest();
      if (object.encodedEndpointType != null) {
        if (typeof object.encodedEndpointType === "string")
          $util.base64.decode(object.encodedEndpointType, message.encodedEndpointType = $util.newBuffer($util.base64.length(object.encodedEndpointType)), 0);
        else if (object.encodedEndpointType.length)
          message.encodedEndpointType = object.encodedEndpointType;
      }
      if (object.endpoint != null)
        message.endpoint = String(object.endpoint);
      return message;
    };
    AddEndpointRequest.toObject = function toObject(message, options2) {
      if (!options2)
        options2 = {};
      let object = {};
      if (options2.defaults) {
        if (options2.bytes === String)
          object.encodedEndpointType = "";
        else {
          object.encodedEndpointType = [];
          if (options2.bytes !== Array)
            object.encodedEndpointType = $util.newBuffer(object.encodedEndpointType);
        }
        object.endpoint = "";
      }
      if (message.encodedEndpointType != null && message.hasOwnProperty("encodedEndpointType"))
        object.encodedEndpointType = options2.bytes === String ? $util.base64.encode(message.encodedEndpointType, 0, message.encodedEndpointType.length) : options2.bytes === Array ? Array.prototype.slice.call(message.encodedEndpointType) : message.encodedEndpointType;
      if (message.endpoint != null && message.hasOwnProperty("endpoint"))
        object.endpoint = message.endpoint;
      return object;
    };
    AddEndpointRequest.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return AddEndpointRequest;
  }();
  pruntime_rpc2.GetEndpointResponse = function() {
    function GetEndpointResponse(properties) {
      if (properties) {
        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          if (properties[keys[i]] != null)
            this[keys[i]] = properties[keys[i]];
      }
    }
    GetEndpointResponse.prototype.encodedEndpointPayload = null;
    GetEndpointResponse.prototype.signature = null;
    let $oneOfFields;
    Object.defineProperty(GetEndpointResponse.prototype, "_encodedEndpointPayload", {
      get: $util.oneOfGetter($oneOfFields = ["encodedEndpointPayload"]),
      set: $util.oneOfSetter($oneOfFields)
    });
    Object.defineProperty(GetEndpointResponse.prototype, "_signature", {
      get: $util.oneOfGetter($oneOfFields = ["signature"]),
      set: $util.oneOfSetter($oneOfFields)
    });
    GetEndpointResponse.create = function create2(properties) {
      return new GetEndpointResponse(properties);
    };
    GetEndpointResponse.encode = function encode(message, writer) {
      if (!writer)
        writer = $Writer.create();
      if (message.encodedEndpointPayload != null && Object.hasOwnProperty.call(message, "encodedEndpointPayload"))
        writer.uint32(
          /* id 1, wireType 2 =*/
          10
        ).bytes(message.encodedEndpointPayload);
      if (message.signature != null && Object.hasOwnProperty.call(message, "signature"))
        writer.uint32(
          /* id 2, wireType 2 =*/
          18
        ).bytes(message.signature);
      return writer;
    };
    GetEndpointResponse.encodeDelimited = function encodeDelimited(message, writer) {
      return this.encode(message, writer).ldelim();
    };
    GetEndpointResponse.decode = function decode(reader, length) {
      if (!(reader instanceof $Reader))
        reader = $Reader.create(reader);
      let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.pruntime_rpc.GetEndpointResponse();
      while (reader.pos < end) {
        let tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.encodedEndpointPayload = reader.bytes();
            break;
          case 2:
            message.signature = reader.bytes();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    };
    GetEndpointResponse.decodeDelimited = function decodeDelimited(reader) {
      if (!(reader instanceof $Reader))
        reader = new $Reader(reader);
      return this.decode(reader, reader.uint32());
    };
    GetEndpointResponse.verify = function verify(message) {
      if (typeof message !== "object" || message === null)
        return "object expected";
      let properties = {};
      if (message.encodedEndpointPayload != null && message.hasOwnProperty("encodedEndpointPayload")) {
        properties._encodedEndpointPayload = 1;
        if (!(message.encodedEndpointPayload && typeof message.encodedEndpointPayload.length === "number" || $util.isString(message.encodedEndpointPayload)))
          return "encodedEndpointPayload: buffer expected";
      }
      if (message.signature != null && message.hasOwnProperty("signature")) {
        properties._signature = 1;
        if (!(message.signature && typeof message.signature.length === "number" || $util.isString(message.signature)))
          return "signature: buffer expected";
      }
      return null;
    };
    GetEndpointResponse.fromObject = function fromObject(object) {
      if (object instanceof $root.pruntime_rpc.GetEndpointResponse)
        return object;
      let message = new $root.pruntime_rpc.GetEndpointResponse();
      if (object.encodedEndpointPayload != null) {
        if (typeof object.encodedEndpointPayload === "string")
          $util.base64.decode(object.encodedEndpointPayload, message.encodedEndpointPayload = $util.newBuffer($util.base64.length(object.encodedEndpointPayload)), 0);
        else if (object.encodedEndpointPayload.length)
          message.encodedEndpointPayload = object.encodedEndpointPayload;
      }
      if (object.signature != null) {
        if (typeof object.signature === "string")
          $util.base64.decode(object.signature, message.signature = $util.newBuffer($util.base64.length(object.signature)), 0);
        else if (object.signature.length)
          message.signature = object.signature;
      }
      return message;
    };
    GetEndpointResponse.toObject = function toObject(message, options2) {
      if (!options2)
        options2 = {};
      let object = {};
      if (message.encodedEndpointPayload != null && message.hasOwnProperty("encodedEndpointPayload")) {
        object.encodedEndpointPayload = options2.bytes === String ? $util.base64.encode(message.encodedEndpointPayload, 0, message.encodedEndpointPayload.length) : options2.bytes === Array ? Array.prototype.slice.call(message.encodedEndpointPayload) : message.encodedEndpointPayload;
        if (options2.oneofs)
          object._encodedEndpointPayload = "encodedEndpointPayload";
      }
      if (message.signature != null && message.hasOwnProperty("signature")) {
        object.signature = options2.bytes === String ? $util.base64.encode(message.signature, 0, message.signature.length) : options2.bytes === Array ? Array.prototype.slice.call(message.signature) : message.signature;
        if (options2.oneofs)
          object._signature = "signature";
      }
      return object;
    };
    GetEndpointResponse.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GetEndpointResponse;
  }();
  pruntime_rpc2.SignEndpointsRequest = function() {
    function SignEndpointsRequest(properties) {
      if (properties) {
        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          if (properties[keys[i]] != null)
            this[keys[i]] = properties[keys[i]];
      }
    }
    SignEndpointsRequest.prototype.encodedEndpoints = $util.newBuffer([]);
    SignEndpointsRequest.create = function create2(properties) {
      return new SignEndpointsRequest(properties);
    };
    SignEndpointsRequest.encode = function encode(message, writer) {
      if (!writer)
        writer = $Writer.create();
      if (message.encodedEndpoints != null && Object.hasOwnProperty.call(message, "encodedEndpoints"))
        writer.uint32(
          /* id 1, wireType 2 =*/
          10
        ).bytes(message.encodedEndpoints);
      return writer;
    };
    SignEndpointsRequest.encodeDelimited = function encodeDelimited(message, writer) {
      return this.encode(message, writer).ldelim();
    };
    SignEndpointsRequest.decode = function decode(reader, length) {
      if (!(reader instanceof $Reader))
        reader = $Reader.create(reader);
      let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.pruntime_rpc.SignEndpointsRequest();
      while (reader.pos < end) {
        let tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.encodedEndpoints = reader.bytes();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    };
    SignEndpointsRequest.decodeDelimited = function decodeDelimited(reader) {
      if (!(reader instanceof $Reader))
        reader = new $Reader(reader);
      return this.decode(reader, reader.uint32());
    };
    SignEndpointsRequest.verify = function verify(message) {
      if (typeof message !== "object" || message === null)
        return "object expected";
      if (message.encodedEndpoints != null && message.hasOwnProperty("encodedEndpoints")) {
        if (!(message.encodedEndpoints && typeof message.encodedEndpoints.length === "number" || $util.isString(message.encodedEndpoints)))
          return "encodedEndpoints: buffer expected";
      }
      return null;
    };
    SignEndpointsRequest.fromObject = function fromObject(object) {
      if (object instanceof $root.pruntime_rpc.SignEndpointsRequest)
        return object;
      let message = new $root.pruntime_rpc.SignEndpointsRequest();
      if (object.encodedEndpoints != null) {
        if (typeof object.encodedEndpoints === "string")
          $util.base64.decode(object.encodedEndpoints, message.encodedEndpoints = $util.newBuffer($util.base64.length(object.encodedEndpoints)), 0);
        else if (object.encodedEndpoints.length)
          message.encodedEndpoints = object.encodedEndpoints;
      }
      return message;
    };
    SignEndpointsRequest.toObject = function toObject(message, options2) {
      if (!options2)
        options2 = {};
      let object = {};
      if (options2.defaults)
        if (options2.bytes === String)
          object.encodedEndpoints = "";
        else {
          object.encodedEndpoints = [];
          if (options2.bytes !== Array)
            object.encodedEndpoints = $util.newBuffer(object.encodedEndpoints);
        }
      if (message.encodedEndpoints != null && message.hasOwnProperty("encodedEndpoints"))
        object.encodedEndpoints = options2.bytes === String ? $util.base64.encode(message.encodedEndpoints, 0, message.encodedEndpoints.length) : options2.bytes === Array ? Array.prototype.slice.call(message.encodedEndpoints) : message.encodedEndpoints;
      return object;
    };
    SignEndpointsRequest.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return SignEndpointsRequest;
  }();
  pruntime_rpc2.DerivePhalaI2pKeyResponse = function() {
    function DerivePhalaI2pKeyResponse(properties) {
      if (properties) {
        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          if (properties[keys[i]] != null)
            this[keys[i]] = properties[keys[i]];
      }
    }
    DerivePhalaI2pKeyResponse.prototype.phalaI2pKey = $util.newBuffer([]);
    DerivePhalaI2pKeyResponse.create = function create2(properties) {
      return new DerivePhalaI2pKeyResponse(properties);
    };
    DerivePhalaI2pKeyResponse.encode = function encode(message, writer) {
      if (!writer)
        writer = $Writer.create();
      if (message.phalaI2pKey != null && Object.hasOwnProperty.call(message, "phalaI2pKey"))
        writer.uint32(
          /* id 1, wireType 2 =*/
          10
        ).bytes(message.phalaI2pKey);
      return writer;
    };
    DerivePhalaI2pKeyResponse.encodeDelimited = function encodeDelimited(message, writer) {
      return this.encode(message, writer).ldelim();
    };
    DerivePhalaI2pKeyResponse.decode = function decode(reader, length) {
      if (!(reader instanceof $Reader))
        reader = $Reader.create(reader);
      let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.pruntime_rpc.DerivePhalaI2pKeyResponse();
      while (reader.pos < end) {
        let tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.phalaI2pKey = reader.bytes();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    };
    DerivePhalaI2pKeyResponse.decodeDelimited = function decodeDelimited(reader) {
      if (!(reader instanceof $Reader))
        reader = new $Reader(reader);
      return this.decode(reader, reader.uint32());
    };
    DerivePhalaI2pKeyResponse.verify = function verify(message) {
      if (typeof message !== "object" || message === null)
        return "object expected";
      if (message.phalaI2pKey != null && message.hasOwnProperty("phalaI2pKey")) {
        if (!(message.phalaI2pKey && typeof message.phalaI2pKey.length === "number" || $util.isString(message.phalaI2pKey)))
          return "phalaI2pKey: buffer expected";
      }
      return null;
    };
    DerivePhalaI2pKeyResponse.fromObject = function fromObject(object) {
      if (object instanceof $root.pruntime_rpc.DerivePhalaI2pKeyResponse)
        return object;
      let message = new $root.pruntime_rpc.DerivePhalaI2pKeyResponse();
      if (object.phalaI2pKey != null) {
        if (typeof object.phalaI2pKey === "string")
          $util.base64.decode(object.phalaI2pKey, message.phalaI2pKey = $util.newBuffer($util.base64.length(object.phalaI2pKey)), 0);
        else if (object.phalaI2pKey.length)
          message.phalaI2pKey = object.phalaI2pKey;
      }
      return message;
    };
    DerivePhalaI2pKeyResponse.toObject = function toObject(message, options2) {
      if (!options2)
        options2 = {};
      let object = {};
      if (options2.defaults)
        if (options2.bytes === String)
          object.phalaI2pKey = "";
        else {
          object.phalaI2pKey = [];
          if (options2.bytes !== Array)
            object.phalaI2pKey = $util.newBuffer(object.phalaI2pKey);
        }
      if (message.phalaI2pKey != null && message.hasOwnProperty("phalaI2pKey"))
        object.phalaI2pKey = options2.bytes === String ? $util.base64.encode(message.phalaI2pKey, 0, message.phalaI2pKey.length) : options2.bytes === Array ? Array.prototype.slice.call(message.phalaI2pKey) : message.phalaI2pKey;
      return object;
    };
    DerivePhalaI2pKeyResponse.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return DerivePhalaI2pKeyResponse;
  }();
  pruntime_rpc2.TokenomicStat = function() {
    function TokenomicStat(properties) {
      if (properties) {
        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          if (properties[keys[i]] != null)
            this[keys[i]] = properties[keys[i]];
      }
    }
    TokenomicStat.prototype.lastPayout = "";
    TokenomicStat.prototype.lastPayoutAtBlock = 0;
    TokenomicStat.prototype.totalPayout = "";
    TokenomicStat.prototype.totalPayoutCount = 0;
    TokenomicStat.prototype.lastSlash = "";
    TokenomicStat.prototype.lastSlashAtBlock = 0;
    TokenomicStat.prototype.totalSlash = "";
    TokenomicStat.prototype.totalSlashCount = 0;
    TokenomicStat.create = function create2(properties) {
      return new TokenomicStat(properties);
    };
    TokenomicStat.encode = function encode(message, writer) {
      if (!writer)
        writer = $Writer.create();
      if (message.lastPayout != null && Object.hasOwnProperty.call(message, "lastPayout"))
        writer.uint32(
          /* id 1, wireType 2 =*/
          10
        ).string(message.lastPayout);
      if (message.lastPayoutAtBlock != null && Object.hasOwnProperty.call(message, "lastPayoutAtBlock"))
        writer.uint32(
          /* id 2, wireType 0 =*/
          16
        ).uint32(message.lastPayoutAtBlock);
      if (message.totalPayout != null && Object.hasOwnProperty.call(message, "totalPayout"))
        writer.uint32(
          /* id 3, wireType 2 =*/
          26
        ).string(message.totalPayout);
      if (message.totalPayoutCount != null && Object.hasOwnProperty.call(message, "totalPayoutCount"))
        writer.uint32(
          /* id 4, wireType 0 =*/
          32
        ).uint32(message.totalPayoutCount);
      if (message.lastSlash != null && Object.hasOwnProperty.call(message, "lastSlash"))
        writer.uint32(
          /* id 5, wireType 2 =*/
          42
        ).string(message.lastSlash);
      if (message.lastSlashAtBlock != null && Object.hasOwnProperty.call(message, "lastSlashAtBlock"))
        writer.uint32(
          /* id 6, wireType 0 =*/
          48
        ).uint32(message.lastSlashAtBlock);
      if (message.totalSlash != null && Object.hasOwnProperty.call(message, "totalSlash"))
        writer.uint32(
          /* id 7, wireType 2 =*/
          58
        ).string(message.totalSlash);
      if (message.totalSlashCount != null && Object.hasOwnProperty.call(message, "totalSlashCount"))
        writer.uint32(
          /* id 8, wireType 0 =*/
          64
        ).uint32(message.totalSlashCount);
      return writer;
    };
    TokenomicStat.encodeDelimited = function encodeDelimited(message, writer) {
      return this.encode(message, writer).ldelim();
    };
    TokenomicStat.decode = function decode(reader, length) {
      if (!(reader instanceof $Reader))
        reader = $Reader.create(reader);
      let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.pruntime_rpc.TokenomicStat();
      while (reader.pos < end) {
        let tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.lastPayout = reader.string();
            break;
          case 2:
            message.lastPayoutAtBlock = reader.uint32();
            break;
          case 3:
            message.totalPayout = reader.string();
            break;
          case 4:
            message.totalPayoutCount = reader.uint32();
            break;
          case 5:
            message.lastSlash = reader.string();
            break;
          case 6:
            message.lastSlashAtBlock = reader.uint32();
            break;
          case 7:
            message.totalSlash = reader.string();
            break;
          case 8:
            message.totalSlashCount = reader.uint32();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    };
    TokenomicStat.decodeDelimited = function decodeDelimited(reader) {
      if (!(reader instanceof $Reader))
        reader = new $Reader(reader);
      return this.decode(reader, reader.uint32());
    };
    TokenomicStat.verify = function verify(message) {
      if (typeof message !== "object" || message === null)
        return "object expected";
      if (message.lastPayout != null && message.hasOwnProperty("lastPayout")) {
        if (!$util.isString(message.lastPayout))
          return "lastPayout: string expected";
      }
      if (message.lastPayoutAtBlock != null && message.hasOwnProperty("lastPayoutAtBlock")) {
        if (!$util.isInteger(message.lastPayoutAtBlock))
          return "lastPayoutAtBlock: integer expected";
      }
      if (message.totalPayout != null && message.hasOwnProperty("totalPayout")) {
        if (!$util.isString(message.totalPayout))
          return "totalPayout: string expected";
      }
      if (message.totalPayoutCount != null && message.hasOwnProperty("totalPayoutCount")) {
        if (!$util.isInteger(message.totalPayoutCount))
          return "totalPayoutCount: integer expected";
      }
      if (message.lastSlash != null && message.hasOwnProperty("lastSlash")) {
        if (!$util.isString(message.lastSlash))
          return "lastSlash: string expected";
      }
      if (message.lastSlashAtBlock != null && message.hasOwnProperty("lastSlashAtBlock")) {
        if (!$util.isInteger(message.lastSlashAtBlock))
          return "lastSlashAtBlock: integer expected";
      }
      if (message.totalSlash != null && message.hasOwnProperty("totalSlash")) {
        if (!$util.isString(message.totalSlash))
          return "totalSlash: string expected";
      }
      if (message.totalSlashCount != null && message.hasOwnProperty("totalSlashCount")) {
        if (!$util.isInteger(message.totalSlashCount))
          return "totalSlashCount: integer expected";
      }
      return null;
    };
    TokenomicStat.fromObject = function fromObject(object) {
      if (object instanceof $root.pruntime_rpc.TokenomicStat)
        return object;
      let message = new $root.pruntime_rpc.TokenomicStat();
      if (object.lastPayout != null)
        message.lastPayout = String(object.lastPayout);
      if (object.lastPayoutAtBlock != null)
        message.lastPayoutAtBlock = object.lastPayoutAtBlock >>> 0;
      if (object.totalPayout != null)
        message.totalPayout = String(object.totalPayout);
      if (object.totalPayoutCount != null)
        message.totalPayoutCount = object.totalPayoutCount >>> 0;
      if (object.lastSlash != null)
        message.lastSlash = String(object.lastSlash);
      if (object.lastSlashAtBlock != null)
        message.lastSlashAtBlock = object.lastSlashAtBlock >>> 0;
      if (object.totalSlash != null)
        message.totalSlash = String(object.totalSlash);
      if (object.totalSlashCount != null)
        message.totalSlashCount = object.totalSlashCount >>> 0;
      return message;
    };
    TokenomicStat.toObject = function toObject(message, options2) {
      if (!options2)
        options2 = {};
      let object = {};
      if (options2.defaults) {
        object.lastPayout = "";
        object.lastPayoutAtBlock = 0;
        object.totalPayout = "";
        object.totalPayoutCount = 0;
        object.lastSlash = "";
        object.lastSlashAtBlock = 0;
        object.totalSlash = "";
        object.totalSlashCount = 0;
      }
      if (message.lastPayout != null && message.hasOwnProperty("lastPayout"))
        object.lastPayout = message.lastPayout;
      if (message.lastPayoutAtBlock != null && message.hasOwnProperty("lastPayoutAtBlock"))
        object.lastPayoutAtBlock = message.lastPayoutAtBlock;
      if (message.totalPayout != null && message.hasOwnProperty("totalPayout"))
        object.totalPayout = message.totalPayout;
      if (message.totalPayoutCount != null && message.hasOwnProperty("totalPayoutCount"))
        object.totalPayoutCount = message.totalPayoutCount;
      if (message.lastSlash != null && message.hasOwnProperty("lastSlash"))
        object.lastSlash = message.lastSlash;
      if (message.lastSlashAtBlock != null && message.hasOwnProperty("lastSlashAtBlock"))
        object.lastSlashAtBlock = message.lastSlashAtBlock;
      if (message.totalSlash != null && message.hasOwnProperty("totalSlash"))
        object.totalSlash = message.totalSlash;
      if (message.totalSlashCount != null && message.hasOwnProperty("totalSlashCount"))
        object.totalSlashCount = message.totalSlashCount;
      return object;
    };
    TokenomicStat.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return TokenomicStat;
  }();
  pruntime_rpc2.TokenomicInfo = function() {
    function TokenomicInfo(properties) {
      if (properties) {
        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          if (properties[keys[i]] != null)
            this[keys[i]] = properties[keys[i]];
      }
    }
    TokenomicInfo.prototype.v = "";
    TokenomicInfo.prototype.vInit = "";
    TokenomicInfo.prototype.vDeductible = "";
    TokenomicInfo.prototype.share = "";
    TokenomicInfo.prototype.vUpdateAt = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
    TokenomicInfo.prototype.vUpdateBlock = 0;
    TokenomicInfo.prototype.iterationLast = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
    TokenomicInfo.prototype.challengeTimeLast = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
    TokenomicInfo.prototype.pBench = "";
    TokenomicInfo.prototype.pInstant = "";
    TokenomicInfo.prototype.confidenceLevel = 0;
    TokenomicInfo.prototype.stat = null;
    TokenomicInfo.create = function create2(properties) {
      return new TokenomicInfo(properties);
    };
    TokenomicInfo.encode = function encode(message, writer) {
      if (!writer)
        writer = $Writer.create();
      if (message.v != null && Object.hasOwnProperty.call(message, "v"))
        writer.uint32(
          /* id 1, wireType 2 =*/
          10
        ).string(message.v);
      if (message.vInit != null && Object.hasOwnProperty.call(message, "vInit"))
        writer.uint32(
          /* id 2, wireType 2 =*/
          18
        ).string(message.vInit);
      if (message.vUpdateAt != null && Object.hasOwnProperty.call(message, "vUpdateAt"))
        writer.uint32(
          /* id 4, wireType 0 =*/
          32
        ).uint64(message.vUpdateAt);
      if (message.vUpdateBlock != null && Object.hasOwnProperty.call(message, "vUpdateBlock"))
        writer.uint32(
          /* id 5, wireType 0 =*/
          40
        ).uint32(message.vUpdateBlock);
      if (message.iterationLast != null && Object.hasOwnProperty.call(message, "iterationLast"))
        writer.uint32(
          /* id 6, wireType 0 =*/
          48
        ).uint64(message.iterationLast);
      if (message.challengeTimeLast != null && Object.hasOwnProperty.call(message, "challengeTimeLast"))
        writer.uint32(
          /* id 7, wireType 0 =*/
          56
        ).uint64(message.challengeTimeLast);
      if (message.pBench != null && Object.hasOwnProperty.call(message, "pBench"))
        writer.uint32(
          /* id 8, wireType 2 =*/
          66
        ).string(message.pBench);
      if (message.pInstant != null && Object.hasOwnProperty.call(message, "pInstant"))
        writer.uint32(
          /* id 9, wireType 2 =*/
          74
        ).string(message.pInstant);
      if (message.confidenceLevel != null && Object.hasOwnProperty.call(message, "confidenceLevel"))
        writer.uint32(
          /* id 10, wireType 0 =*/
          80
        ).uint32(message.confidenceLevel);
      if (message.vDeductible != null && Object.hasOwnProperty.call(message, "vDeductible"))
        writer.uint32(
          /* id 19, wireType 2 =*/
          154
        ).string(message.vDeductible);
      if (message.share != null && Object.hasOwnProperty.call(message, "share"))
        writer.uint32(
          /* id 20, wireType 2 =*/
          162
        ).string(message.share);
      if (message.stat != null && Object.hasOwnProperty.call(message, "stat"))
        $root.pruntime_rpc.TokenomicStat.encode(message.stat, writer.uint32(
          /* id 21, wireType 2 =*/
          170
        ).fork()).ldelim();
      return writer;
    };
    TokenomicInfo.encodeDelimited = function encodeDelimited(message, writer) {
      return this.encode(message, writer).ldelim();
    };
    TokenomicInfo.decode = function decode(reader, length) {
      if (!(reader instanceof $Reader))
        reader = $Reader.create(reader);
      let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.pruntime_rpc.TokenomicInfo();
      while (reader.pos < end) {
        let tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.v = reader.string();
            break;
          case 2:
            message.vInit = reader.string();
            break;
          case 19:
            message.vDeductible = reader.string();
            break;
          case 20:
            message.share = reader.string();
            break;
          case 4:
            message.vUpdateAt = reader.uint64();
            break;
          case 5:
            message.vUpdateBlock = reader.uint32();
            break;
          case 6:
            message.iterationLast = reader.uint64();
            break;
          case 7:
            message.challengeTimeLast = reader.uint64();
            break;
          case 8:
            message.pBench = reader.string();
            break;
          case 9:
            message.pInstant = reader.string();
            break;
          case 10:
            message.confidenceLevel = reader.uint32();
            break;
          case 21:
            message.stat = $root.pruntime_rpc.TokenomicStat.decode(reader, reader.uint32());
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    };
    TokenomicInfo.decodeDelimited = function decodeDelimited(reader) {
      if (!(reader instanceof $Reader))
        reader = new $Reader(reader);
      return this.decode(reader, reader.uint32());
    };
    TokenomicInfo.verify = function verify(message) {
      if (typeof message !== "object" || message === null)
        return "object expected";
      if (message.v != null && message.hasOwnProperty("v")) {
        if (!$util.isString(message.v))
          return "v: string expected";
      }
      if (message.vInit != null && message.hasOwnProperty("vInit")) {
        if (!$util.isString(message.vInit))
          return "vInit: string expected";
      }
      if (message.vDeductible != null && message.hasOwnProperty("vDeductible")) {
        if (!$util.isString(message.vDeductible))
          return "vDeductible: string expected";
      }
      if (message.share != null && message.hasOwnProperty("share")) {
        if (!$util.isString(message.share))
          return "share: string expected";
      }
      if (message.vUpdateAt != null && message.hasOwnProperty("vUpdateAt")) {
        if (!$util.isInteger(message.vUpdateAt) && !(message.vUpdateAt && $util.isInteger(message.vUpdateAt.low) && $util.isInteger(message.vUpdateAt.high)))
          return "vUpdateAt: integer|Long expected";
      }
      if (message.vUpdateBlock != null && message.hasOwnProperty("vUpdateBlock")) {
        if (!$util.isInteger(message.vUpdateBlock))
          return "vUpdateBlock: integer expected";
      }
      if (message.iterationLast != null && message.hasOwnProperty("iterationLast")) {
        if (!$util.isInteger(message.iterationLast) && !(message.iterationLast && $util.isInteger(message.iterationLast.low) && $util.isInteger(message.iterationLast.high)))
          return "iterationLast: integer|Long expected";
      }
      if (message.challengeTimeLast != null && message.hasOwnProperty("challengeTimeLast")) {
        if (!$util.isInteger(message.challengeTimeLast) && !(message.challengeTimeLast && $util.isInteger(message.challengeTimeLast.low) && $util.isInteger(message.challengeTimeLast.high)))
          return "challengeTimeLast: integer|Long expected";
      }
      if (message.pBench != null && message.hasOwnProperty("pBench")) {
        if (!$util.isString(message.pBench))
          return "pBench: string expected";
      }
      if (message.pInstant != null && message.hasOwnProperty("pInstant")) {
        if (!$util.isString(message.pInstant))
          return "pInstant: string expected";
      }
      if (message.confidenceLevel != null && message.hasOwnProperty("confidenceLevel")) {
        if (!$util.isInteger(message.confidenceLevel))
          return "confidenceLevel: integer expected";
      }
      if (message.stat != null && message.hasOwnProperty("stat")) {
        let error = $root.pruntime_rpc.TokenomicStat.verify(message.stat);
        if (error)
          return "stat." + error;
      }
      return null;
    };
    TokenomicInfo.fromObject = function fromObject(object) {
      if (object instanceof $root.pruntime_rpc.TokenomicInfo)
        return object;
      let message = new $root.pruntime_rpc.TokenomicInfo();
      if (object.v != null)
        message.v = String(object.v);
      if (object.vInit != null)
        message.vInit = String(object.vInit);
      if (object.vDeductible != null)
        message.vDeductible = String(object.vDeductible);
      if (object.share != null)
        message.share = String(object.share);
      if (object.vUpdateAt != null) {
        if ($util.Long)
          (message.vUpdateAt = $util.Long.fromValue(object.vUpdateAt)).unsigned = true;
        else if (typeof object.vUpdateAt === "string")
          message.vUpdateAt = parseInt(object.vUpdateAt, 10);
        else if (typeof object.vUpdateAt === "number")
          message.vUpdateAt = object.vUpdateAt;
        else if (typeof object.vUpdateAt === "object")
          message.vUpdateAt = new $util.LongBits(object.vUpdateAt.low >>> 0, object.vUpdateAt.high >>> 0).toNumber(true);
      }
      if (object.vUpdateBlock != null)
        message.vUpdateBlock = object.vUpdateBlock >>> 0;
      if (object.iterationLast != null) {
        if ($util.Long)
          (message.iterationLast = $util.Long.fromValue(object.iterationLast)).unsigned = true;
        else if (typeof object.iterationLast === "string")
          message.iterationLast = parseInt(object.iterationLast, 10);
        else if (typeof object.iterationLast === "number")
          message.iterationLast = object.iterationLast;
        else if (typeof object.iterationLast === "object")
          message.iterationLast = new $util.LongBits(object.iterationLast.low >>> 0, object.iterationLast.high >>> 0).toNumber(true);
      }
      if (object.challengeTimeLast != null) {
        if ($util.Long)
          (message.challengeTimeLast = $util.Long.fromValue(object.challengeTimeLast)).unsigned = true;
        else if (typeof object.challengeTimeLast === "string")
          message.challengeTimeLast = parseInt(object.challengeTimeLast, 10);
        else if (typeof object.challengeTimeLast === "number")
          message.challengeTimeLast = object.challengeTimeLast;
        else if (typeof object.challengeTimeLast === "object")
          message.challengeTimeLast = new $util.LongBits(object.challengeTimeLast.low >>> 0, object.challengeTimeLast.high >>> 0).toNumber(true);
      }
      if (object.pBench != null)
        message.pBench = String(object.pBench);
      if (object.pInstant != null)
        message.pInstant = String(object.pInstant);
      if (object.confidenceLevel != null)
        message.confidenceLevel = object.confidenceLevel >>> 0;
      if (object.stat != null) {
        if (typeof object.stat !== "object")
          throw TypeError(".pruntime_rpc.TokenomicInfo.stat: object expected");
        message.stat = $root.pruntime_rpc.TokenomicStat.fromObject(object.stat);
      }
      return message;
    };
    TokenomicInfo.toObject = function toObject(message, options2) {
      if (!options2)
        options2 = {};
      let object = {};
      if (options2.defaults) {
        object.v = "";
        object.vInit = "";
        if ($util.Long) {
          let long = new $util.Long(0, 0, true);
          object.vUpdateAt = options2.longs === String ? long.toString() : options2.longs === Number ? long.toNumber() : long;
        } else
          object.vUpdateAt = options2.longs === String ? "0" : 0;
        object.vUpdateBlock = 0;
        if ($util.Long) {
          let long = new $util.Long(0, 0, true);
          object.iterationLast = options2.longs === String ? long.toString() : options2.longs === Number ? long.toNumber() : long;
        } else
          object.iterationLast = options2.longs === String ? "0" : 0;
        if ($util.Long) {
          let long = new $util.Long(0, 0, true);
          object.challengeTimeLast = options2.longs === String ? long.toString() : options2.longs === Number ? long.toNumber() : long;
        } else
          object.challengeTimeLast = options2.longs === String ? "0" : 0;
        object.pBench = "";
        object.pInstant = "";
        object.confidenceLevel = 0;
        object.vDeductible = "";
        object.share = "";
        object.stat = null;
      }
      if (message.v != null && message.hasOwnProperty("v"))
        object.v = message.v;
      if (message.vInit != null && message.hasOwnProperty("vInit"))
        object.vInit = message.vInit;
      if (message.vUpdateAt != null && message.hasOwnProperty("vUpdateAt"))
        if (typeof message.vUpdateAt === "number")
          object.vUpdateAt = options2.longs === String ? String(message.vUpdateAt) : message.vUpdateAt;
        else
          object.vUpdateAt = options2.longs === String ? $util.Long.prototype.toString.call(message.vUpdateAt) : options2.longs === Number ? new $util.LongBits(message.vUpdateAt.low >>> 0, message.vUpdateAt.high >>> 0).toNumber(true) : message.vUpdateAt;
      if (message.vUpdateBlock != null && message.hasOwnProperty("vUpdateBlock"))
        object.vUpdateBlock = message.vUpdateBlock;
      if (message.iterationLast != null && message.hasOwnProperty("iterationLast"))
        if (typeof message.iterationLast === "number")
          object.iterationLast = options2.longs === String ? String(message.iterationLast) : message.iterationLast;
        else
          object.iterationLast = options2.longs === String ? $util.Long.prototype.toString.call(message.iterationLast) : options2.longs === Number ? new $util.LongBits(message.iterationLast.low >>> 0, message.iterationLast.high >>> 0).toNumber(true) : message.iterationLast;
      if (message.challengeTimeLast != null && message.hasOwnProperty("challengeTimeLast"))
        if (typeof message.challengeTimeLast === "number")
          object.challengeTimeLast = options2.longs === String ? String(message.challengeTimeLast) : message.challengeTimeLast;
        else
          object.challengeTimeLast = options2.longs === String ? $util.Long.prototype.toString.call(message.challengeTimeLast) : options2.longs === Number ? new $util.LongBits(message.challengeTimeLast.low >>> 0, message.challengeTimeLast.high >>> 0).toNumber(true) : message.challengeTimeLast;
      if (message.pBench != null && message.hasOwnProperty("pBench"))
        object.pBench = message.pBench;
      if (message.pInstant != null && message.hasOwnProperty("pInstant"))
        object.pInstant = message.pInstant;
      if (message.confidenceLevel != null && message.hasOwnProperty("confidenceLevel"))
        object.confidenceLevel = message.confidenceLevel;
      if (message.vDeductible != null && message.hasOwnProperty("vDeductible"))
        object.vDeductible = message.vDeductible;
      if (message.share != null && message.hasOwnProperty("share"))
        object.share = message.share;
      if (message.stat != null && message.hasOwnProperty("stat"))
        object.stat = $root.pruntime_rpc.TokenomicStat.toObject(message.stat, options2);
      return object;
    };
    TokenomicInfo.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return TokenomicInfo;
  }();
  pruntime_rpc2.NetworkConfigResponse = function() {
    function NetworkConfigResponse(properties) {
      if (properties) {
        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          if (properties[keys[i]] != null)
            this[keys[i]] = properties[keys[i]];
      }
    }
    NetworkConfigResponse.prototype.publicRpcPort = null;
    NetworkConfigResponse.prototype.config = null;
    let $oneOfFields;
    Object.defineProperty(NetworkConfigResponse.prototype, "_publicRpcPort", {
      get: $util.oneOfGetter($oneOfFields = ["publicRpcPort"]),
      set: $util.oneOfSetter($oneOfFields)
    });
    Object.defineProperty(NetworkConfigResponse.prototype, "_config", {
      get: $util.oneOfGetter($oneOfFields = ["config"]),
      set: $util.oneOfSetter($oneOfFields)
    });
    NetworkConfigResponse.create = function create2(properties) {
      return new NetworkConfigResponse(properties);
    };
    NetworkConfigResponse.encode = function encode(message, writer) {
      if (!writer)
        writer = $Writer.create();
      if (message.publicRpcPort != null && Object.hasOwnProperty.call(message, "publicRpcPort"))
        writer.uint32(
          /* id 1, wireType 0 =*/
          8
        ).uint32(message.publicRpcPort);
      if (message.config != null && Object.hasOwnProperty.call(message, "config"))
        $root.pruntime_rpc.NetworkConfig.encode(message.config, writer.uint32(
          /* id 2, wireType 2 =*/
          18
        ).fork()).ldelim();
      return writer;
    };
    NetworkConfigResponse.encodeDelimited = function encodeDelimited(message, writer) {
      return this.encode(message, writer).ldelim();
    };
    NetworkConfigResponse.decode = function decode(reader, length) {
      if (!(reader instanceof $Reader))
        reader = $Reader.create(reader);
      let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.pruntime_rpc.NetworkConfigResponse();
      while (reader.pos < end) {
        let tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.publicRpcPort = reader.uint32();
            break;
          case 2:
            message.config = $root.pruntime_rpc.NetworkConfig.decode(reader, reader.uint32());
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    };
    NetworkConfigResponse.decodeDelimited = function decodeDelimited(reader) {
      if (!(reader instanceof $Reader))
        reader = new $Reader(reader);
      return this.decode(reader, reader.uint32());
    };
    NetworkConfigResponse.verify = function verify(message) {
      if (typeof message !== "object" || message === null)
        return "object expected";
      let properties = {};
      if (message.publicRpcPort != null && message.hasOwnProperty("publicRpcPort")) {
        properties._publicRpcPort = 1;
        if (!$util.isInteger(message.publicRpcPort))
          return "publicRpcPort: integer expected";
      }
      if (message.config != null && message.hasOwnProperty("config")) {
        properties._config = 1;
        {
          let error = $root.pruntime_rpc.NetworkConfig.verify(message.config);
          if (error)
            return "config." + error;
        }
      }
      return null;
    };
    NetworkConfigResponse.fromObject = function fromObject(object) {
      if (object instanceof $root.pruntime_rpc.NetworkConfigResponse)
        return object;
      let message = new $root.pruntime_rpc.NetworkConfigResponse();
      if (object.publicRpcPort != null)
        message.publicRpcPort = object.publicRpcPort >>> 0;
      if (object.config != null) {
        if (typeof object.config !== "object")
          throw TypeError(".pruntime_rpc.NetworkConfigResponse.config: object expected");
        message.config = $root.pruntime_rpc.NetworkConfig.fromObject(object.config);
      }
      return message;
    };
    NetworkConfigResponse.toObject = function toObject(message, options2) {
      if (!options2)
        options2 = {};
      let object = {};
      if (message.publicRpcPort != null && message.hasOwnProperty("publicRpcPort")) {
        object.publicRpcPort = message.publicRpcPort;
        if (options2.oneofs)
          object._publicRpcPort = "publicRpcPort";
      }
      if (message.config != null && message.hasOwnProperty("config")) {
        object.config = $root.pruntime_rpc.NetworkConfig.toObject(message.config, options2);
        if (options2.oneofs)
          object._config = "config";
      }
      return object;
    };
    NetworkConfigResponse.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return NetworkConfigResponse;
  }();
  pruntime_rpc2.NetworkConfig = function() {
    function NetworkConfig(properties) {
      if (properties) {
        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          if (properties[keys[i]] != null)
            this[keys[i]] = properties[keys[i]];
      }
    }
    NetworkConfig.prototype.allProxy = "";
    NetworkConfig.prototype.i2pProxy = "";
    NetworkConfig.create = function create2(properties) {
      return new NetworkConfig(properties);
    };
    NetworkConfig.encode = function encode(message, writer) {
      if (!writer)
        writer = $Writer.create();
      if (message.allProxy != null && Object.hasOwnProperty.call(message, "allProxy"))
        writer.uint32(
          /* id 2, wireType 2 =*/
          18
        ).string(message.allProxy);
      if (message.i2pProxy != null && Object.hasOwnProperty.call(message, "i2pProxy"))
        writer.uint32(
          /* id 3, wireType 2 =*/
          26
        ).string(message.i2pProxy);
      return writer;
    };
    NetworkConfig.encodeDelimited = function encodeDelimited(message, writer) {
      return this.encode(message, writer).ldelim();
    };
    NetworkConfig.decode = function decode(reader, length) {
      if (!(reader instanceof $Reader))
        reader = $Reader.create(reader);
      let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.pruntime_rpc.NetworkConfig();
      while (reader.pos < end) {
        let tag = reader.uint32();
        switch (tag >>> 3) {
          case 2:
            message.allProxy = reader.string();
            break;
          case 3:
            message.i2pProxy = reader.string();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    };
    NetworkConfig.decodeDelimited = function decodeDelimited(reader) {
      if (!(reader instanceof $Reader))
        reader = new $Reader(reader);
      return this.decode(reader, reader.uint32());
    };
    NetworkConfig.verify = function verify(message) {
      if (typeof message !== "object" || message === null)
        return "object expected";
      if (message.allProxy != null && message.hasOwnProperty("allProxy")) {
        if (!$util.isString(message.allProxy))
          return "allProxy: string expected";
      }
      if (message.i2pProxy != null && message.hasOwnProperty("i2pProxy")) {
        if (!$util.isString(message.i2pProxy))
          return "i2pProxy: string expected";
      }
      return null;
    };
    NetworkConfig.fromObject = function fromObject(object) {
      if (object instanceof $root.pruntime_rpc.NetworkConfig)
        return object;
      let message = new $root.pruntime_rpc.NetworkConfig();
      if (object.allProxy != null)
        message.allProxy = String(object.allProxy);
      if (object.i2pProxy != null)
        message.i2pProxy = String(object.i2pProxy);
      return message;
    };
    NetworkConfig.toObject = function toObject(message, options2) {
      if (!options2)
        options2 = {};
      let object = {};
      if (options2.defaults) {
        object.allProxy = "";
        object.i2pProxy = "";
      }
      if (message.allProxy != null && message.hasOwnProperty("allProxy"))
        object.allProxy = message.allProxy;
      if (message.i2pProxy != null && message.hasOwnProperty("i2pProxy"))
        object.i2pProxy = message.i2pProxy;
      return object;
    };
    NetworkConfig.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return NetworkConfig;
  }();
  pruntime_rpc2.HttpHeader = function() {
    function HttpHeader(properties) {
      if (properties) {
        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          if (properties[keys[i]] != null)
            this[keys[i]] = properties[keys[i]];
      }
    }
    HttpHeader.prototype.name = "";
    HttpHeader.prototype.value = "";
    HttpHeader.create = function create2(properties) {
      return new HttpHeader(properties);
    };
    HttpHeader.encode = function encode(message, writer) {
      if (!writer)
        writer = $Writer.create();
      if (message.name != null && Object.hasOwnProperty.call(message, "name"))
        writer.uint32(
          /* id 1, wireType 2 =*/
          10
        ).string(message.name);
      if (message.value != null && Object.hasOwnProperty.call(message, "value"))
        writer.uint32(
          /* id 2, wireType 2 =*/
          18
        ).string(message.value);
      return writer;
    };
    HttpHeader.encodeDelimited = function encodeDelimited(message, writer) {
      return this.encode(message, writer).ldelim();
    };
    HttpHeader.decode = function decode(reader, length) {
      if (!(reader instanceof $Reader))
        reader = $Reader.create(reader);
      let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.pruntime_rpc.HttpHeader();
      while (reader.pos < end) {
        let tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.name = reader.string();
            break;
          case 2:
            message.value = reader.string();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    };
    HttpHeader.decodeDelimited = function decodeDelimited(reader) {
      if (!(reader instanceof $Reader))
        reader = new $Reader(reader);
      return this.decode(reader, reader.uint32());
    };
    HttpHeader.verify = function verify(message) {
      if (typeof message !== "object" || message === null)
        return "object expected";
      if (message.name != null && message.hasOwnProperty("name")) {
        if (!$util.isString(message.name))
          return "name: string expected";
      }
      if (message.value != null && message.hasOwnProperty("value")) {
        if (!$util.isString(message.value))
          return "value: string expected";
      }
      return null;
    };
    HttpHeader.fromObject = function fromObject(object) {
      if (object instanceof $root.pruntime_rpc.HttpHeader)
        return object;
      let message = new $root.pruntime_rpc.HttpHeader();
      if (object.name != null)
        message.name = String(object.name);
      if (object.value != null)
        message.value = String(object.value);
      return message;
    };
    HttpHeader.toObject = function toObject(message, options2) {
      if (!options2)
        options2 = {};
      let object = {};
      if (options2.defaults) {
        object.name = "";
        object.value = "";
      }
      if (message.name != null && message.hasOwnProperty("name"))
        object.name = message.name;
      if (message.value != null && message.hasOwnProperty("value"))
        object.value = message.value;
      return object;
    };
    HttpHeader.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return HttpHeader;
  }();
  pruntime_rpc2.HttpRequest = function() {
    function HttpRequest(properties) {
      this.headers = [];
      if (properties) {
        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          if (properties[keys[i]] != null)
            this[keys[i]] = properties[keys[i]];
      }
    }
    HttpRequest.prototype.url = "";
    HttpRequest.prototype.method = "";
    HttpRequest.prototype.headers = $util.emptyArray;
    HttpRequest.prototype.body = $util.newBuffer([]);
    HttpRequest.create = function create2(properties) {
      return new HttpRequest(properties);
    };
    HttpRequest.encode = function encode(message, writer) {
      if (!writer)
        writer = $Writer.create();
      if (message.url != null && Object.hasOwnProperty.call(message, "url"))
        writer.uint32(
          /* id 1, wireType 2 =*/
          10
        ).string(message.url);
      if (message.method != null && Object.hasOwnProperty.call(message, "method"))
        writer.uint32(
          /* id 2, wireType 2 =*/
          18
        ).string(message.method);
      if (message.headers != null && message.headers.length)
        for (let i = 0; i < message.headers.length; ++i)
          $root.pruntime_rpc.HttpHeader.encode(message.headers[i], writer.uint32(
            /* id 3, wireType 2 =*/
            26
          ).fork()).ldelim();
      if (message.body != null && Object.hasOwnProperty.call(message, "body"))
        writer.uint32(
          /* id 4, wireType 2 =*/
          34
        ).bytes(message.body);
      return writer;
    };
    HttpRequest.encodeDelimited = function encodeDelimited(message, writer) {
      return this.encode(message, writer).ldelim();
    };
    HttpRequest.decode = function decode(reader, length) {
      if (!(reader instanceof $Reader))
        reader = $Reader.create(reader);
      let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.pruntime_rpc.HttpRequest();
      while (reader.pos < end) {
        let tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.url = reader.string();
            break;
          case 2:
            message.method = reader.string();
            break;
          case 3:
            if (!(message.headers && message.headers.length))
              message.headers = [];
            message.headers.push($root.pruntime_rpc.HttpHeader.decode(reader, reader.uint32()));
            break;
          case 4:
            message.body = reader.bytes();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    };
    HttpRequest.decodeDelimited = function decodeDelimited(reader) {
      if (!(reader instanceof $Reader))
        reader = new $Reader(reader);
      return this.decode(reader, reader.uint32());
    };
    HttpRequest.verify = function verify(message) {
      if (typeof message !== "object" || message === null)
        return "object expected";
      if (message.url != null && message.hasOwnProperty("url")) {
        if (!$util.isString(message.url))
          return "url: string expected";
      }
      if (message.method != null && message.hasOwnProperty("method")) {
        if (!$util.isString(message.method))
          return "method: string expected";
      }
      if (message.headers != null && message.hasOwnProperty("headers")) {
        if (!Array.isArray(message.headers))
          return "headers: array expected";
        for (let i = 0; i < message.headers.length; ++i) {
          let error = $root.pruntime_rpc.HttpHeader.verify(message.headers[i]);
          if (error)
            return "headers." + error;
        }
      }
      if (message.body != null && message.hasOwnProperty("body")) {
        if (!(message.body && typeof message.body.length === "number" || $util.isString(message.body)))
          return "body: buffer expected";
      }
      return null;
    };
    HttpRequest.fromObject = function fromObject(object) {
      if (object instanceof $root.pruntime_rpc.HttpRequest)
        return object;
      let message = new $root.pruntime_rpc.HttpRequest();
      if (object.url != null)
        message.url = String(object.url);
      if (object.method != null)
        message.method = String(object.method);
      if (object.headers) {
        if (!Array.isArray(object.headers))
          throw TypeError(".pruntime_rpc.HttpRequest.headers: array expected");
        message.headers = [];
        for (let i = 0; i < object.headers.length; ++i) {
          if (typeof object.headers[i] !== "object")
            throw TypeError(".pruntime_rpc.HttpRequest.headers: object expected");
          message.headers[i] = $root.pruntime_rpc.HttpHeader.fromObject(object.headers[i]);
        }
      }
      if (object.body != null) {
        if (typeof object.body === "string")
          $util.base64.decode(object.body, message.body = $util.newBuffer($util.base64.length(object.body)), 0);
        else if (object.body.length)
          message.body = object.body;
      }
      return message;
    };
    HttpRequest.toObject = function toObject(message, options2) {
      if (!options2)
        options2 = {};
      let object = {};
      if (options2.arrays || options2.defaults)
        object.headers = [];
      if (options2.defaults) {
        object.url = "";
        object.method = "";
        if (options2.bytes === String)
          object.body = "";
        else {
          object.body = [];
          if (options2.bytes !== Array)
            object.body = $util.newBuffer(object.body);
        }
      }
      if (message.url != null && message.hasOwnProperty("url"))
        object.url = message.url;
      if (message.method != null && message.hasOwnProperty("method"))
        object.method = message.method;
      if (message.headers && message.headers.length) {
        object.headers = [];
        for (let j = 0; j < message.headers.length; ++j)
          object.headers[j] = $root.pruntime_rpc.HttpHeader.toObject(message.headers[j], options2);
      }
      if (message.body != null && message.hasOwnProperty("body"))
        object.body = options2.bytes === String ? $util.base64.encode(message.body, 0, message.body.length) : options2.bytes === Array ? Array.prototype.slice.call(message.body) : message.body;
      return object;
    };
    HttpRequest.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return HttpRequest;
  }();
  pruntime_rpc2.HttpResponse = function() {
    function HttpResponse(properties) {
      this.headers = [];
      if (properties) {
        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          if (properties[keys[i]] != null)
            this[keys[i]] = properties[keys[i]];
      }
    }
    HttpResponse.prototype.statusCode = 0;
    HttpResponse.prototype.headers = $util.emptyArray;
    HttpResponse.prototype.body = $util.newBuffer([]);
    HttpResponse.create = function create2(properties) {
      return new HttpResponse(properties);
    };
    HttpResponse.encode = function encode(message, writer) {
      if (!writer)
        writer = $Writer.create();
      if (message.statusCode != null && Object.hasOwnProperty.call(message, "statusCode"))
        writer.uint32(
          /* id 1, wireType 0 =*/
          8
        ).uint32(message.statusCode);
      if (message.headers != null && message.headers.length)
        for (let i = 0; i < message.headers.length; ++i)
          $root.pruntime_rpc.HttpHeader.encode(message.headers[i], writer.uint32(
            /* id 2, wireType 2 =*/
            18
          ).fork()).ldelim();
      if (message.body != null && Object.hasOwnProperty.call(message, "body"))
        writer.uint32(
          /* id 3, wireType 2 =*/
          26
        ).bytes(message.body);
      return writer;
    };
    HttpResponse.encodeDelimited = function encodeDelimited(message, writer) {
      return this.encode(message, writer).ldelim();
    };
    HttpResponse.decode = function decode(reader, length) {
      if (!(reader instanceof $Reader))
        reader = $Reader.create(reader);
      let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.pruntime_rpc.HttpResponse();
      while (reader.pos < end) {
        let tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.statusCode = reader.uint32();
            break;
          case 2:
            if (!(message.headers && message.headers.length))
              message.headers = [];
            message.headers.push($root.pruntime_rpc.HttpHeader.decode(reader, reader.uint32()));
            break;
          case 3:
            message.body = reader.bytes();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    };
    HttpResponse.decodeDelimited = function decodeDelimited(reader) {
      if (!(reader instanceof $Reader))
        reader = new $Reader(reader);
      return this.decode(reader, reader.uint32());
    };
    HttpResponse.verify = function verify(message) {
      if (typeof message !== "object" || message === null)
        return "object expected";
      if (message.statusCode != null && message.hasOwnProperty("statusCode")) {
        if (!$util.isInteger(message.statusCode))
          return "statusCode: integer expected";
      }
      if (message.headers != null && message.hasOwnProperty("headers")) {
        if (!Array.isArray(message.headers))
          return "headers: array expected";
        for (let i = 0; i < message.headers.length; ++i) {
          let error = $root.pruntime_rpc.HttpHeader.verify(message.headers[i]);
          if (error)
            return "headers." + error;
        }
      }
      if (message.body != null && message.hasOwnProperty("body")) {
        if (!(message.body && typeof message.body.length === "number" || $util.isString(message.body)))
          return "body: buffer expected";
      }
      return null;
    };
    HttpResponse.fromObject = function fromObject(object) {
      if (object instanceof $root.pruntime_rpc.HttpResponse)
        return object;
      let message = new $root.pruntime_rpc.HttpResponse();
      if (object.statusCode != null)
        message.statusCode = object.statusCode >>> 0;
      if (object.headers) {
        if (!Array.isArray(object.headers))
          throw TypeError(".pruntime_rpc.HttpResponse.headers: array expected");
        message.headers = [];
        for (let i = 0; i < object.headers.length; ++i) {
          if (typeof object.headers[i] !== "object")
            throw TypeError(".pruntime_rpc.HttpResponse.headers: object expected");
          message.headers[i] = $root.pruntime_rpc.HttpHeader.fromObject(object.headers[i]);
        }
      }
      if (object.body != null) {
        if (typeof object.body === "string")
          $util.base64.decode(object.body, message.body = $util.newBuffer($util.base64.length(object.body)), 0);
        else if (object.body.length)
          message.body = object.body;
      }
      return message;
    };
    HttpResponse.toObject = function toObject(message, options2) {
      if (!options2)
        options2 = {};
      let object = {};
      if (options2.arrays || options2.defaults)
        object.headers = [];
      if (options2.defaults) {
        object.statusCode = 0;
        if (options2.bytes === String)
          object.body = "";
        else {
          object.body = [];
          if (options2.bytes !== Array)
            object.body = $util.newBuffer(object.body);
        }
      }
      if (message.statusCode != null && message.hasOwnProperty("statusCode"))
        object.statusCode = message.statusCode;
      if (message.headers && message.headers.length) {
        object.headers = [];
        for (let j = 0; j < message.headers.length; ++j)
          object.headers[j] = $root.pruntime_rpc.HttpHeader.toObject(message.headers[j], options2);
      }
      if (message.body != null && message.hasOwnProperty("body"))
        object.body = options2.bytes === String ? $util.base64.encode(message.body, 0, message.body.length) : options2.bytes === Array ? Array.prototype.slice.call(message.body) : message.body;
      return object;
    };
    HttpResponse.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return HttpResponse;
  }();
  pruntime_rpc2.GetContractInfoRequest = function() {
    function GetContractInfoRequest(properties) {
      this.contracts = [];
      if (properties) {
        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          if (properties[keys[i]] != null)
            this[keys[i]] = properties[keys[i]];
      }
    }
    GetContractInfoRequest.prototype.contracts = $util.emptyArray;
    GetContractInfoRequest.create = function create2(properties) {
      return new GetContractInfoRequest(properties);
    };
    GetContractInfoRequest.encode = function encode(message, writer) {
      if (!writer)
        writer = $Writer.create();
      if (message.contracts != null && message.contracts.length)
        for (let i = 0; i < message.contracts.length; ++i)
          writer.uint32(
            /* id 1, wireType 2 =*/
            10
          ).string(message.contracts[i]);
      return writer;
    };
    GetContractInfoRequest.encodeDelimited = function encodeDelimited(message, writer) {
      return this.encode(message, writer).ldelim();
    };
    GetContractInfoRequest.decode = function decode(reader, length) {
      if (!(reader instanceof $Reader))
        reader = $Reader.create(reader);
      let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.pruntime_rpc.GetContractInfoRequest();
      while (reader.pos < end) {
        let tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            if (!(message.contracts && message.contracts.length))
              message.contracts = [];
            message.contracts.push(reader.string());
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    };
    GetContractInfoRequest.decodeDelimited = function decodeDelimited(reader) {
      if (!(reader instanceof $Reader))
        reader = new $Reader(reader);
      return this.decode(reader, reader.uint32());
    };
    GetContractInfoRequest.verify = function verify(message) {
      if (typeof message !== "object" || message === null)
        return "object expected";
      if (message.contracts != null && message.hasOwnProperty("contracts")) {
        if (!Array.isArray(message.contracts))
          return "contracts: array expected";
        for (let i = 0; i < message.contracts.length; ++i)
          if (!$util.isString(message.contracts[i]))
            return "contracts: string[] expected";
      }
      return null;
    };
    GetContractInfoRequest.fromObject = function fromObject(object) {
      if (object instanceof $root.pruntime_rpc.GetContractInfoRequest)
        return object;
      let message = new $root.pruntime_rpc.GetContractInfoRequest();
      if (object.contracts) {
        if (!Array.isArray(object.contracts))
          throw TypeError(".pruntime_rpc.GetContractInfoRequest.contracts: array expected");
        message.contracts = [];
        for (let i = 0; i < object.contracts.length; ++i)
          message.contracts[i] = String(object.contracts[i]);
      }
      return message;
    };
    GetContractInfoRequest.toObject = function toObject(message, options2) {
      if (!options2)
        options2 = {};
      let object = {};
      if (options2.arrays || options2.defaults)
        object.contracts = [];
      if (message.contracts && message.contracts.length) {
        object.contracts = [];
        for (let j = 0; j < message.contracts.length; ++j)
          object.contracts[j] = message.contracts[j];
      }
      return object;
    };
    GetContractInfoRequest.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GetContractInfoRequest;
  }();
  pruntime_rpc2.GetContractInfoResponse = function() {
    function GetContractInfoResponse(properties) {
      this.contracts = [];
      if (properties) {
        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          if (properties[keys[i]] != null)
            this[keys[i]] = properties[keys[i]];
      }
    }
    GetContractInfoResponse.prototype.contracts = $util.emptyArray;
    GetContractInfoResponse.create = function create2(properties) {
      return new GetContractInfoResponse(properties);
    };
    GetContractInfoResponse.encode = function encode(message, writer) {
      if (!writer)
        writer = $Writer.create();
      if (message.contracts != null && message.contracts.length)
        for (let i = 0; i < message.contracts.length; ++i)
          $root.pruntime_rpc.ContractInfo.encode(message.contracts[i], writer.uint32(
            /* id 1, wireType 2 =*/
            10
          ).fork()).ldelim();
      return writer;
    };
    GetContractInfoResponse.encodeDelimited = function encodeDelimited(message, writer) {
      return this.encode(message, writer).ldelim();
    };
    GetContractInfoResponse.decode = function decode(reader, length) {
      if (!(reader instanceof $Reader))
        reader = $Reader.create(reader);
      let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.pruntime_rpc.GetContractInfoResponse();
      while (reader.pos < end) {
        let tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            if (!(message.contracts && message.contracts.length))
              message.contracts = [];
            message.contracts.push($root.pruntime_rpc.ContractInfo.decode(reader, reader.uint32()));
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    };
    GetContractInfoResponse.decodeDelimited = function decodeDelimited(reader) {
      if (!(reader instanceof $Reader))
        reader = new $Reader(reader);
      return this.decode(reader, reader.uint32());
    };
    GetContractInfoResponse.verify = function verify(message) {
      if (typeof message !== "object" || message === null)
        return "object expected";
      if (message.contracts != null && message.hasOwnProperty("contracts")) {
        if (!Array.isArray(message.contracts))
          return "contracts: array expected";
        for (let i = 0; i < message.contracts.length; ++i) {
          let error = $root.pruntime_rpc.ContractInfo.verify(message.contracts[i]);
          if (error)
            return "contracts." + error;
        }
      }
      return null;
    };
    GetContractInfoResponse.fromObject = function fromObject(object) {
      if (object instanceof $root.pruntime_rpc.GetContractInfoResponse)
        return object;
      let message = new $root.pruntime_rpc.GetContractInfoResponse();
      if (object.contracts) {
        if (!Array.isArray(object.contracts))
          throw TypeError(".pruntime_rpc.GetContractInfoResponse.contracts: array expected");
        message.contracts = [];
        for (let i = 0; i < object.contracts.length; ++i) {
          if (typeof object.contracts[i] !== "object")
            throw TypeError(".pruntime_rpc.GetContractInfoResponse.contracts: object expected");
          message.contracts[i] = $root.pruntime_rpc.ContractInfo.fromObject(object.contracts[i]);
        }
      }
      return message;
    };
    GetContractInfoResponse.toObject = function toObject(message, options2) {
      if (!options2)
        options2 = {};
      let object = {};
      if (options2.arrays || options2.defaults)
        object.contracts = [];
      if (message.contracts && message.contracts.length) {
        object.contracts = [];
        for (let j = 0; j < message.contracts.length; ++j)
          object.contracts[j] = $root.pruntime_rpc.ContractInfo.toObject(message.contracts[j], options2);
      }
      return object;
    };
    GetContractInfoResponse.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GetContractInfoResponse;
  }();
  pruntime_rpc2.ContractInfo = function() {
    function ContractInfo(properties) {
      if (properties) {
        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          if (properties[keys[i]] != null)
            this[keys[i]] = properties[keys[i]];
      }
    }
    ContractInfo.prototype.id = "";
    ContractInfo.prototype.codeHash = "";
    ContractInfo.prototype.weight = 0;
    ContractInfo.prototype.sidevm = null;
    ContractInfo.create = function create2(properties) {
      return new ContractInfo(properties);
    };
    ContractInfo.encode = function encode(message, writer) {
      if (!writer)
        writer = $Writer.create();
      if (message.id != null && Object.hasOwnProperty.call(message, "id"))
        writer.uint32(
          /* id 1, wireType 2 =*/
          10
        ).string(message.id);
      if (message.codeHash != null && Object.hasOwnProperty.call(message, "codeHash"))
        writer.uint32(
          /* id 2, wireType 2 =*/
          18
        ).string(message.codeHash);
      if (message.weight != null && Object.hasOwnProperty.call(message, "weight"))
        writer.uint32(
          /* id 3, wireType 0 =*/
          24
        ).uint32(message.weight);
      if (message.sidevm != null && Object.hasOwnProperty.call(message, "sidevm"))
        $root.pruntime_rpc.SidevmInfo.encode(message.sidevm, writer.uint32(
          /* id 4, wireType 2 =*/
          34
        ).fork()).ldelim();
      return writer;
    };
    ContractInfo.encodeDelimited = function encodeDelimited(message, writer) {
      return this.encode(message, writer).ldelim();
    };
    ContractInfo.decode = function decode(reader, length) {
      if (!(reader instanceof $Reader))
        reader = $Reader.create(reader);
      let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.pruntime_rpc.ContractInfo();
      while (reader.pos < end) {
        let tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.id = reader.string();
            break;
          case 2:
            message.codeHash = reader.string();
            break;
          case 3:
            message.weight = reader.uint32();
            break;
          case 4:
            message.sidevm = $root.pruntime_rpc.SidevmInfo.decode(reader, reader.uint32());
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    };
    ContractInfo.decodeDelimited = function decodeDelimited(reader) {
      if (!(reader instanceof $Reader))
        reader = new $Reader(reader);
      return this.decode(reader, reader.uint32());
    };
    ContractInfo.verify = function verify(message) {
      if (typeof message !== "object" || message === null)
        return "object expected";
      if (message.id != null && message.hasOwnProperty("id")) {
        if (!$util.isString(message.id))
          return "id: string expected";
      }
      if (message.codeHash != null && message.hasOwnProperty("codeHash")) {
        if (!$util.isString(message.codeHash))
          return "codeHash: string expected";
      }
      if (message.weight != null && message.hasOwnProperty("weight")) {
        if (!$util.isInteger(message.weight))
          return "weight: integer expected";
      }
      if (message.sidevm != null && message.hasOwnProperty("sidevm")) {
        let error = $root.pruntime_rpc.SidevmInfo.verify(message.sidevm);
        if (error)
          return "sidevm." + error;
      }
      return null;
    };
    ContractInfo.fromObject = function fromObject(object) {
      if (object instanceof $root.pruntime_rpc.ContractInfo)
        return object;
      let message = new $root.pruntime_rpc.ContractInfo();
      if (object.id != null)
        message.id = String(object.id);
      if (object.codeHash != null)
        message.codeHash = String(object.codeHash);
      if (object.weight != null)
        message.weight = object.weight >>> 0;
      if (object.sidevm != null) {
        if (typeof object.sidevm !== "object")
          throw TypeError(".pruntime_rpc.ContractInfo.sidevm: object expected");
        message.sidevm = $root.pruntime_rpc.SidevmInfo.fromObject(object.sidevm);
      }
      return message;
    };
    ContractInfo.toObject = function toObject(message, options2) {
      if (!options2)
        options2 = {};
      let object = {};
      if (options2.defaults) {
        object.id = "";
        object.codeHash = "";
        object.weight = 0;
        object.sidevm = null;
      }
      if (message.id != null && message.hasOwnProperty("id"))
        object.id = message.id;
      if (message.codeHash != null && message.hasOwnProperty("codeHash"))
        object.codeHash = message.codeHash;
      if (message.weight != null && message.hasOwnProperty("weight"))
        object.weight = message.weight;
      if (message.sidevm != null && message.hasOwnProperty("sidevm"))
        object.sidevm = $root.pruntime_rpc.SidevmInfo.toObject(message.sidevm, options2);
      return object;
    };
    ContractInfo.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return ContractInfo;
  }();
  pruntime_rpc2.SidevmInfo = function() {
    function SidevmInfo(properties) {
      if (properties) {
        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          if (properties[keys[i]] != null)
            this[keys[i]] = properties[keys[i]];
      }
    }
    SidevmInfo.prototype.state = "";
    SidevmInfo.prototype.codeHash = "";
    SidevmInfo.prototype.startTime = "";
    SidevmInfo.prototype.stopReason = "";
    SidevmInfo.create = function create2(properties) {
      return new SidevmInfo(properties);
    };
    SidevmInfo.encode = function encode(message, writer) {
      if (!writer)
        writer = $Writer.create();
      if (message.state != null && Object.hasOwnProperty.call(message, "state"))
        writer.uint32(
          /* id 1, wireType 2 =*/
          10
        ).string(message.state);
      if (message.codeHash != null && Object.hasOwnProperty.call(message, "codeHash"))
        writer.uint32(
          /* id 2, wireType 2 =*/
          18
        ).string(message.codeHash);
      if (message.startTime != null && Object.hasOwnProperty.call(message, "startTime"))
        writer.uint32(
          /* id 3, wireType 2 =*/
          26
        ).string(message.startTime);
      if (message.stopReason != null && Object.hasOwnProperty.call(message, "stopReason"))
        writer.uint32(
          /* id 4, wireType 2 =*/
          34
        ).string(message.stopReason);
      return writer;
    };
    SidevmInfo.encodeDelimited = function encodeDelimited(message, writer) {
      return this.encode(message, writer).ldelim();
    };
    SidevmInfo.decode = function decode(reader, length) {
      if (!(reader instanceof $Reader))
        reader = $Reader.create(reader);
      let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.pruntime_rpc.SidevmInfo();
      while (reader.pos < end) {
        let tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.state = reader.string();
            break;
          case 2:
            message.codeHash = reader.string();
            break;
          case 3:
            message.startTime = reader.string();
            break;
          case 4:
            message.stopReason = reader.string();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    };
    SidevmInfo.decodeDelimited = function decodeDelimited(reader) {
      if (!(reader instanceof $Reader))
        reader = new $Reader(reader);
      return this.decode(reader, reader.uint32());
    };
    SidevmInfo.verify = function verify(message) {
      if (typeof message !== "object" || message === null)
        return "object expected";
      if (message.state != null && message.hasOwnProperty("state")) {
        if (!$util.isString(message.state))
          return "state: string expected";
      }
      if (message.codeHash != null && message.hasOwnProperty("codeHash")) {
        if (!$util.isString(message.codeHash))
          return "codeHash: string expected";
      }
      if (message.startTime != null && message.hasOwnProperty("startTime")) {
        if (!$util.isString(message.startTime))
          return "startTime: string expected";
      }
      if (message.stopReason != null && message.hasOwnProperty("stopReason")) {
        if (!$util.isString(message.stopReason))
          return "stopReason: string expected";
      }
      return null;
    };
    SidevmInfo.fromObject = function fromObject(object) {
      if (object instanceof $root.pruntime_rpc.SidevmInfo)
        return object;
      let message = new $root.pruntime_rpc.SidevmInfo();
      if (object.state != null)
        message.state = String(object.state);
      if (object.codeHash != null)
        message.codeHash = String(object.codeHash);
      if (object.startTime != null)
        message.startTime = String(object.startTime);
      if (object.stopReason != null)
        message.stopReason = String(object.stopReason);
      return message;
    };
    SidevmInfo.toObject = function toObject(message, options2) {
      if (!options2)
        options2 = {};
      let object = {};
      if (options2.defaults) {
        object.state = "";
        object.codeHash = "";
        object.startTime = "";
        object.stopReason = "";
      }
      if (message.state != null && message.hasOwnProperty("state"))
        object.state = message.state;
      if (message.codeHash != null && message.hasOwnProperty("codeHash"))
        object.codeHash = message.codeHash;
      if (message.startTime != null && message.hasOwnProperty("startTime"))
        object.startTime = message.startTime;
      if (message.stopReason != null && message.hasOwnProperty("stopReason"))
        object.stopReason = message.stopReason;
      return object;
    };
    SidevmInfo.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return SidevmInfo;
  }();
  pruntime_rpc2.GetClusterInfoResponse = function() {
    function GetClusterInfoResponse(properties) {
      if (properties) {
        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          if (properties[keys[i]] != null)
            this[keys[i]] = properties[keys[i]];
      }
    }
    GetClusterInfoResponse.prototype.info = null;
    GetClusterInfoResponse.create = function create2(properties) {
      return new GetClusterInfoResponse(properties);
    };
    GetClusterInfoResponse.encode = function encode(message, writer) {
      if (!writer)
        writer = $Writer.create();
      if (message.info != null && Object.hasOwnProperty.call(message, "info"))
        $root.pruntime_rpc.ClusterInfo.encode(message.info, writer.uint32(
          /* id 1, wireType 2 =*/
          10
        ).fork()).ldelim();
      return writer;
    };
    GetClusterInfoResponse.encodeDelimited = function encodeDelimited(message, writer) {
      return this.encode(message, writer).ldelim();
    };
    GetClusterInfoResponse.decode = function decode(reader, length) {
      if (!(reader instanceof $Reader))
        reader = $Reader.create(reader);
      let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.pruntime_rpc.GetClusterInfoResponse();
      while (reader.pos < end) {
        let tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.info = $root.pruntime_rpc.ClusterInfo.decode(reader, reader.uint32());
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    };
    GetClusterInfoResponse.decodeDelimited = function decodeDelimited(reader) {
      if (!(reader instanceof $Reader))
        reader = new $Reader(reader);
      return this.decode(reader, reader.uint32());
    };
    GetClusterInfoResponse.verify = function verify(message) {
      if (typeof message !== "object" || message === null)
        return "object expected";
      if (message.info != null && message.hasOwnProperty("info")) {
        let error = $root.pruntime_rpc.ClusterInfo.verify(message.info);
        if (error)
          return "info." + error;
      }
      return null;
    };
    GetClusterInfoResponse.fromObject = function fromObject(object) {
      if (object instanceof $root.pruntime_rpc.GetClusterInfoResponse)
        return object;
      let message = new $root.pruntime_rpc.GetClusterInfoResponse();
      if (object.info != null) {
        if (typeof object.info !== "object")
          throw TypeError(".pruntime_rpc.GetClusterInfoResponse.info: object expected");
        message.info = $root.pruntime_rpc.ClusterInfo.fromObject(object.info);
      }
      return message;
    };
    GetClusterInfoResponse.toObject = function toObject(message, options2) {
      if (!options2)
        options2 = {};
      let object = {};
      if (options2.defaults)
        object.info = null;
      if (message.info != null && message.hasOwnProperty("info"))
        object.info = $root.pruntime_rpc.ClusterInfo.toObject(message.info, options2);
      return object;
    };
    GetClusterInfoResponse.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GetClusterInfoResponse;
  }();
  pruntime_rpc2.ClusterInfo = function() {
    function ClusterInfo(properties) {
      this.contracts = [];
      if (properties) {
        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          if (properties[keys[i]] != null)
            this[keys[i]] = properties[keys[i]];
      }
    }
    ClusterInfo.prototype.id = "";
    ClusterInfo.prototype.runtimeVersion = "";
    ClusterInfo.prototype.stateRoot = "";
    ClusterInfo.prototype.contracts = $util.emptyArray;
    ClusterInfo.create = function create2(properties) {
      return new ClusterInfo(properties);
    };
    ClusterInfo.encode = function encode(message, writer) {
      if (!writer)
        writer = $Writer.create();
      if (message.id != null && Object.hasOwnProperty.call(message, "id"))
        writer.uint32(
          /* id 1, wireType 2 =*/
          10
        ).string(message.id);
      if (message.runtimeVersion != null && Object.hasOwnProperty.call(message, "runtimeVersion"))
        writer.uint32(
          /* id 2, wireType 2 =*/
          18
        ).string(message.runtimeVersion);
      if (message.stateRoot != null && Object.hasOwnProperty.call(message, "stateRoot"))
        writer.uint32(
          /* id 3, wireType 2 =*/
          26
        ).string(message.stateRoot);
      if (message.contracts != null && message.contracts.length)
        for (let i = 0; i < message.contracts.length; ++i)
          writer.uint32(
            /* id 4, wireType 2 =*/
            34
          ).string(message.contracts[i]);
      return writer;
    };
    ClusterInfo.encodeDelimited = function encodeDelimited(message, writer) {
      return this.encode(message, writer).ldelim();
    };
    ClusterInfo.decode = function decode(reader, length) {
      if (!(reader instanceof $Reader))
        reader = $Reader.create(reader);
      let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.pruntime_rpc.ClusterInfo();
      while (reader.pos < end) {
        let tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.id = reader.string();
            break;
          case 2:
            message.runtimeVersion = reader.string();
            break;
          case 3:
            message.stateRoot = reader.string();
            break;
          case 4:
            if (!(message.contracts && message.contracts.length))
              message.contracts = [];
            message.contracts.push(reader.string());
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    };
    ClusterInfo.decodeDelimited = function decodeDelimited(reader) {
      if (!(reader instanceof $Reader))
        reader = new $Reader(reader);
      return this.decode(reader, reader.uint32());
    };
    ClusterInfo.verify = function verify(message) {
      if (typeof message !== "object" || message === null)
        return "object expected";
      if (message.id != null && message.hasOwnProperty("id")) {
        if (!$util.isString(message.id))
          return "id: string expected";
      }
      if (message.runtimeVersion != null && message.hasOwnProperty("runtimeVersion")) {
        if (!$util.isString(message.runtimeVersion))
          return "runtimeVersion: string expected";
      }
      if (message.stateRoot != null && message.hasOwnProperty("stateRoot")) {
        if (!$util.isString(message.stateRoot))
          return "stateRoot: string expected";
      }
      if (message.contracts != null && message.hasOwnProperty("contracts")) {
        if (!Array.isArray(message.contracts))
          return "contracts: array expected";
        for (let i = 0; i < message.contracts.length; ++i)
          if (!$util.isString(message.contracts[i]))
            return "contracts: string[] expected";
      }
      return null;
    };
    ClusterInfo.fromObject = function fromObject(object) {
      if (object instanceof $root.pruntime_rpc.ClusterInfo)
        return object;
      let message = new $root.pruntime_rpc.ClusterInfo();
      if (object.id != null)
        message.id = String(object.id);
      if (object.runtimeVersion != null)
        message.runtimeVersion = String(object.runtimeVersion);
      if (object.stateRoot != null)
        message.stateRoot = String(object.stateRoot);
      if (object.contracts) {
        if (!Array.isArray(object.contracts))
          throw TypeError(".pruntime_rpc.ClusterInfo.contracts: array expected");
        message.contracts = [];
        for (let i = 0; i < object.contracts.length; ++i)
          message.contracts[i] = String(object.contracts[i]);
      }
      return message;
    };
    ClusterInfo.toObject = function toObject(message, options2) {
      if (!options2)
        options2 = {};
      let object = {};
      if (options2.arrays || options2.defaults)
        object.contracts = [];
      if (options2.defaults) {
        object.id = "";
        object.runtimeVersion = "";
        object.stateRoot = "";
      }
      if (message.id != null && message.hasOwnProperty("id"))
        object.id = message.id;
      if (message.runtimeVersion != null && message.hasOwnProperty("runtimeVersion"))
        object.runtimeVersion = message.runtimeVersion;
      if (message.stateRoot != null && message.hasOwnProperty("stateRoot"))
        object.stateRoot = message.stateRoot;
      if (message.contracts && message.contracts.length) {
        object.contracts = [];
        for (let j = 0; j < message.contracts.length; ++j)
          object.contracts[j] = message.contracts[j];
      }
      return object;
    };
    ClusterInfo.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return ClusterInfo;
  }();
  pruntime_rpc2.SidevmCode = function() {
    function SidevmCode(properties) {
      if (properties) {
        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          if (properties[keys[i]] != null)
            this[keys[i]] = properties[keys[i]];
      }
    }
    SidevmCode.prototype.contract = $util.newBuffer([]);
    SidevmCode.prototype.code = $util.newBuffer([]);
    SidevmCode.create = function create2(properties) {
      return new SidevmCode(properties);
    };
    SidevmCode.encode = function encode(message, writer) {
      if (!writer)
        writer = $Writer.create();
      if (message.contract != null && Object.hasOwnProperty.call(message, "contract"))
        writer.uint32(
          /* id 1, wireType 2 =*/
          10
        ).bytes(message.contract);
      if (message.code != null && Object.hasOwnProperty.call(message, "code"))
        writer.uint32(
          /* id 2, wireType 2 =*/
          18
        ).bytes(message.code);
      return writer;
    };
    SidevmCode.encodeDelimited = function encodeDelimited(message, writer) {
      return this.encode(message, writer).ldelim();
    };
    SidevmCode.decode = function decode(reader, length) {
      if (!(reader instanceof $Reader))
        reader = $Reader.create(reader);
      let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.pruntime_rpc.SidevmCode();
      while (reader.pos < end) {
        let tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.contract = reader.bytes();
            break;
          case 2:
            message.code = reader.bytes();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    };
    SidevmCode.decodeDelimited = function decodeDelimited(reader) {
      if (!(reader instanceof $Reader))
        reader = new $Reader(reader);
      return this.decode(reader, reader.uint32());
    };
    SidevmCode.verify = function verify(message) {
      if (typeof message !== "object" || message === null)
        return "object expected";
      if (message.contract != null && message.hasOwnProperty("contract")) {
        if (!(message.contract && typeof message.contract.length === "number" || $util.isString(message.contract)))
          return "contract: buffer expected";
      }
      if (message.code != null && message.hasOwnProperty("code")) {
        if (!(message.code && typeof message.code.length === "number" || $util.isString(message.code)))
          return "code: buffer expected";
      }
      return null;
    };
    SidevmCode.fromObject = function fromObject(object) {
      if (object instanceof $root.pruntime_rpc.SidevmCode)
        return object;
      let message = new $root.pruntime_rpc.SidevmCode();
      if (object.contract != null) {
        if (typeof object.contract === "string")
          $util.base64.decode(object.contract, message.contract = $util.newBuffer($util.base64.length(object.contract)), 0);
        else if (object.contract.length)
          message.contract = object.contract;
      }
      if (object.code != null) {
        if (typeof object.code === "string")
          $util.base64.decode(object.code, message.code = $util.newBuffer($util.base64.length(object.code)), 0);
        else if (object.code.length)
          message.code = object.code;
      }
      return message;
    };
    SidevmCode.toObject = function toObject(message, options2) {
      if (!options2)
        options2 = {};
      let object = {};
      if (options2.defaults) {
        if (options2.bytes === String)
          object.contract = "";
        else {
          object.contract = [];
          if (options2.bytes !== Array)
            object.contract = $util.newBuffer(object.contract);
        }
        if (options2.bytes === String)
          object.code = "";
        else {
          object.code = [];
          if (options2.bytes !== Array)
            object.code = $util.newBuffer(object.code);
        }
      }
      if (message.contract != null && message.hasOwnProperty("contract"))
        object.contract = options2.bytes === String ? $util.base64.encode(message.contract, 0, message.contract.length) : options2.bytes === Array ? Array.prototype.slice.call(message.contract) : message.contract;
      if (message.code != null && message.hasOwnProperty("code"))
        object.code = options2.bytes === String ? $util.base64.encode(message.code, 0, message.code.length) : options2.bytes === Array ? Array.prototype.slice.call(message.code) : message.code;
      return object;
    };
    SidevmCode.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return SidevmCode;
  }();
  pruntime_rpc2.ContractParameters = function() {
    function ContractParameters(properties) {
      if (properties) {
        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          if (properties[keys[i]] != null)
            this[keys[i]] = properties[keys[i]];
      }
    }
    ContractParameters.prototype.deployer = "";
    ContractParameters.prototype.clusterId = "";
    ContractParameters.prototype.codeHash = "";
    ContractParameters.prototype.salt = "";
    ContractParameters.create = function create2(properties) {
      return new ContractParameters(properties);
    };
    ContractParameters.encode = function encode(message, writer) {
      if (!writer)
        writer = $Writer.create();
      if (message.deployer != null && Object.hasOwnProperty.call(message, "deployer"))
        writer.uint32(
          /* id 1, wireType 2 =*/
          10
        ).string(message.deployer);
      if (message.clusterId != null && Object.hasOwnProperty.call(message, "clusterId"))
        writer.uint32(
          /* id 2, wireType 2 =*/
          18
        ).string(message.clusterId);
      if (message.codeHash != null && Object.hasOwnProperty.call(message, "codeHash"))
        writer.uint32(
          /* id 3, wireType 2 =*/
          26
        ).string(message.codeHash);
      if (message.salt != null && Object.hasOwnProperty.call(message, "salt"))
        writer.uint32(
          /* id 4, wireType 2 =*/
          34
        ).string(message.salt);
      return writer;
    };
    ContractParameters.encodeDelimited = function encodeDelimited(message, writer) {
      return this.encode(message, writer).ldelim();
    };
    ContractParameters.decode = function decode(reader, length) {
      if (!(reader instanceof $Reader))
        reader = $Reader.create(reader);
      let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.pruntime_rpc.ContractParameters();
      while (reader.pos < end) {
        let tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.deployer = reader.string();
            break;
          case 2:
            message.clusterId = reader.string();
            break;
          case 3:
            message.codeHash = reader.string();
            break;
          case 4:
            message.salt = reader.string();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    };
    ContractParameters.decodeDelimited = function decodeDelimited(reader) {
      if (!(reader instanceof $Reader))
        reader = new $Reader(reader);
      return this.decode(reader, reader.uint32());
    };
    ContractParameters.verify = function verify(message) {
      if (typeof message !== "object" || message === null)
        return "object expected";
      if (message.deployer != null && message.hasOwnProperty("deployer")) {
        if (!$util.isString(message.deployer))
          return "deployer: string expected";
      }
      if (message.clusterId != null && message.hasOwnProperty("clusterId")) {
        if (!$util.isString(message.clusterId))
          return "clusterId: string expected";
      }
      if (message.codeHash != null && message.hasOwnProperty("codeHash")) {
        if (!$util.isString(message.codeHash))
          return "codeHash: string expected";
      }
      if (message.salt != null && message.hasOwnProperty("salt")) {
        if (!$util.isString(message.salt))
          return "salt: string expected";
      }
      return null;
    };
    ContractParameters.fromObject = function fromObject(object) {
      if (object instanceof $root.pruntime_rpc.ContractParameters)
        return object;
      let message = new $root.pruntime_rpc.ContractParameters();
      if (object.deployer != null)
        message.deployer = String(object.deployer);
      if (object.clusterId != null)
        message.clusterId = String(object.clusterId);
      if (object.codeHash != null)
        message.codeHash = String(object.codeHash);
      if (object.salt != null)
        message.salt = String(object.salt);
      return message;
    };
    ContractParameters.toObject = function toObject(message, options2) {
      if (!options2)
        options2 = {};
      let object = {};
      if (options2.defaults) {
        object.deployer = "";
        object.clusterId = "";
        object.codeHash = "";
        object.salt = "";
      }
      if (message.deployer != null && message.hasOwnProperty("deployer"))
        object.deployer = message.deployer;
      if (message.clusterId != null && message.hasOwnProperty("clusterId"))
        object.clusterId = message.clusterId;
      if (message.codeHash != null && message.hasOwnProperty("codeHash"))
        object.codeHash = message.codeHash;
      if (message.salt != null && message.hasOwnProperty("salt"))
        object.salt = message.salt;
      return object;
    };
    ContractParameters.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return ContractParameters;
  }();
  pruntime_rpc2.ContractId = function() {
    function ContractId(properties) {
      if (properties) {
        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          if (properties[keys[i]] != null)
            this[keys[i]] = properties[keys[i]];
      }
    }
    ContractId.prototype.id = "";
    ContractId.create = function create2(properties) {
      return new ContractId(properties);
    };
    ContractId.encode = function encode(message, writer) {
      if (!writer)
        writer = $Writer.create();
      if (message.id != null && Object.hasOwnProperty.call(message, "id"))
        writer.uint32(
          /* id 1, wireType 2 =*/
          10
        ).string(message.id);
      return writer;
    };
    ContractId.encodeDelimited = function encodeDelimited(message, writer) {
      return this.encode(message, writer).ldelim();
    };
    ContractId.decode = function decode(reader, length) {
      if (!(reader instanceof $Reader))
        reader = $Reader.create(reader);
      let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.pruntime_rpc.ContractId();
      while (reader.pos < end) {
        let tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.id = reader.string();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    };
    ContractId.decodeDelimited = function decodeDelimited(reader) {
      if (!(reader instanceof $Reader))
        reader = new $Reader(reader);
      return this.decode(reader, reader.uint32());
    };
    ContractId.verify = function verify(message) {
      if (typeof message !== "object" || message === null)
        return "object expected";
      if (message.id != null && message.hasOwnProperty("id")) {
        if (!$util.isString(message.id))
          return "id: string expected";
      }
      return null;
    };
    ContractId.fromObject = function fromObject(object) {
      if (object instanceof $root.pruntime_rpc.ContractId)
        return object;
      let message = new $root.pruntime_rpc.ContractId();
      if (object.id != null)
        message.id = String(object.id);
      return message;
    };
    ContractId.toObject = function toObject(message, options2) {
      if (!options2)
        options2 = {};
      let object = {};
      if (options2.defaults)
        object.id = "";
      if (message.id != null && message.hasOwnProperty("id"))
        object.id = message.id;
      return object;
    };
    ContractId.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return ContractId;
  }();
  pruntime_rpc2.ChainState = function() {
    function ChainState(properties) {
      if (properties) {
        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          if (properties[keys[i]] != null)
            this[keys[i]] = properties[keys[i]];
      }
    }
    ChainState.prototype.blockNumber = 0;
    ChainState.prototype.encodedState = $util.newBuffer([]);
    ChainState.create = function create2(properties) {
      return new ChainState(properties);
    };
    ChainState.encode = function encode(message, writer) {
      if (!writer)
        writer = $Writer.create();
      if (message.blockNumber != null && Object.hasOwnProperty.call(message, "blockNumber"))
        writer.uint32(
          /* id 1, wireType 0 =*/
          8
        ).uint32(message.blockNumber);
      if (message.encodedState != null && Object.hasOwnProperty.call(message, "encodedState"))
        writer.uint32(
          /* id 2, wireType 2 =*/
          18
        ).bytes(message.encodedState);
      return writer;
    };
    ChainState.encodeDelimited = function encodeDelimited(message, writer) {
      return this.encode(message, writer).ldelim();
    };
    ChainState.decode = function decode(reader, length) {
      if (!(reader instanceof $Reader))
        reader = $Reader.create(reader);
      let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.pruntime_rpc.ChainState();
      while (reader.pos < end) {
        let tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.blockNumber = reader.uint32();
            break;
          case 2:
            message.encodedState = reader.bytes();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    };
    ChainState.decodeDelimited = function decodeDelimited(reader) {
      if (!(reader instanceof $Reader))
        reader = new $Reader(reader);
      return this.decode(reader, reader.uint32());
    };
    ChainState.verify = function verify(message) {
      if (typeof message !== "object" || message === null)
        return "object expected";
      if (message.blockNumber != null && message.hasOwnProperty("blockNumber")) {
        if (!$util.isInteger(message.blockNumber))
          return "blockNumber: integer expected";
      }
      if (message.encodedState != null && message.hasOwnProperty("encodedState")) {
        if (!(message.encodedState && typeof message.encodedState.length === "number" || $util.isString(message.encodedState)))
          return "encodedState: buffer expected";
      }
      return null;
    };
    ChainState.fromObject = function fromObject(object) {
      if (object instanceof $root.pruntime_rpc.ChainState)
        return object;
      let message = new $root.pruntime_rpc.ChainState();
      if (object.blockNumber != null)
        message.blockNumber = object.blockNumber >>> 0;
      if (object.encodedState != null) {
        if (typeof object.encodedState === "string")
          $util.base64.decode(object.encodedState, message.encodedState = $util.newBuffer($util.base64.length(object.encodedState)), 0);
        else if (object.encodedState.length)
          message.encodedState = object.encodedState;
      }
      return message;
    };
    ChainState.toObject = function toObject(message, options2) {
      if (!options2)
        options2 = {};
      let object = {};
      if (options2.defaults) {
        object.blockNumber = 0;
        if (options2.bytes === String)
          object.encodedState = "";
        else {
          object.encodedState = [];
          if (options2.bytes !== Array)
            object.encodedState = $util.newBuffer(object.encodedState);
        }
      }
      if (message.blockNumber != null && message.hasOwnProperty("blockNumber"))
        object.blockNumber = message.blockNumber;
      if (message.encodedState != null && message.hasOwnProperty("encodedState"))
        object.encodedState = options2.bytes === String ? $util.base64.encode(message.encodedState, 0, message.encodedState.length) : options2.bytes === Array ? Array.prototype.slice.call(message.encodedState) : message.encodedState;
      return object;
    };
    ChainState.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return ChainState;
  }();
  pruntime_rpc2.StopOptions = function() {
    function StopOptions(properties) {
      if (properties) {
        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          if (properties[keys[i]] != null)
            this[keys[i]] = properties[keys[i]];
      }
    }
    StopOptions.prototype.removeCheckpoints = false;
    StopOptions.create = function create2(properties) {
      return new StopOptions(properties);
    };
    StopOptions.encode = function encode(message, writer) {
      if (!writer)
        writer = $Writer.create();
      if (message.removeCheckpoints != null && Object.hasOwnProperty.call(message, "removeCheckpoints"))
        writer.uint32(
          /* id 1, wireType 0 =*/
          8
        ).bool(message.removeCheckpoints);
      return writer;
    };
    StopOptions.encodeDelimited = function encodeDelimited(message, writer) {
      return this.encode(message, writer).ldelim();
    };
    StopOptions.decode = function decode(reader, length) {
      if (!(reader instanceof $Reader))
        reader = $Reader.create(reader);
      let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.pruntime_rpc.StopOptions();
      while (reader.pos < end) {
        let tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.removeCheckpoints = reader.bool();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    };
    StopOptions.decodeDelimited = function decodeDelimited(reader) {
      if (!(reader instanceof $Reader))
        reader = new $Reader(reader);
      return this.decode(reader, reader.uint32());
    };
    StopOptions.verify = function verify(message) {
      if (typeof message !== "object" || message === null)
        return "object expected";
      if (message.removeCheckpoints != null && message.hasOwnProperty("removeCheckpoints")) {
        if (typeof message.removeCheckpoints !== "boolean")
          return "removeCheckpoints: boolean expected";
      }
      return null;
    };
    StopOptions.fromObject = function fromObject(object) {
      if (object instanceof $root.pruntime_rpc.StopOptions)
        return object;
      let message = new $root.pruntime_rpc.StopOptions();
      if (object.removeCheckpoints != null)
        message.removeCheckpoints = Boolean(object.removeCheckpoints);
      return message;
    };
    StopOptions.toObject = function toObject(message, options2) {
      if (!options2)
        options2 = {};
      let object = {};
      if (options2.defaults)
        object.removeCheckpoints = false;
      if (message.removeCheckpoints != null && message.hasOwnProperty("removeCheckpoints"))
        object.removeCheckpoints = message.removeCheckpoints;
      return object;
    };
    StopOptions.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return StopOptions;
  }();
  pruntime_rpc2.StorageProof = function() {
    function StorageProof(properties) {
      this.proof = [];
      if (properties) {
        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          if (properties[keys[i]] != null)
            this[keys[i]] = properties[keys[i]];
      }
    }
    StorageProof.prototype.proof = $util.emptyArray;
    StorageProof.create = function create2(properties) {
      return new StorageProof(properties);
    };
    StorageProof.encode = function encode(message, writer) {
      if (!writer)
        writer = $Writer.create();
      if (message.proof != null && message.proof.length)
        for (let i = 0; i < message.proof.length; ++i)
          writer.uint32(
            /* id 1, wireType 2 =*/
            10
          ).bytes(message.proof[i]);
      return writer;
    };
    StorageProof.encodeDelimited = function encodeDelimited(message, writer) {
      return this.encode(message, writer).ldelim();
    };
    StorageProof.decode = function decode(reader, length) {
      if (!(reader instanceof $Reader))
        reader = $Reader.create(reader);
      let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.pruntime_rpc.StorageProof();
      while (reader.pos < end) {
        let tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            if (!(message.proof && message.proof.length))
              message.proof = [];
            message.proof.push(reader.bytes());
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    };
    StorageProof.decodeDelimited = function decodeDelimited(reader) {
      if (!(reader instanceof $Reader))
        reader = new $Reader(reader);
      return this.decode(reader, reader.uint32());
    };
    StorageProof.verify = function verify(message) {
      if (typeof message !== "object" || message === null)
        return "object expected";
      if (message.proof != null && message.hasOwnProperty("proof")) {
        if (!Array.isArray(message.proof))
          return "proof: array expected";
        for (let i = 0; i < message.proof.length; ++i)
          if (!(message.proof[i] && typeof message.proof[i].length === "number" || $util.isString(message.proof[i])))
            return "proof: buffer[] expected";
      }
      return null;
    };
    StorageProof.fromObject = function fromObject(object) {
      if (object instanceof $root.pruntime_rpc.StorageProof)
        return object;
      let message = new $root.pruntime_rpc.StorageProof();
      if (object.proof) {
        if (!Array.isArray(object.proof))
          throw TypeError(".pruntime_rpc.StorageProof.proof: array expected");
        message.proof = [];
        for (let i = 0; i < object.proof.length; ++i)
          if (typeof object.proof[i] === "string")
            $util.base64.decode(object.proof[i], message.proof[i] = $util.newBuffer($util.base64.length(object.proof[i])), 0);
          else if (object.proof[i].length)
            message.proof[i] = object.proof[i];
      }
      return message;
    };
    StorageProof.toObject = function toObject(message, options2) {
      if (!options2)
        options2 = {};
      let object = {};
      if (options2.arrays || options2.defaults)
        object.proof = [];
      if (message.proof && message.proof.length) {
        object.proof = [];
        for (let j = 0; j < message.proof.length; ++j)
          object.proof[j] = options2.bytes === String ? $util.base64.encode(message.proof[j], 0, message.proof[j].length) : options2.bytes === Array ? Array.prototype.slice.call(message.proof[j]) : message.proof[j];
      }
      return object;
    };
    StorageProof.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return StorageProof;
  }();
  pruntime_rpc2.StatisticsReqeust = function() {
    function StatisticsReqeust(properties) {
      this.contracts = [];
      if (properties) {
        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          if (properties[keys[i]] != null)
            this[keys[i]] = properties[keys[i]];
      }
    }
    StatisticsReqeust.prototype.contracts = $util.emptyArray;
    StatisticsReqeust.prototype.all = false;
    StatisticsReqeust.create = function create2(properties) {
      return new StatisticsReqeust(properties);
    };
    StatisticsReqeust.encode = function encode(message, writer) {
      if (!writer)
        writer = $Writer.create();
      if (message.contracts != null && message.contracts.length)
        for (let i = 0; i < message.contracts.length; ++i)
          writer.uint32(
            /* id 1, wireType 2 =*/
            10
          ).string(message.contracts[i]);
      if (message.all != null && Object.hasOwnProperty.call(message, "all"))
        writer.uint32(
          /* id 2, wireType 0 =*/
          16
        ).bool(message.all);
      return writer;
    };
    StatisticsReqeust.encodeDelimited = function encodeDelimited(message, writer) {
      return this.encode(message, writer).ldelim();
    };
    StatisticsReqeust.decode = function decode(reader, length) {
      if (!(reader instanceof $Reader))
        reader = $Reader.create(reader);
      let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.pruntime_rpc.StatisticsReqeust();
      while (reader.pos < end) {
        let tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            if (!(message.contracts && message.contracts.length))
              message.contracts = [];
            message.contracts.push(reader.string());
            break;
          case 2:
            message.all = reader.bool();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    };
    StatisticsReqeust.decodeDelimited = function decodeDelimited(reader) {
      if (!(reader instanceof $Reader))
        reader = new $Reader(reader);
      return this.decode(reader, reader.uint32());
    };
    StatisticsReqeust.verify = function verify(message) {
      if (typeof message !== "object" || message === null)
        return "object expected";
      if (message.contracts != null && message.hasOwnProperty("contracts")) {
        if (!Array.isArray(message.contracts))
          return "contracts: array expected";
        for (let i = 0; i < message.contracts.length; ++i)
          if (!$util.isString(message.contracts[i]))
            return "contracts: string[] expected";
      }
      if (message.all != null && message.hasOwnProperty("all")) {
        if (typeof message.all !== "boolean")
          return "all: boolean expected";
      }
      return null;
    };
    StatisticsReqeust.fromObject = function fromObject(object) {
      if (object instanceof $root.pruntime_rpc.StatisticsReqeust)
        return object;
      let message = new $root.pruntime_rpc.StatisticsReqeust();
      if (object.contracts) {
        if (!Array.isArray(object.contracts))
          throw TypeError(".pruntime_rpc.StatisticsReqeust.contracts: array expected");
        message.contracts = [];
        for (let i = 0; i < object.contracts.length; ++i)
          message.contracts[i] = String(object.contracts[i]);
      }
      if (object.all != null)
        message.all = Boolean(object.all);
      return message;
    };
    StatisticsReqeust.toObject = function toObject(message, options2) {
      if (!options2)
        options2 = {};
      let object = {};
      if (options2.arrays || options2.defaults)
        object.contracts = [];
      if (options2.defaults)
        object.all = false;
      if (message.contracts && message.contracts.length) {
        object.contracts = [];
        for (let j = 0; j < message.contracts.length; ++j)
          object.contracts[j] = message.contracts[j];
      }
      if (message.all != null && message.hasOwnProperty("all"))
        object.all = message.all;
      return object;
    };
    StatisticsReqeust.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return StatisticsReqeust;
  }();
  pruntime_rpc2.StatisticsResponse = function() {
    function StatisticsResponse(properties) {
      if (properties) {
        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          if (properties[keys[i]] != null)
            this[keys[i]] = properties[keys[i]];
      }
    }
    StatisticsResponse.prototype.uptime = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
    StatisticsResponse.prototype.cores = 0;
    StatisticsResponse.prototype.query = null;
    StatisticsResponse.prototype.httpEgress = null;
    StatisticsResponse.create = function create2(properties) {
      return new StatisticsResponse(properties);
    };
    StatisticsResponse.encode = function encode(message, writer) {
      if (!writer)
        writer = $Writer.create();
      if (message.uptime != null && Object.hasOwnProperty.call(message, "uptime"))
        writer.uint32(
          /* id 1, wireType 0 =*/
          8
        ).uint64(message.uptime);
      if (message.cores != null && Object.hasOwnProperty.call(message, "cores"))
        writer.uint32(
          /* id 2, wireType 0 =*/
          16
        ).uint32(message.cores);
      if (message.query != null && Object.hasOwnProperty.call(message, "query"))
        $root.pruntime_rpc.QueryStats.encode(message.query, writer.uint32(
          /* id 3, wireType 2 =*/
          26
        ).fork()).ldelim();
      if (message.httpEgress != null && Object.hasOwnProperty.call(message, "httpEgress"))
        $root.pruntime_rpc.HttpEgressStats.encode(message.httpEgress, writer.uint32(
          /* id 4, wireType 2 =*/
          34
        ).fork()).ldelim();
      return writer;
    };
    StatisticsResponse.encodeDelimited = function encodeDelimited(message, writer) {
      return this.encode(message, writer).ldelim();
    };
    StatisticsResponse.decode = function decode(reader, length) {
      if (!(reader instanceof $Reader))
        reader = $Reader.create(reader);
      let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.pruntime_rpc.StatisticsResponse();
      while (reader.pos < end) {
        let tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.uptime = reader.uint64();
            break;
          case 2:
            message.cores = reader.uint32();
            break;
          case 3:
            message.query = $root.pruntime_rpc.QueryStats.decode(reader, reader.uint32());
            break;
          case 4:
            message.httpEgress = $root.pruntime_rpc.HttpEgressStats.decode(reader, reader.uint32());
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    };
    StatisticsResponse.decodeDelimited = function decodeDelimited(reader) {
      if (!(reader instanceof $Reader))
        reader = new $Reader(reader);
      return this.decode(reader, reader.uint32());
    };
    StatisticsResponse.verify = function verify(message) {
      if (typeof message !== "object" || message === null)
        return "object expected";
      if (message.uptime != null && message.hasOwnProperty("uptime")) {
        if (!$util.isInteger(message.uptime) && !(message.uptime && $util.isInteger(message.uptime.low) && $util.isInteger(message.uptime.high)))
          return "uptime: integer|Long expected";
      }
      if (message.cores != null && message.hasOwnProperty("cores")) {
        if (!$util.isInteger(message.cores))
          return "cores: integer expected";
      }
      if (message.query != null && message.hasOwnProperty("query")) {
        let error = $root.pruntime_rpc.QueryStats.verify(message.query);
        if (error)
          return "query." + error;
      }
      if (message.httpEgress != null && message.hasOwnProperty("httpEgress")) {
        let error = $root.pruntime_rpc.HttpEgressStats.verify(message.httpEgress);
        if (error)
          return "httpEgress." + error;
      }
      return null;
    };
    StatisticsResponse.fromObject = function fromObject(object) {
      if (object instanceof $root.pruntime_rpc.StatisticsResponse)
        return object;
      let message = new $root.pruntime_rpc.StatisticsResponse();
      if (object.uptime != null) {
        if ($util.Long)
          (message.uptime = $util.Long.fromValue(object.uptime)).unsigned = true;
        else if (typeof object.uptime === "string")
          message.uptime = parseInt(object.uptime, 10);
        else if (typeof object.uptime === "number")
          message.uptime = object.uptime;
        else if (typeof object.uptime === "object")
          message.uptime = new $util.LongBits(object.uptime.low >>> 0, object.uptime.high >>> 0).toNumber(true);
      }
      if (object.cores != null)
        message.cores = object.cores >>> 0;
      if (object.query != null) {
        if (typeof object.query !== "object")
          throw TypeError(".pruntime_rpc.StatisticsResponse.query: object expected");
        message.query = $root.pruntime_rpc.QueryStats.fromObject(object.query);
      }
      if (object.httpEgress != null) {
        if (typeof object.httpEgress !== "object")
          throw TypeError(".pruntime_rpc.StatisticsResponse.httpEgress: object expected");
        message.httpEgress = $root.pruntime_rpc.HttpEgressStats.fromObject(object.httpEgress);
      }
      return message;
    };
    StatisticsResponse.toObject = function toObject(message, options2) {
      if (!options2)
        options2 = {};
      let object = {};
      if (options2.defaults) {
        if ($util.Long) {
          let long = new $util.Long(0, 0, true);
          object.uptime = options2.longs === String ? long.toString() : options2.longs === Number ? long.toNumber() : long;
        } else
          object.uptime = options2.longs === String ? "0" : 0;
        object.cores = 0;
        object.query = null;
        object.httpEgress = null;
      }
      if (message.uptime != null && message.hasOwnProperty("uptime"))
        if (typeof message.uptime === "number")
          object.uptime = options2.longs === String ? String(message.uptime) : message.uptime;
        else
          object.uptime = options2.longs === String ? $util.Long.prototype.toString.call(message.uptime) : options2.longs === Number ? new $util.LongBits(message.uptime.low >>> 0, message.uptime.high >>> 0).toNumber(true) : message.uptime;
      if (message.cores != null && message.hasOwnProperty("cores"))
        object.cores = message.cores;
      if (message.query != null && message.hasOwnProperty("query"))
        object.query = $root.pruntime_rpc.QueryStats.toObject(message.query, options2);
      if (message.httpEgress != null && message.hasOwnProperty("httpEgress"))
        object.httpEgress = $root.pruntime_rpc.HttpEgressStats.toObject(message.httpEgress, options2);
      return object;
    };
    StatisticsResponse.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return StatisticsResponse;
  }();
  pruntime_rpc2.QueryStats = function() {
    function QueryStats(properties) {
      this.byContract = {};
      if (properties) {
        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          if (properties[keys[i]] != null)
            this[keys[i]] = properties[keys[i]];
      }
    }
    QueryStats.prototype.global = null;
    QueryStats.prototype.byContract = $util.emptyObject;
    QueryStats.create = function create2(properties) {
      return new QueryStats(properties);
    };
    QueryStats.encode = function encode(message, writer) {
      if (!writer)
        writer = $Writer.create();
      if (message.global != null && Object.hasOwnProperty.call(message, "global"))
        $root.pruntime_rpc.QueryCounters.encode(message.global, writer.uint32(
          /* id 1, wireType 2 =*/
          10
        ).fork()).ldelim();
      if (message.byContract != null && Object.hasOwnProperty.call(message, "byContract"))
        for (let keys = Object.keys(message.byContract), i = 0; i < keys.length; ++i) {
          writer.uint32(
            /* id 2, wireType 2 =*/
            18
          ).fork().uint32(
            /* id 1, wireType 2 =*/
            10
          ).string(keys[i]);
          $root.pruntime_rpc.QueryCounters.encode(message.byContract[keys[i]], writer.uint32(
            /* id 2, wireType 2 =*/
            18
          ).fork()).ldelim().ldelim();
        }
      return writer;
    };
    QueryStats.encodeDelimited = function encodeDelimited(message, writer) {
      return this.encode(message, writer).ldelim();
    };
    QueryStats.decode = function decode(reader, length) {
      if (!(reader instanceof $Reader))
        reader = $Reader.create(reader);
      let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.pruntime_rpc.QueryStats(), key, value;
      while (reader.pos < end) {
        let tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.global = $root.pruntime_rpc.QueryCounters.decode(reader, reader.uint32());
            break;
          case 2:
            if (message.byContract === $util.emptyObject)
              message.byContract = {};
            let end2 = reader.uint32() + reader.pos;
            key = "";
            value = null;
            while (reader.pos < end2) {
              let tag2 = reader.uint32();
              switch (tag2 >>> 3) {
                case 1:
                  key = reader.string();
                  break;
                case 2:
                  value = $root.pruntime_rpc.QueryCounters.decode(reader, reader.uint32());
                  break;
                default:
                  reader.skipType(tag2 & 7);
                  break;
              }
            }
            message.byContract[key] = value;
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    };
    QueryStats.decodeDelimited = function decodeDelimited(reader) {
      if (!(reader instanceof $Reader))
        reader = new $Reader(reader);
      return this.decode(reader, reader.uint32());
    };
    QueryStats.verify = function verify(message) {
      if (typeof message !== "object" || message === null)
        return "object expected";
      if (message.global != null && message.hasOwnProperty("global")) {
        let error = $root.pruntime_rpc.QueryCounters.verify(message.global);
        if (error)
          return "global." + error;
      }
      if (message.byContract != null && message.hasOwnProperty("byContract")) {
        if (!$util.isObject(message.byContract))
          return "byContract: object expected";
        let key = Object.keys(message.byContract);
        for (let i = 0; i < key.length; ++i) {
          let error = $root.pruntime_rpc.QueryCounters.verify(message.byContract[key[i]]);
          if (error)
            return "byContract." + error;
        }
      }
      return null;
    };
    QueryStats.fromObject = function fromObject(object) {
      if (object instanceof $root.pruntime_rpc.QueryStats)
        return object;
      let message = new $root.pruntime_rpc.QueryStats();
      if (object.global != null) {
        if (typeof object.global !== "object")
          throw TypeError(".pruntime_rpc.QueryStats.global: object expected");
        message.global = $root.pruntime_rpc.QueryCounters.fromObject(object.global);
      }
      if (object.byContract) {
        if (typeof object.byContract !== "object")
          throw TypeError(".pruntime_rpc.QueryStats.byContract: object expected");
        message.byContract = {};
        for (let keys = Object.keys(object.byContract), i = 0; i < keys.length; ++i) {
          if (typeof object.byContract[keys[i]] !== "object")
            throw TypeError(".pruntime_rpc.QueryStats.byContract: object expected");
          message.byContract[keys[i]] = $root.pruntime_rpc.QueryCounters.fromObject(object.byContract[keys[i]]);
        }
      }
      return message;
    };
    QueryStats.toObject = function toObject(message, options2) {
      if (!options2)
        options2 = {};
      let object = {};
      if (options2.objects || options2.defaults)
        object.byContract = {};
      if (options2.defaults)
        object.global = null;
      if (message.global != null && message.hasOwnProperty("global"))
        object.global = $root.pruntime_rpc.QueryCounters.toObject(message.global, options2);
      let keys2;
      if (message.byContract && (keys2 = Object.keys(message.byContract)).length) {
        object.byContract = {};
        for (let j = 0; j < keys2.length; ++j)
          object.byContract[keys2[j]] = $root.pruntime_rpc.QueryCounters.toObject(message.byContract[keys2[j]], options2);
      }
      return object;
    };
    QueryStats.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return QueryStats;
  }();
  pruntime_rpc2.QueryCounters = function() {
    function QueryCounters(properties) {
      if (properties) {
        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          if (properties[keys[i]] != null)
            this[keys[i]] = properties[keys[i]];
      }
    }
    QueryCounters.prototype.total = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
    QueryCounters.prototype.dropped = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
    QueryCounters.prototype.time = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
    QueryCounters.create = function create2(properties) {
      return new QueryCounters(properties);
    };
    QueryCounters.encode = function encode(message, writer) {
      if (!writer)
        writer = $Writer.create();
      if (message.total != null && Object.hasOwnProperty.call(message, "total"))
        writer.uint32(
          /* id 1, wireType 0 =*/
          8
        ).uint64(message.total);
      if (message.dropped != null && Object.hasOwnProperty.call(message, "dropped"))
        writer.uint32(
          /* id 2, wireType 0 =*/
          16
        ).uint64(message.dropped);
      if (message.time != null && Object.hasOwnProperty.call(message, "time"))
        writer.uint32(
          /* id 3, wireType 0 =*/
          24
        ).uint64(message.time);
      return writer;
    };
    QueryCounters.encodeDelimited = function encodeDelimited(message, writer) {
      return this.encode(message, writer).ldelim();
    };
    QueryCounters.decode = function decode(reader, length) {
      if (!(reader instanceof $Reader))
        reader = $Reader.create(reader);
      let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.pruntime_rpc.QueryCounters();
      while (reader.pos < end) {
        let tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.total = reader.uint64();
            break;
          case 2:
            message.dropped = reader.uint64();
            break;
          case 3:
            message.time = reader.uint64();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    };
    QueryCounters.decodeDelimited = function decodeDelimited(reader) {
      if (!(reader instanceof $Reader))
        reader = new $Reader(reader);
      return this.decode(reader, reader.uint32());
    };
    QueryCounters.verify = function verify(message) {
      if (typeof message !== "object" || message === null)
        return "object expected";
      if (message.total != null && message.hasOwnProperty("total")) {
        if (!$util.isInteger(message.total) && !(message.total && $util.isInteger(message.total.low) && $util.isInteger(message.total.high)))
          return "total: integer|Long expected";
      }
      if (message.dropped != null && message.hasOwnProperty("dropped")) {
        if (!$util.isInteger(message.dropped) && !(message.dropped && $util.isInteger(message.dropped.low) && $util.isInteger(message.dropped.high)))
          return "dropped: integer|Long expected";
      }
      if (message.time != null && message.hasOwnProperty("time")) {
        if (!$util.isInteger(message.time) && !(message.time && $util.isInteger(message.time.low) && $util.isInteger(message.time.high)))
          return "time: integer|Long expected";
      }
      return null;
    };
    QueryCounters.fromObject = function fromObject(object) {
      if (object instanceof $root.pruntime_rpc.QueryCounters)
        return object;
      let message = new $root.pruntime_rpc.QueryCounters();
      if (object.total != null) {
        if ($util.Long)
          (message.total = $util.Long.fromValue(object.total)).unsigned = true;
        else if (typeof object.total === "string")
          message.total = parseInt(object.total, 10);
        else if (typeof object.total === "number")
          message.total = object.total;
        else if (typeof object.total === "object")
          message.total = new $util.LongBits(object.total.low >>> 0, object.total.high >>> 0).toNumber(true);
      }
      if (object.dropped != null) {
        if ($util.Long)
          (message.dropped = $util.Long.fromValue(object.dropped)).unsigned = true;
        else if (typeof object.dropped === "string")
          message.dropped = parseInt(object.dropped, 10);
        else if (typeof object.dropped === "number")
          message.dropped = object.dropped;
        else if (typeof object.dropped === "object")
          message.dropped = new $util.LongBits(object.dropped.low >>> 0, object.dropped.high >>> 0).toNumber(true);
      }
      if (object.time != null) {
        if ($util.Long)
          (message.time = $util.Long.fromValue(object.time)).unsigned = true;
        else if (typeof object.time === "string")
          message.time = parseInt(object.time, 10);
        else if (typeof object.time === "number")
          message.time = object.time;
        else if (typeof object.time === "object")
          message.time = new $util.LongBits(object.time.low >>> 0, object.time.high >>> 0).toNumber(true);
      }
      return message;
    };
    QueryCounters.toObject = function toObject(message, options2) {
      if (!options2)
        options2 = {};
      let object = {};
      if (options2.defaults) {
        if ($util.Long) {
          let long = new $util.Long(0, 0, true);
          object.total = options2.longs === String ? long.toString() : options2.longs === Number ? long.toNumber() : long;
        } else
          object.total = options2.longs === String ? "0" : 0;
        if ($util.Long) {
          let long = new $util.Long(0, 0, true);
          object.dropped = options2.longs === String ? long.toString() : options2.longs === Number ? long.toNumber() : long;
        } else
          object.dropped = options2.longs === String ? "0" : 0;
        if ($util.Long) {
          let long = new $util.Long(0, 0, true);
          object.time = options2.longs === String ? long.toString() : options2.longs === Number ? long.toNumber() : long;
        } else
          object.time = options2.longs === String ? "0" : 0;
      }
      if (message.total != null && message.hasOwnProperty("total"))
        if (typeof message.total === "number")
          object.total = options2.longs === String ? String(message.total) : message.total;
        else
          object.total = options2.longs === String ? $util.Long.prototype.toString.call(message.total) : options2.longs === Number ? new $util.LongBits(message.total.low >>> 0, message.total.high >>> 0).toNumber(true) : message.total;
      if (message.dropped != null && message.hasOwnProperty("dropped"))
        if (typeof message.dropped === "number")
          object.dropped = options2.longs === String ? String(message.dropped) : message.dropped;
        else
          object.dropped = options2.longs === String ? $util.Long.prototype.toString.call(message.dropped) : options2.longs === Number ? new $util.LongBits(message.dropped.low >>> 0, message.dropped.high >>> 0).toNumber(true) : message.dropped;
      if (message.time != null && message.hasOwnProperty("time"))
        if (typeof message.time === "number")
          object.time = options2.longs === String ? String(message.time) : message.time;
        else
          object.time = options2.longs === String ? $util.Long.prototype.toString.call(message.time) : options2.longs === Number ? new $util.LongBits(message.time.low >>> 0, message.time.high >>> 0).toNumber(true) : message.time;
      return object;
    };
    QueryCounters.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return QueryCounters;
  }();
  pruntime_rpc2.HttpEgressStats = function() {
    function HttpEgressStats(properties) {
      this.byContract = {};
      if (properties) {
        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          if (properties[keys[i]] != null)
            this[keys[i]] = properties[keys[i]];
      }
    }
    HttpEgressStats.prototype.global = null;
    HttpEgressStats.prototype.byContract = $util.emptyObject;
    HttpEgressStats.create = function create2(properties) {
      return new HttpEgressStats(properties);
    };
    HttpEgressStats.encode = function encode(message, writer) {
      if (!writer)
        writer = $Writer.create();
      if (message.global != null && Object.hasOwnProperty.call(message, "global"))
        $root.pruntime_rpc.HttpCounters.encode(message.global, writer.uint32(
          /* id 1, wireType 2 =*/
          10
        ).fork()).ldelim();
      if (message.byContract != null && Object.hasOwnProperty.call(message, "byContract"))
        for (let keys = Object.keys(message.byContract), i = 0; i < keys.length; ++i) {
          writer.uint32(
            /* id 2, wireType 2 =*/
            18
          ).fork().uint32(
            /* id 1, wireType 2 =*/
            10
          ).string(keys[i]);
          $root.pruntime_rpc.HttpCounters.encode(message.byContract[keys[i]], writer.uint32(
            /* id 2, wireType 2 =*/
            18
          ).fork()).ldelim().ldelim();
        }
      return writer;
    };
    HttpEgressStats.encodeDelimited = function encodeDelimited(message, writer) {
      return this.encode(message, writer).ldelim();
    };
    HttpEgressStats.decode = function decode(reader, length) {
      if (!(reader instanceof $Reader))
        reader = $Reader.create(reader);
      let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.pruntime_rpc.HttpEgressStats(), key, value;
      while (reader.pos < end) {
        let tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.global = $root.pruntime_rpc.HttpCounters.decode(reader, reader.uint32());
            break;
          case 2:
            if (message.byContract === $util.emptyObject)
              message.byContract = {};
            let end2 = reader.uint32() + reader.pos;
            key = "";
            value = null;
            while (reader.pos < end2) {
              let tag2 = reader.uint32();
              switch (tag2 >>> 3) {
                case 1:
                  key = reader.string();
                  break;
                case 2:
                  value = $root.pruntime_rpc.HttpCounters.decode(reader, reader.uint32());
                  break;
                default:
                  reader.skipType(tag2 & 7);
                  break;
              }
            }
            message.byContract[key] = value;
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    };
    HttpEgressStats.decodeDelimited = function decodeDelimited(reader) {
      if (!(reader instanceof $Reader))
        reader = new $Reader(reader);
      return this.decode(reader, reader.uint32());
    };
    HttpEgressStats.verify = function verify(message) {
      if (typeof message !== "object" || message === null)
        return "object expected";
      if (message.global != null && message.hasOwnProperty("global")) {
        let error = $root.pruntime_rpc.HttpCounters.verify(message.global);
        if (error)
          return "global." + error;
      }
      if (message.byContract != null && message.hasOwnProperty("byContract")) {
        if (!$util.isObject(message.byContract))
          return "byContract: object expected";
        let key = Object.keys(message.byContract);
        for (let i = 0; i < key.length; ++i) {
          let error = $root.pruntime_rpc.HttpCounters.verify(message.byContract[key[i]]);
          if (error)
            return "byContract." + error;
        }
      }
      return null;
    };
    HttpEgressStats.fromObject = function fromObject(object) {
      if (object instanceof $root.pruntime_rpc.HttpEgressStats)
        return object;
      let message = new $root.pruntime_rpc.HttpEgressStats();
      if (object.global != null) {
        if (typeof object.global !== "object")
          throw TypeError(".pruntime_rpc.HttpEgressStats.global: object expected");
        message.global = $root.pruntime_rpc.HttpCounters.fromObject(object.global);
      }
      if (object.byContract) {
        if (typeof object.byContract !== "object")
          throw TypeError(".pruntime_rpc.HttpEgressStats.byContract: object expected");
        message.byContract = {};
        for (let keys = Object.keys(object.byContract), i = 0; i < keys.length; ++i) {
          if (typeof object.byContract[keys[i]] !== "object")
            throw TypeError(".pruntime_rpc.HttpEgressStats.byContract: object expected");
          message.byContract[keys[i]] = $root.pruntime_rpc.HttpCounters.fromObject(object.byContract[keys[i]]);
        }
      }
      return message;
    };
    HttpEgressStats.toObject = function toObject(message, options2) {
      if (!options2)
        options2 = {};
      let object = {};
      if (options2.objects || options2.defaults)
        object.byContract = {};
      if (options2.defaults)
        object.global = null;
      if (message.global != null && message.hasOwnProperty("global"))
        object.global = $root.pruntime_rpc.HttpCounters.toObject(message.global, options2);
      let keys2;
      if (message.byContract && (keys2 = Object.keys(message.byContract)).length) {
        object.byContract = {};
        for (let j = 0; j < keys2.length; ++j)
          object.byContract[keys2[j]] = $root.pruntime_rpc.HttpCounters.toObject(message.byContract[keys2[j]], options2);
      }
      return object;
    };
    HttpEgressStats.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return HttpEgressStats;
  }();
  pruntime_rpc2.HttpCounters = function() {
    function HttpCounters(properties) {
      this.byStatusCode = {};
      if (properties) {
        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          if (properties[keys[i]] != null)
            this[keys[i]] = properties[keys[i]];
      }
    }
    HttpCounters.prototype.requests = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
    HttpCounters.prototype.failures = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
    HttpCounters.prototype.byStatusCode = $util.emptyObject;
    HttpCounters.create = function create2(properties) {
      return new HttpCounters(properties);
    };
    HttpCounters.encode = function encode(message, writer) {
      if (!writer)
        writer = $Writer.create();
      if (message.requests != null && Object.hasOwnProperty.call(message, "requests"))
        writer.uint32(
          /* id 1, wireType 0 =*/
          8
        ).uint64(message.requests);
      if (message.failures != null && Object.hasOwnProperty.call(message, "failures"))
        writer.uint32(
          /* id 2, wireType 0 =*/
          16
        ).uint64(message.failures);
      if (message.byStatusCode != null && Object.hasOwnProperty.call(message, "byStatusCode"))
        for (let keys = Object.keys(message.byStatusCode), i = 0; i < keys.length; ++i)
          writer.uint32(
            /* id 3, wireType 2 =*/
            26
          ).fork().uint32(
            /* id 1, wireType 0 =*/
            8
          ).uint32(keys[i]).uint32(
            /* id 2, wireType 0 =*/
            16
          ).uint64(message.byStatusCode[keys[i]]).ldelim();
      return writer;
    };
    HttpCounters.encodeDelimited = function encodeDelimited(message, writer) {
      return this.encode(message, writer).ldelim();
    };
    HttpCounters.decode = function decode(reader, length) {
      if (!(reader instanceof $Reader))
        reader = $Reader.create(reader);
      let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.pruntime_rpc.HttpCounters(), key, value;
      while (reader.pos < end) {
        let tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.requests = reader.uint64();
            break;
          case 2:
            message.failures = reader.uint64();
            break;
          case 3:
            if (message.byStatusCode === $util.emptyObject)
              message.byStatusCode = {};
            let end2 = reader.uint32() + reader.pos;
            key = 0;
            value = 0;
            while (reader.pos < end2) {
              let tag2 = reader.uint32();
              switch (tag2 >>> 3) {
                case 1:
                  key = reader.uint32();
                  break;
                case 2:
                  value = reader.uint64();
                  break;
                default:
                  reader.skipType(tag2 & 7);
                  break;
              }
            }
            message.byStatusCode[key] = value;
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    };
    HttpCounters.decodeDelimited = function decodeDelimited(reader) {
      if (!(reader instanceof $Reader))
        reader = new $Reader(reader);
      return this.decode(reader, reader.uint32());
    };
    HttpCounters.verify = function verify(message) {
      if (typeof message !== "object" || message === null)
        return "object expected";
      if (message.requests != null && message.hasOwnProperty("requests")) {
        if (!$util.isInteger(message.requests) && !(message.requests && $util.isInteger(message.requests.low) && $util.isInteger(message.requests.high)))
          return "requests: integer|Long expected";
      }
      if (message.failures != null && message.hasOwnProperty("failures")) {
        if (!$util.isInteger(message.failures) && !(message.failures && $util.isInteger(message.failures.low) && $util.isInteger(message.failures.high)))
          return "failures: integer|Long expected";
      }
      if (message.byStatusCode != null && message.hasOwnProperty("byStatusCode")) {
        if (!$util.isObject(message.byStatusCode))
          return "byStatusCode: object expected";
        let key = Object.keys(message.byStatusCode);
        for (let i = 0; i < key.length; ++i) {
          if (!$util.key32Re.test(key[i]))
            return "byStatusCode: integer key{k:uint32} expected";
          if (!$util.isInteger(message.byStatusCode[key[i]]) && !(message.byStatusCode[key[i]] && $util.isInteger(message.byStatusCode[key[i]].low) && $util.isInteger(message.byStatusCode[key[i]].high)))
            return "byStatusCode: integer|Long{k:uint32} expected";
        }
      }
      return null;
    };
    HttpCounters.fromObject = function fromObject(object) {
      if (object instanceof $root.pruntime_rpc.HttpCounters)
        return object;
      let message = new $root.pruntime_rpc.HttpCounters();
      if (object.requests != null) {
        if ($util.Long)
          (message.requests = $util.Long.fromValue(object.requests)).unsigned = true;
        else if (typeof object.requests === "string")
          message.requests = parseInt(object.requests, 10);
        else if (typeof object.requests === "number")
          message.requests = object.requests;
        else if (typeof object.requests === "object")
          message.requests = new $util.LongBits(object.requests.low >>> 0, object.requests.high >>> 0).toNumber(true);
      }
      if (object.failures != null) {
        if ($util.Long)
          (message.failures = $util.Long.fromValue(object.failures)).unsigned = true;
        else if (typeof object.failures === "string")
          message.failures = parseInt(object.failures, 10);
        else if (typeof object.failures === "number")
          message.failures = object.failures;
        else if (typeof object.failures === "object")
          message.failures = new $util.LongBits(object.failures.low >>> 0, object.failures.high >>> 0).toNumber(true);
      }
      if (object.byStatusCode) {
        if (typeof object.byStatusCode !== "object")
          throw TypeError(".pruntime_rpc.HttpCounters.byStatusCode: object expected");
        message.byStatusCode = {};
        for (let keys = Object.keys(object.byStatusCode), i = 0; i < keys.length; ++i)
          if ($util.Long)
            (message.byStatusCode[keys[i]] = $util.Long.fromValue(object.byStatusCode[keys[i]])).unsigned = true;
          else if (typeof object.byStatusCode[keys[i]] === "string")
            message.byStatusCode[keys[i]] = parseInt(object.byStatusCode[keys[i]], 10);
          else if (typeof object.byStatusCode[keys[i]] === "number")
            message.byStatusCode[keys[i]] = object.byStatusCode[keys[i]];
          else if (typeof object.byStatusCode[keys[i]] === "object")
            message.byStatusCode[keys[i]] = new $util.LongBits(object.byStatusCode[keys[i]].low >>> 0, object.byStatusCode[keys[i]].high >>> 0).toNumber(true);
      }
      return message;
    };
    HttpCounters.toObject = function toObject(message, options2) {
      if (!options2)
        options2 = {};
      let object = {};
      if (options2.objects || options2.defaults)
        object.byStatusCode = {};
      if (options2.defaults) {
        if ($util.Long) {
          let long = new $util.Long(0, 0, true);
          object.requests = options2.longs === String ? long.toString() : options2.longs === Number ? long.toNumber() : long;
        } else
          object.requests = options2.longs === String ? "0" : 0;
        if ($util.Long) {
          let long = new $util.Long(0, 0, true);
          object.failures = options2.longs === String ? long.toString() : options2.longs === Number ? long.toNumber() : long;
        } else
          object.failures = options2.longs === String ? "0" : 0;
      }
      if (message.requests != null && message.hasOwnProperty("requests"))
        if (typeof message.requests === "number")
          object.requests = options2.longs === String ? String(message.requests) : message.requests;
        else
          object.requests = options2.longs === String ? $util.Long.prototype.toString.call(message.requests) : options2.longs === Number ? new $util.LongBits(message.requests.low >>> 0, message.requests.high >>> 0).toNumber(true) : message.requests;
      if (message.failures != null && message.hasOwnProperty("failures"))
        if (typeof message.failures === "number")
          object.failures = options2.longs === String ? String(message.failures) : message.failures;
        else
          object.failures = options2.longs === String ? $util.Long.prototype.toString.call(message.failures) : options2.longs === Number ? new $util.LongBits(message.failures.low >>> 0, message.failures.high >>> 0).toNumber(true) : message.failures;
      let keys2;
      if (message.byStatusCode && (keys2 = Object.keys(message.byStatusCode)).length) {
        object.byStatusCode = {};
        for (let j = 0; j < keys2.length; ++j)
          if (typeof message.byStatusCode[keys2[j]] === "number")
            object.byStatusCode[keys2[j]] = options2.longs === String ? String(message.byStatusCode[keys2[j]]) : message.byStatusCode[keys2[j]];
          else
            object.byStatusCode[keys2[j]] = options2.longs === String ? $util.Long.prototype.toString.call(message.byStatusCode[keys2[j]]) : options2.longs === Number ? new $util.LongBits(message.byStatusCode[keys2[j]].low >>> 0, message.byStatusCode[keys2[j]].high >>> 0).toNumber(true) : message.byStatusCode[keys2[j]];
      }
      return object;
    };
    HttpCounters.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return HttpCounters;
  }();
  return pruntime_rpc2;
})();
var google = $root.google = (() => {
  const google2 = {};
  google2.protobuf = function() {
    const protobuf = {};
    protobuf.Empty = function() {
      function Empty(properties) {
        if (properties) {
          for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
            if (properties[keys[i]] != null)
              this[keys[i]] = properties[keys[i]];
        }
      }
      Empty.create = function create2(properties) {
        return new Empty(properties);
      };
      Empty.encode = function encode(message, writer) {
        if (!writer)
          writer = $Writer.create();
        return writer;
      };
      Empty.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      Empty.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
          reader = $Reader.create(reader);
        let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.Empty();
        while (reader.pos < end) {
          let tag = reader.uint32();
          switch (tag >>> 3) {
            default:
              reader.skipType(tag & 7);
              break;
          }
        }
        return message;
      };
      Empty.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
          reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
      };
      Empty.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
          return "object expected";
        return null;
      };
      Empty.fromObject = function fromObject(object) {
        if (object instanceof $root.google.protobuf.Empty)
          return object;
        return new $root.google.protobuf.Empty();
      };
      Empty.toObject = function toObject() {
        return {};
      };
      Empty.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return Empty;
    }();
    return protobuf;
  }();
  return google2;
})();

// src/abis/system.json
var system_default = {
  source: {
    hash: "0xb6c58a33b0237d7a9e972aec23518fee82f1f41313b6554913037966ac936eda",
    language: "ink! 4.1.0",
    compiler: "rustc 1.69.0-nightly",
    build_info: {
      build_mode: "Debug",
      cargo_contract_version: "2.1.0",
      rust_toolchain: "nightly-aarch64-apple-darwin",
      wasm_opt_settings: {
        keep_debug_symbols: false,
        optimization_passes: "Z"
      }
    }
  },
  contract: {
    name: "system",
    version: "0.1.0",
    authors: [
      "[your_name] <[your_email]>"
    ]
  },
  spec: {
    constructors: [
      {
        args: [],
        docs: [],
        label: "default",
        payable: false,
        returnType: {
          displayName: [
            "ink_primitives",
            "ConstructorResult"
          ],
          type: 4
        },
        selector: "0xed4b9d1b"
      }
    ],
    docs: [],
    events: [],
    lang_error: {
      displayName: [
        "ink",
        "LangError"
      ],
      type: 5
    },
    messages: [
      {
        args: [],
        docs: [],
        label: "System::version",
        mutates: false,
        payable: false,
        returnType: {
          displayName: [
            "ink",
            "MessageResult"
          ],
          type: 6
        },
        selector: "0x87c98a8d"
      },
      {
        args: [
          {
            label: "contract_id",
            type: {
              displayName: [
                "AccountId"
              ],
              type: 0
            }
          }
        ],
        docs: [],
        label: "System::grant_admin",
        mutates: true,
        payable: false,
        returnType: {
          displayName: [
            "ink",
            "MessageResult"
          ],
          type: 9
        },
        selector: "0x67612061"
      },
      {
        args: [
          {
            label: "name",
            type: {
              displayName: [
                "String"
              ],
              type: 12
            }
          },
          {
            label: "contract_id",
            type: {
              displayName: [
                "AccountId"
              ],
              type: 0
            }
          }
        ],
        docs: [],
        label: "System::set_driver",
        mutates: true,
        payable: false,
        returnType: {
          displayName: [
            "ink",
            "MessageResult"
          ],
          type: 9
        },
        selector: "0xaa1e2030"
      },
      {
        args: [
          {
            label: "name",
            type: {
              displayName: [
                "String"
              ],
              type: 12
            }
          }
        ],
        docs: [],
        label: "System::get_driver",
        mutates: false,
        payable: false,
        returnType: {
          displayName: [
            "ink",
            "MessageResult"
          ],
          type: 13
        },
        selector: "0x2740cf0a"
      },
      {
        args: [
          {
            label: "contract_id",
            type: {
              displayName: [
                "AccountId"
              ],
              type: 0
            }
          },
          {
            label: "code_hash",
            type: {
              displayName: [
                "pink",
                "Hash"
              ],
              type: 1
            }
          }
        ],
        docs: [],
        label: "System::deploy_sidevm_to",
        mutates: false,
        payable: false,
        returnType: {
          displayName: [
            "ink",
            "MessageResult"
          ],
          type: 9
        },
        selector: "0x662f4aa4"
      },
      {
        args: [
          {
            label: "contract_id",
            type: {
              displayName: [
                "AccountId"
              ],
              type: 0
            }
          }
        ],
        docs: [],
        label: "System::stop_sidevm_at",
        mutates: false,
        payable: false,
        returnType: {
          displayName: [
            "ink",
            "MessageResult"
          ],
          type: 9
        },
        selector: "0x52a0fd6a"
      },
      {
        args: [
          {
            label: "hook",
            type: {
              displayName: [
                "HookPoint"
              ],
              type: 15
            }
          },
          {
            label: "contract",
            type: {
              displayName: [
                "AccountId"
              ],
              type: 0
            }
          },
          {
            label: "selector",
            type: {
              displayName: [
                "u32"
              ],
              type: 16
            }
          },
          {
            label: "gas_limit",
            type: {
              displayName: [
                "u64"
              ],
              type: 17
            }
          }
        ],
        docs: [],
        label: "System::set_hook",
        mutates: true,
        payable: false,
        returnType: {
          displayName: [
            "ink",
            "MessageResult"
          ],
          type: 9
        },
        selector: "0x352c6b5c"
      },
      {
        args: [
          {
            label: "contract_id",
            type: {
              displayName: [
                "AccountId"
              ],
              type: 0
            }
          },
          {
            label: "weight",
            type: {
              displayName: [
                "u32"
              ],
              type: 16
            }
          }
        ],
        docs: [],
        label: "System::set_contract_weight",
        mutates: false,
        payable: false,
        returnType: {
          displayName: [
            "ink",
            "MessageResult"
          ],
          type: 9
        },
        selector: "0x45ec9b18"
      },
      {
        args: [
          {
            label: "account",
            type: {
              displayName: [
                "AccountId"
              ],
              type: 0
            }
          }
        ],
        docs: [],
        label: "System::total_balance_of",
        mutates: false,
        payable: false,
        returnType: {
          displayName: [
            "ink",
            "MessageResult"
          ],
          type: 18
        },
        selector: "0x5a98f226"
      },
      {
        args: [
          {
            label: "account",
            type: {
              displayName: [
                "AccountId"
              ],
              type: 0
            }
          }
        ],
        docs: [],
        label: "System::free_balance_of",
        mutates: false,
        payable: false,
        returnType: {
          displayName: [
            "ink",
            "MessageResult"
          ],
          type: 18
        },
        selector: "0x8a0d40d7"
      },
      {
        args: [
          {
            label: "contract_id",
            type: {
              displayName: [
                "AccountId"
              ],
              type: 0
            }
          }
        ],
        docs: [],
        label: "System::is_admin",
        mutates: false,
        payable: false,
        returnType: {
          displayName: [
            "ink",
            "MessageResult"
          ],
          type: 20
        },
        selector: "0xf06f050a"
      },
      {
        args: [],
        docs: [],
        label: "System::upgrade_system_contract",
        mutates: false,
        payable: false,
        returnType: {
          displayName: [
            "ink",
            "MessageResult"
          ],
          type: 9
        },
        selector: "0xaf69ca03"
      },
      {
        args: [
          {
            label: "from_version",
            type: {
              displayName: [],
              type: 7
            }
          }
        ],
        docs: [],
        label: "System::do_upgrade",
        mutates: false,
        payable: false,
        returnType: {
          displayName: [
            "ink",
            "MessageResult"
          ],
          type: 9
        },
        selector: "0x667e0041"
      },
      {
        args: [
          {
            label: "version",
            type: {
              displayName: [],
              type: 22
            }
          }
        ],
        docs: [
          " Upgrade the contract runtime",
          "",
          " Be careful when using this function, it would panic the worker if the",
          " runtime version is not supported."
        ],
        label: "System::upgrade_runtime",
        mutates: false,
        payable: false,
        returnType: {
          displayName: [
            "ink",
            "MessageResult"
          ],
          type: 9
        },
        selector: "0x317f6bf3"
      },
      {
        args: [
          {
            label: "code_hash",
            type: {
              displayName: [],
              type: 1
            }
          },
          {
            label: "code_type",
            type: {
              displayName: [
                "CodeType"
              ],
              type: 23
            }
          }
        ],
        docs: [
          " Check if the code is already uploaded to the cluster with given code hash."
        ],
        label: "System::code_exists",
        mutates: false,
        payable: false,
        returnType: {
          displayName: [
            "ink",
            "MessageResult"
          ],
          type: 20
        },
        selector: "0x6fc58436"
      },
      {
        args: [
          {
            label: "contract_id",
            type: {
              displayName: [
                "AccountId"
              ],
              type: 0
            }
          },
          {
            label: "deposit",
            type: {
              displayName: [
                "Balance"
              ],
              type: 19
            }
          }
        ],
        docs: [],
        label: "ContractDeposit::change_deposit",
        mutates: true,
        payable: false,
        returnType: {
          displayName: [
            "ink",
            "MessageResult"
          ],
          type: 24
        },
        selector: "0xa24bcb44"
      }
    ]
  },
  storage: {
    root: {
      layout: {
        struct: {
          fields: [
            {
              layout: {
                leaf: {
                  key: "0x00000000",
                  ty: 0
                }
              },
              name: "owner"
            },
            {
              layout: {
                root: {
                  layout: {
                    leaf: {
                      key: "0x11ab091d",
                      ty: 3
                    }
                  },
                  root_key: "0x11ab091d"
                }
              },
              name: "administrators"
            },
            {
              layout: {
                root: {
                  layout: {
                    leaf: {
                      key: "0xe69daeed",
                      ty: 0
                    }
                  },
                  root_key: "0xe69daeed"
                }
              },
              name: "drivers"
            }
          ],
          name: "System"
        }
      },
      root_key: "0x00000000"
    }
  },
  types: [
    {
      id: 0,
      type: {
        def: {
          composite: {
            fields: [
              {
                type: 1,
                typeName: "[u8; 32]"
              }
            ]
          }
        },
        path: [
          "ink_primitives",
          "types",
          "AccountId"
        ]
      }
    },
    {
      id: 1,
      type: {
        def: {
          array: {
            len: 32,
            type: 2
          }
        }
      }
    },
    {
      id: 2,
      type: {
        def: {
          primitive: "u8"
        }
      }
    },
    {
      id: 3,
      type: {
        def: {
          tuple: []
        }
      }
    },
    {
      id: 4,
      type: {
        def: {
          variant: {
            variants: [
              {
                fields: [
                  {
                    type: 3
                  }
                ],
                index: 0,
                name: "Ok"
              },
              {
                fields: [
                  {
                    type: 5
                  }
                ],
                index: 1,
                name: "Err"
              }
            ]
          }
        },
        params: [
          {
            name: "T",
            type: 3
          },
          {
            name: "E",
            type: 5
          }
        ],
        path: [
          "Result"
        ]
      }
    },
    {
      id: 5,
      type: {
        def: {
          variant: {
            variants: [
              {
                index: 1,
                name: "CouldNotReadInput"
              }
            ]
          }
        },
        path: [
          "ink_primitives",
          "LangError"
        ]
      }
    },
    {
      id: 6,
      type: {
        def: {
          variant: {
            variants: [
              {
                fields: [
                  {
                    type: 7
                  }
                ],
                index: 0,
                name: "Ok"
              },
              {
                fields: [
                  {
                    type: 5
                  }
                ],
                index: 1,
                name: "Err"
              }
            ]
          }
        },
        params: [
          {
            name: "T",
            type: 7
          },
          {
            name: "E",
            type: 5
          }
        ],
        path: [
          "Result"
        ]
      }
    },
    {
      id: 7,
      type: {
        def: {
          tuple: [
            8,
            8
          ]
        }
      }
    },
    {
      id: 8,
      type: {
        def: {
          primitive: "u16"
        }
      }
    },
    {
      id: 9,
      type: {
        def: {
          variant: {
            variants: [
              {
                fields: [
                  {
                    type: 10
                  }
                ],
                index: 0,
                name: "Ok"
              },
              {
                fields: [
                  {
                    type: 5
                  }
                ],
                index: 1,
                name: "Err"
              }
            ]
          }
        },
        params: [
          {
            name: "T",
            type: 10
          },
          {
            name: "E",
            type: 5
          }
        ],
        path: [
          "Result"
        ]
      }
    },
    {
      id: 10,
      type: {
        def: {
          variant: {
            variants: [
              {
                fields: [
                  {
                    type: 3
                  }
                ],
                index: 0,
                name: "Ok"
              },
              {
                fields: [
                  {
                    type: 11
                  }
                ],
                index: 1,
                name: "Err"
              }
            ]
          }
        },
        params: [
          {
            name: "T",
            type: 3
          },
          {
            name: "E",
            type: 11
          }
        ],
        path: [
          "Result"
        ]
      }
    },
    {
      id: 11,
      type: {
        def: {
          variant: {
            variants: [
              {
                index: 0,
                name: "PermisionDenied"
              },
              {
                index: 1,
                name: "DriverNotFound"
              },
              {
                index: 2,
                name: "CodeNotFound"
              },
              {
                index: 3,
                name: "ConditionNotMet"
              }
            ]
          }
        },
        path: [
          "pink_extension",
          "system",
          "Error"
        ]
      }
    },
    {
      id: 12,
      type: {
        def: {
          primitive: "str"
        }
      }
    },
    {
      id: 13,
      type: {
        def: {
          variant: {
            variants: [
              {
                fields: [
                  {
                    type: 14
                  }
                ],
                index: 0,
                name: "Ok"
              },
              {
                fields: [
                  {
                    type: 5
                  }
                ],
                index: 1,
                name: "Err"
              }
            ]
          }
        },
        params: [
          {
            name: "T",
            type: 14
          },
          {
            name: "E",
            type: 5
          }
        ],
        path: [
          "Result"
        ]
      }
    },
    {
      id: 14,
      type: {
        def: {
          variant: {
            variants: [
              {
                index: 0,
                name: "None"
              },
              {
                fields: [
                  {
                    type: 0
                  }
                ],
                index: 1,
                name: "Some"
              }
            ]
          }
        },
        params: [
          {
            name: "T",
            type: 0
          }
        ],
        path: [
          "Option"
        ]
      }
    },
    {
      id: 15,
      type: {
        def: {
          variant: {
            variants: [
              {
                index: 0,
                name: "OnBlockEnd"
              }
            ]
          }
        },
        path: [
          "pink_extension",
          "HookPoint"
        ]
      }
    },
    {
      id: 16,
      type: {
        def: {
          primitive: "u32"
        }
      }
    },
    {
      id: 17,
      type: {
        def: {
          primitive: "u64"
        }
      }
    },
    {
      id: 18,
      type: {
        def: {
          variant: {
            variants: [
              {
                fields: [
                  {
                    type: 19
                  }
                ],
                index: 0,
                name: "Ok"
              },
              {
                fields: [
                  {
                    type: 5
                  }
                ],
                index: 1,
                name: "Err"
              }
            ]
          }
        },
        params: [
          {
            name: "T",
            type: 19
          },
          {
            name: "E",
            type: 5
          }
        ],
        path: [
          "Result"
        ]
      }
    },
    {
      id: 19,
      type: {
        def: {
          primitive: "u128"
        }
      }
    },
    {
      id: 20,
      type: {
        def: {
          variant: {
            variants: [
              {
                fields: [
                  {
                    type: 21
                  }
                ],
                index: 0,
                name: "Ok"
              },
              {
                fields: [
                  {
                    type: 5
                  }
                ],
                index: 1,
                name: "Err"
              }
            ]
          }
        },
        params: [
          {
            name: "T",
            type: 21
          },
          {
            name: "E",
            type: 5
          }
        ],
        path: [
          "Result"
        ]
      }
    },
    {
      id: 21,
      type: {
        def: {
          primitive: "bool"
        }
      }
    },
    {
      id: 22,
      type: {
        def: {
          tuple: [
            16,
            16
          ]
        }
      }
    },
    {
      id: 23,
      type: {
        def: {
          variant: {
            variants: [
              {
                index: 0,
                name: "Ink"
              },
              {
                index: 1,
                name: "Sidevm"
              }
            ]
          }
        },
        path: [
          "pink_extension",
          "system",
          "CodeType"
        ]
      }
    },
    {
      id: 24,
      type: {
        def: {
          variant: {
            variants: [
              {
                fields: [
                  {
                    type: 25
                  }
                ],
                index: 0,
                name: "Ok"
              },
              {
                fields: [
                  {
                    type: 5
                  }
                ],
                index: 1,
                name: "Err"
              }
            ]
          }
        },
        params: [
          {
            name: "T",
            type: 25
          },
          {
            name: "E",
            type: 5
          }
        ],
        path: [
          "Result"
        ]
      }
    },
    {
      id: 25,
      type: {
        def: {
          variant: {
            variants: [
              {
                fields: [
                  {
                    type: 3
                  }
                ],
                index: 0,
                name: "Ok"
              },
              {
                fields: [
                  {
                    type: 26
                  }
                ],
                index: 1,
                name: "Err"
              }
            ]
          }
        },
        params: [
          {
            name: "T",
            type: 3
          },
          {
            name: "E",
            type: 26
          }
        ],
        path: [
          "Result"
        ]
      }
    },
    {
      id: 26,
      type: {
        def: {
          variant: {
            variants: [
              {
                fields: [
                  {
                    type: 12,
                    typeName: "String"
                  }
                ],
                index: 0,
                name: "Other"
              },
              {
                fields: [
                  {
                    type: 11,
                    typeName: "Error"
                  }
                ],
                index: 1,
                name: "SystemError"
              },
              {
                index: 2,
                name: "BadOrigin"
              }
            ]
          }
        },
        path: [
          "pink_extension",
          "system",
          "DriverError"
        ]
      }
    }
  ],
  version: "4"
};

// src/abis/log_server.json
var log_server_default = {
  source: {
    hash: "0x52efffdaef64e90a1a914345c0f6a185c72ce6cd38292eeae797159465779bcd",
    language: "ink! 4.0.0-rc",
    compiler: "rustc 1.66.0-nightly",
    build_info: {
      build_mode: "Release",
      cargo_contract_version: "2.0.0-rc.1",
      rust_toolchain: "nightly-aarch64-apple-darwin",
      wasm_opt_settings: {
        keep_debug_symbols: false,
        optimization_passes: "Z"
      }
    }
  },
  contract: {
    name: "log_server",
    version: "0.1.0",
    authors: [
      "[your_name] <[your_email]>"
    ]
  },
  spec: {
    constructors: [
      {
        args: [],
        docs: [],
        label: "default",
        payable: false,
        returnType: {
          displayName: [
            "ink_primitives",
            "ConstructorResult"
          ],
          type: 0
        },
        selector: "0xed4b9d1b"
      }
    ],
    docs: [],
    events: [],
    lang_error: {
      displayName: [
        "ink",
        "LangError"
      ],
      type: 2
    },
    messages: [
      {
        args: [
          {
            label: "msg",
            type: {
              displayName: [
                "alloc",
                "string",
                "String"
              ],
              type: 3
            }
          }
        ],
        docs: [],
        label: "log_test",
        mutates: false,
        payable: false,
        returnType: {
          displayName: [
            "ink",
            "MessageResult"
          ],
          type: 0
        },
        selector: "0x654fa7c0"
      }
    ]
  },
  storage: {
    root: {
      layout: {
        struct: {
          fields: [],
          name: "Contract"
        }
      },
      root_key: "0x00000000"
    }
  },
  types: [
    {
      id: 0,
      type: {
        def: {
          variant: {
            variants: [
              {
                fields: [
                  {
                    type: 1
                  }
                ],
                index: 0,
                name: "Ok"
              },
              {
                fields: [
                  {
                    type: 2
                  }
                ],
                index: 1,
                name: "Err"
              }
            ]
          }
        },
        params: [
          {
            name: "T",
            type: 1
          },
          {
            name: "E",
            type: 2
          }
        ],
        path: [
          "Result"
        ]
      }
    },
    {
      id: 1,
      type: {
        def: {
          tuple: []
        }
      }
    },
    {
      id: 2,
      type: {
        def: {
          variant: {
            variants: [
              {
                index: 1,
                name: "CouldNotReadInput"
              }
            ]
          }
        },
        path: [
          "ink_primitives",
          "LangError"
        ]
      }
    },
    {
      id: 3,
      type: {
        def: {
          primitive: "str"
        }
      }
    }
  ],
  version: "4"
};

// src/lib/types.ts
var types = {
  ContractId: "H256",
  EcdhPublicKey: "SpCoreSr25519Public",
  ContractQueryHead: {
    id: "ContractId",
    nonce: "[u8; 32]"
  },
  CertificateBody: {
    pubkey: "Vec<u8>",
    ttl: "u32",
    config_bits: "u32"
  },
  EncryptedData: {
    iv: "[u8; 12]",
    pubkey: "EcdhPublicKey",
    data: "Vec<u8>"
  },
  CommandPayload: {
    _enum: {
      Plain: null,
      // disable plain
      Encrypted: "EncryptedData"
    }
  },
  InkQueryData: {
    _enum: {
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore
      InkMessage: {
        payload: "Vec<u8>",
        deposit: "u128",
        transfer: "u128",
        estimating: "bool"
      },
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore
      SidevmMessage: "Vec<u8>",
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore
      InkInstantiate: {
        codeHash: "H256",
        salt: "Vec<u8>",
        instantiateData: "Vec<u8>",
        deposit: "u128",
        transfer: "u128"
      }
    }
  },
  InkQuery: {
    head: "ContractQueryHead",
    data: "InkQueryData"
  },
  InkQueryError: {
    _enum: {
      BadOrigin: null,
      RuntimeError: "String",
      SidevmNotFound: null,
      NoResponse: null,
      ServiceUnavailable: null,
      Timeout: null
    }
  },
  InkQueryOk: {
    _enum: {
      InkMessageReturn: "Vec<u8>"
    }
  },
  InkResponse: {
    nonce: "[u8; 32]",
    result: "Result<InkQueryOk, InkQueryError>"
  },
  InkMessage: {
    nonce: "Vec<u8>",
    message: "Vec<u8>",
    transfer: "u128",
    gasLimit: "u64",
    storageDepositLimit: "Option<u128>"
  },
  InkCommand: { _enum: { InkMessage: "InkMessage" } }
};

// src/lib/hex.ts
import { randomBytes } from "crypto-browserify";
var randomHex = (size = 12) => randomBytes(size).toString("hex");

// src/create.ts
import {
  BN,
  hexAddPrefix as hexAddPrefix2,
  hexStripPrefix as hexStripPrefix2,
  hexToU8a as hexToU8a2,
  stringToHex,
  u8aToHex
} from "@polkadot/util";

// node_modules/@polkadot/wasm-bridge/bridge.js
import { stringToU8a, u8aToString } from "@polkadot/util";

// node_modules/@polkadot/x-randomvalues/node.js
import nodeCrypto from "node:crypto";

// node_modules/@polkadot/x-global/index.js
function evaluateThis(fn) {
  return fn("return this");
}
var xglobal = typeof globalThis !== "undefined" ? globalThis : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : evaluateThis(Function);
function extractGlobal(name, fallback) {
  return typeof xglobal[name] === "undefined" ? fallback : xglobal[name];
}

// node_modules/@polkadot/x-randomvalues/node.js
var crypto = /* @__PURE__ */ extractGlobal("crypto", nodeCrypto.webcrypto);
function getRandomValues(output) {
  return crypto.getRandomValues(output);
}

// node_modules/@polkadot/wasm-bridge/wbg.js
var DEFAULT_CRYPTO = { getRandomValues };
var DEFAULT_SELF = { crypto: DEFAULT_CRYPTO };
var Wbg = class {
  constructor(bridge2) {
    this.abort = () => {
      throw new Error("abort");
    };
    this.__wbindgen_is_undefined = (idx) => {
      return this.__internal__bridge.getObject(idx) === void 0;
    };
    this.__wbindgen_throw = (ptr, len) => {
      throw new Error(this.__internal__bridge.getString(ptr, len));
    };
    this.__wbg_self_1b7a39e3a92c949c = () => {
      return this.__internal__bridge.addObject(DEFAULT_SELF);
    };
    this.__wbg_require_604837428532a733 = (ptr, len) => {
      throw new Error(`Unable to require ${this.__internal__bridge.getString(ptr, len)}`);
    };
    this.__wbg_crypto_968f1772287e2df0 = (_idx) => {
      return this.__internal__bridge.addObject(DEFAULT_CRYPTO);
    };
    this.__wbg_getRandomValues_a3d34b4fee3c2869 = (_idx) => {
      return this.__internal__bridge.addObject(DEFAULT_CRYPTO.getRandomValues);
    };
    this.__wbg_getRandomValues_f5e14ab7ac8e995d = (_arg0, ptr, len) => {
      DEFAULT_CRYPTO.getRandomValues(this.__internal__bridge.getU8a(ptr, len));
    };
    this.__wbg_randomFillSync_d5bd2d655fdf256a = (_idx, _ptr, _len) => {
      throw new Error("randomFillsync is not available");
    };
    this.__wbindgen_object_drop_ref = (idx) => {
      this.__internal__bridge.takeObject(idx);
    };
    this.__internal__bridge = bridge2;
  }
};

// node_modules/@polkadot/wasm-bridge/bridge.js
var Bridge = class {
  constructor(createWasm2) {
    this.__internal__createWasm = createWasm2;
    this.__internal__cachegetInt32 = null;
    this.__internal__cachegetUint8 = null;
    this.__internal__heap = new Array(32).fill(void 0).concat(void 0, null, true, false);
    this.__internal__heapNext = this.__internal__heap.length;
    this.__internal__type = "none";
    this.__internal__wasm = null;
    this.__internal__wasmError = null;
    this.__internal__wasmPromise = null;
    this.__internal__wbg = { ...new Wbg(this) };
  }
  /** @description Returns the init error */
  get error() {
    return this.__internal__wasmError;
  }
  /** @description Returns the init type */
  get type() {
    return this.__internal__type;
  }
  /** @description Returns the created wasm interface */
  get wasm() {
    return this.__internal__wasm;
  }
  /** @description Performs the wasm initialization */
  async init(createWasm2) {
    if (!this.__internal__wasmPromise || createWasm2) {
      this.__internal__wasmPromise = (createWasm2 || this.__internal__createWasm)(this.__internal__wbg);
    }
    const { error, type, wasm } = await this.__internal__wasmPromise;
    this.__internal__type = type;
    this.__internal__wasm = wasm;
    this.__internal__wasmError = error;
    return this.__internal__wasm;
  }
  /**
   * @internal
   * @description Gets an object from the heap
   */
  getObject(idx) {
    return this.__internal__heap[idx];
  }
  /**
   * @internal
   * @description Removes an object from the heap
   */
  dropObject(idx) {
    if (idx < 36) {
      return;
    }
    this.__internal__heap[idx] = this.__internal__heapNext;
    this.__internal__heapNext = idx;
  }
  /**
   * @internal
   * @description Retrieves and removes an object to the heap
   */
  takeObject(idx) {
    const ret = this.getObject(idx);
    this.dropObject(idx);
    return ret;
  }
  /**
   * @internal
   * @description Adds an object to the heap
   */
  addObject(obj) {
    if (this.__internal__heapNext === this.__internal__heap.length) {
      this.__internal__heap.push(this.__internal__heap.length + 1);
    }
    const idx = this.__internal__heapNext;
    this.__internal__heapNext = this.__internal__heap[idx];
    this.__internal__heap[idx] = obj;
    return idx;
  }
  /**
   * @internal
   * @description Retrieve an Int32 in the WASM interface
   */
  getInt32() {
    if (this.__internal__cachegetInt32 === null || this.__internal__cachegetInt32.buffer !== this.__internal__wasm.memory.buffer) {
      this.__internal__cachegetInt32 = new Int32Array(this.__internal__wasm.memory.buffer);
    }
    return this.__internal__cachegetInt32;
  }
  /**
   * @internal
   * @description Retrieve an Uint8Array in the WASM interface
   */
  getUint8() {
    if (this.__internal__cachegetUint8 === null || this.__internal__cachegetUint8.buffer !== this.__internal__wasm.memory.buffer) {
      this.__internal__cachegetUint8 = new Uint8Array(this.__internal__wasm.memory.buffer);
    }
    return this.__internal__cachegetUint8;
  }
  /**
   * @internal
   * @description Retrieves an Uint8Array in the WASM interface
   */
  getU8a(ptr, len) {
    return this.getUint8().subarray(ptr / 1, ptr / 1 + len);
  }
  /**
   * @internal
   * @description Retrieves a string in the WASM interface
   */
  getString(ptr, len) {
    return u8aToString(this.getU8a(ptr, len));
  }
  /**
   * @internal
   * @description Allocates an Uint8Array in the WASM interface
   */
  allocU8a(arg) {
    const ptr = this.__internal__wasm.__wbindgen_malloc(arg.length * 1);
    this.getUint8().set(arg, ptr / 1);
    return [ptr, arg.length];
  }
  /**
   * @internal
   * @description Allocates a string in the WASM interface
   */
  allocString(arg) {
    return this.allocU8a(stringToU8a(arg));
  }
  /**
   * @internal
   * @description Retrieves an Uint8Array from the WASM interface
   */
  resultU8a() {
    const r0 = this.getInt32()[8 / 4 + 0];
    const r1 = this.getInt32()[8 / 4 + 1];
    const ret = this.getU8a(r0, r1).slice();
    this.__internal__wasm.__wbindgen_free(r0, r1 * 1);
    return ret;
  }
  /**
   * @internal
   * @description Retrieve a string from the WASM interface
   */
  resultString() {
    return u8aToString(this.resultU8a());
  }
};

// node_modules/@polkadot/wasm-bridge/init.js
function createWasmFn(root, wasmBytes2, asmFn) {
  return async (wbg) => {
    const result = {
      error: null,
      type: "none",
      wasm: null
    };
    try {
      if (!wasmBytes2 || !wasmBytes2.length) {
        throw new Error("No WebAssembly provided for initialization");
      } else if (typeof WebAssembly !== "object" || typeof WebAssembly.instantiate !== "function") {
        throw new Error("WebAssembly is not available in your environment");
      }
      const source = await WebAssembly.instantiate(wasmBytes2, { wbg });
      result.wasm = source.instance.exports;
      result.type = "wasm";
    } catch (error) {
      if (typeof asmFn === "function") {
        result.wasm = asmFn(wbg);
        result.type = "asm";
      } else {
        result.error = `FATAL: Unable to initialize @polkadot/wasm-${root}:: ${error.message}`;
        console.error(result.error);
      }
    }
    return result;
  };
}

// node_modules/@polkadot/wasm-util/base64.js
var chr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
var map = new Array(256);
for (let i = 0, count = chr.length; i < count; i++) {
  map[chr.charCodeAt(i)] = i;
}
function base64Decode(data, out) {
  let byte = 0;
  let bits2 = 0;
  let pos = -1;
  for (let i = 0, count = out.length; pos < count; i++) {
    byte = byte << 6 | map[data.charCodeAt(i)];
    if ((bits2 += 6) >= 8) {
      out[++pos] = byte >>> (bits2 -= 8) & 255;
    }
  }
  return out;
}

// node_modules/@polkadot/wasm-util/fflate.js
var u8 = Uint8Array;
var u16 = Uint16Array;
var u32 = Uint32Array;
var clim = new u8([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);
var fleb = new u8([
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  1,
  1,
  1,
  1,
  2,
  2,
  2,
  2,
  3,
  3,
  3,
  3,
  4,
  4,
  4,
  4,
  5,
  5,
  5,
  5,
  0,
  /* unused */
  0,
  0,
  /* impossible */
  0
]);
var fdeb = new u8([
  0,
  0,
  0,
  0,
  1,
  1,
  2,
  2,
  3,
  3,
  4,
  4,
  5,
  5,
  6,
  6,
  7,
  7,
  8,
  8,
  9,
  9,
  10,
  10,
  11,
  11,
  12,
  12,
  13,
  13,
  /* unused */
  0,
  0
]);
var freb = (eb, start) => {
  const b = new u16(31);
  for (let i = 0; i < 31; ++i) {
    b[i] = start += 1 << eb[i - 1];
  }
  const r = new u32(b[30]);
  for (let i = 1; i < 30; ++i) {
    for (let j = b[i]; j < b[i + 1]; ++j) {
      r[j] = j - b[i] << 5 | i;
    }
  }
  return [b, r];
};
var [fl, revfl] = freb(fleb, 2);
fl[28] = 258, revfl[258] = 28;
var [fd] = freb(fdeb, 0);
var rev = new u16(32768);
for (let i = 0; i < 32768; ++i) {
  let x = (i & 43690) >>> 1 | (i & 21845) << 1;
  x = (x & 52428) >>> 2 | (x & 13107) << 2;
  x = (x & 61680) >>> 4 | (x & 3855) << 4;
  rev[i] = ((x & 65280) >>> 8 | (x & 255) << 8) >>> 1;
}
var hMap = (cd, mb, r) => {
  const s = cd.length;
  let i = 0;
  const l = new u16(mb);
  for (; i < s; ++i)
    ++l[cd[i] - 1];
  const le = new u16(mb);
  for (i = 0; i < mb; ++i) {
    le[i] = le[i - 1] + l[i - 1] << 1;
  }
  let co;
  if (r) {
    co = new u16(1 << mb);
    const rvb = 15 - mb;
    for (i = 0; i < s; ++i) {
      if (cd[i]) {
        const sv = i << 4 | cd[i];
        const r2 = mb - cd[i];
        let v = le[cd[i] - 1]++ << r2;
        for (const m = v | (1 << r2) - 1; v <= m; ++v) {
          co[rev[v] >>> rvb] = sv;
        }
      }
    }
  } else {
    co = new u16(s);
    for (i = 0; i < s; ++i)
      co[i] = rev[le[cd[i] - 1]++] >>> 15 - cd[i];
  }
  return co;
};
var flt = new u8(288);
for (let i = 0; i < 144; ++i)
  flt[i] = 8;
for (let i = 144; i < 256; ++i)
  flt[i] = 9;
for (let i = 256; i < 280; ++i)
  flt[i] = 7;
for (let i = 280; i < 288; ++i)
  flt[i] = 8;
var fdt = new u8(32);
for (let i = 0; i < 32; ++i)
  fdt[i] = 5;
var flrm = hMap(flt, 9, 1);
var fdrm = hMap(fdt, 5, 1);
var bits = (d, p, m) => {
  const o = p >>> 3;
  return (d[o] | d[o + 1] << 8) >>> (p & 7) & m;
};
var bits16 = (d, p) => {
  const o = p >>> 3;
  return (d[o] | d[o + 1] << 8 | d[o + 2] << 16) >>> (p & 7);
};
var shft = (p) => (p >>> 3) + (p & 7 && 1);
var slc = (v, s, e) => {
  if (s == null || s < 0)
    s = 0;
  if (e == null || e > v.length)
    e = v.length;
  const n = new (v instanceof u16 ? u16 : v instanceof u32 ? u32 : u8)(e - s);
  n.set(v.subarray(s, e));
  return n;
};
var max = (a) => {
  let m = a[0];
  for (let i = 1, count = a.length; i < count; ++i) {
    if (a[i] > m)
      m = a[i];
  }
  return m;
};
var inflt = (dat, buf, st) => {
  const noSt = !st || st.i;
  if (!st)
    st = {};
  const sl = dat.length;
  const noBuf = !buf || !noSt;
  if (!buf)
    buf = new u8(sl * 3);
  const cbuf = (l) => {
    let bl = buf.length;
    if (l > bl) {
      const nbuf = new u8(Math.max(bl << 1, l));
      nbuf.set(buf);
      buf = nbuf;
    }
  };
  let final = st.f || 0, pos = st.p || 0, bt = st.b || 0, lm = st.l, dm = st.d, lbt = st.m, dbt = st.n;
  if (final && !lm)
    return buf;
  const tbts = sl << 3;
  do {
    if (!lm) {
      st.f = final = bits(dat, pos, 1);
      const type = bits(dat, pos + 1, 3);
      pos += 3;
      if (!type) {
        const s = shft(pos) + 4, l = dat[s - 4] | dat[s - 3] << 8, t = s + l;
        if (t > sl) {
          if (noSt)
            throw "unexpected EOF";
          break;
        }
        if (noBuf)
          cbuf(bt + l);
        buf.set(dat.subarray(s, t), bt);
        st.b = bt += l, st.p = pos = t << 3;
        continue;
      } else if (type == 1)
        lm = flrm, dm = fdrm, lbt = 9, dbt = 5;
      else if (type == 2) {
        const hLit = bits(dat, pos, 31) + 257, hcLen = bits(dat, pos + 10, 15) + 4;
        const tl = hLit + bits(dat, pos + 5, 31) + 1;
        pos += 14;
        const ldt = new u8(tl);
        const clt = new u8(19);
        for (let i = 0; i < hcLen; ++i) {
          clt[clim[i]] = bits(dat, pos + i * 3, 7);
        }
        pos += hcLen * 3;
        const clb = max(clt), clbmsk = (1 << clb) - 1;
        if (!noSt && pos + tl * (clb + 7) > tbts)
          break;
        const clm = hMap(clt, clb, 1);
        for (let i = 0; i < tl; ) {
          const r = clm[bits(dat, pos, clbmsk)];
          pos += r & 15;
          const s = r >>> 4;
          if (s < 16) {
            ldt[i++] = s;
          } else {
            let c = 0, n = 0;
            if (s == 16)
              n = 3 + bits(dat, pos, 3), pos += 2, c = ldt[i - 1];
            else if (s == 17)
              n = 3 + bits(dat, pos, 7), pos += 3;
            else if (s == 18)
              n = 11 + bits(dat, pos, 127), pos += 7;
            while (n--)
              ldt[i++] = c;
          }
        }
        const lt = ldt.subarray(0, hLit), dt = ldt.subarray(hLit);
        lbt = max(lt);
        dbt = max(dt);
        lm = hMap(lt, lbt, 1);
        dm = hMap(dt, dbt, 1);
      } else
        throw "invalid block type";
      if (pos > tbts)
        throw "unexpected EOF";
    }
    if (noBuf)
      cbuf(bt + 131072);
    const lms = (1 << lbt) - 1, dms = (1 << dbt) - 1;
    const mxa = lbt + dbt + 18;
    while (noSt || pos + mxa < tbts) {
      const c = lm[bits16(dat, pos) & lms], sym = c >>> 4;
      pos += c & 15;
      if (pos > tbts)
        throw "unexpected EOF";
      if (!c)
        throw "invalid length/literal";
      if (sym < 256)
        buf[bt++] = sym;
      else if (sym == 256) {
        lm = void 0;
        break;
      } else {
        let add = sym - 254;
        if (sym > 264) {
          const i = sym - 257, b = fleb[i];
          add = bits(dat, pos, (1 << b) - 1) + fl[i];
          pos += b;
        }
        const d = dm[bits16(dat, pos) & dms], dsym = d >>> 4;
        if (!d)
          throw "invalid distance";
        pos += d & 15;
        let dt = fd[dsym];
        if (dsym > 3) {
          const b = fdeb[dsym];
          dt += bits16(dat, pos) & (1 << b) - 1, pos += b;
        }
        if (pos > tbts)
          throw "unexpected EOF";
        if (noBuf)
          cbuf(bt + 131072);
        const end = bt + add;
        for (; bt < end; bt += 4) {
          buf[bt] = buf[bt - dt];
          buf[bt + 1] = buf[bt + 1 - dt];
          buf[bt + 2] = buf[bt + 2 - dt];
          buf[bt + 3] = buf[bt + 3 - dt];
        }
        bt = end;
      }
    }
    st.l = lm, st.p = pos, st.b = bt;
    if (lm)
      final = 1, st.m = lbt, st.d = dm, st.n = dbt;
  } while (!final);
  return bt == buf.length ? buf : slc(buf, 0, bt);
};
var zlv = (d) => {
  if ((d[0] & 15) != 8 || d[0] >>> 4 > 7 || (d[0] << 8 | d[1]) % 31)
    throw "invalid zlib data";
  if (d[1] & 32)
    throw "invalid zlib data: preset dictionaries not supported";
};
function unzlibSync(data, out) {
  return inflt((zlv(data), data.subarray(2, -4)), out);
}

// node_modules/@polkadot/wasm-crypto-wasm/bundle.js
var import_bytes = __toESM(require_bytes(), 1);
var wasmBytes = /* @__PURE__ */ unzlibSync(base64Decode(import_bytes.bytes, new Uint8Array(import_bytes.lenIn)), new Uint8Array(import_bytes.lenOut));

// node_modules/@polkadot/wasm-crypto-init/wasm.js
var createWasm = /* @__PURE__ */ createWasmFn("crypto", wasmBytes, null);

// node_modules/@polkadot/wasm-crypto/init.js
var bridge = new Bridge(createWasm);
async function initBridge(createWasm2) {
  return bridge.init(createWasm2);
}

// node_modules/@polkadot/wasm-crypto/bundle.js
function withWasm(fn) {
  return (...params) => {
    if (!bridge.wasm) {
      throw new Error("The WASM interface has not been initialized. Ensure that you wait for the initialization Promise with waitReady() from @polkadot/wasm-crypto (or cryptoWaitReady() from @polkadot/util-crypto) before attempting to use WASM-only interfaces.");
    }
    return fn(bridge.wasm, ...params);
  };
}
var sr25519KeypairFromSeed = /* @__PURE__ */ withWasm((wasm, seed) => {
  wasm.ext_sr_from_seed(8, ...bridge.allocU8a(seed));
  return bridge.resultU8a();
});
var sr25519Sign = /* @__PURE__ */ withWasm((wasm, pubkey, secret, message) => {
  wasm.ext_sr_sign(8, ...bridge.allocU8a(pubkey), ...bridge.allocU8a(secret), ...bridge.allocU8a(message));
  return bridge.resultU8a();
});
var sr25519Agree = /* @__PURE__ */ withWasm((wasm, pubkey, secret) => {
  wasm.ext_sr_agree(8, ...bridge.allocU8a(pubkey), ...bridge.allocU8a(secret));
  return bridge.resultU8a();
});
async function waitReady() {
  try {
    const wasm = await initBridge();
    return !!wasm;
  } catch {
    return false;
  }
}

// src/create.ts
var import_rxjs = __toESM(require_cjs());
import { fetch } from "undici";

// src/lib/aes-256-gcm.ts
import { hexAddPrefix, hexStripPrefix, hexToU8a } from "@polkadot/util";
import { createCipheriv, createDecipheriv } from "crypto-browserify";
import { Buffer as Buffer2 } from "buffer";
var ALGO = "aes-256-gcm";
var AUTH_TAG_LENGTH = 32;
var toU8a = (param) => {
  if (typeof param === "string") {
    param = hexAddPrefix(param);
    return hexToU8a(param);
  }
  return param;
};
var encrypt = (data, key, iv) => {
  data = hexStripPrefix(data);
  const cipher = createCipheriv(
    ALGO,
    toU8a(key),
    Buffer2.from(toU8a(iv))
  );
  const enc = cipher.update(data, "hex", "hex");
  cipher.final();
  return `${enc}${cipher.getAuthTag().toString("hex")}`;
};
var decrypt = (enc, key, iv) => {
  enc = hexStripPrefix(enc);
  const decipher = createDecipheriv(
    ALGO,
    toU8a(key),
    Buffer2.from(toU8a(iv))
  );
  const authTag = hexToU8a(hexAddPrefix(enc.slice(-AUTH_TAG_LENGTH)));
  decipher.setAuthTag(authTag);
  const data = decipher.update(enc.slice(0, -AUTH_TAG_LENGTH), "hex", "hex");
  decipher.final();
  return data;
};

// src/create.ts
var createPruntimeApi = (baseURL) => {
  const pruntimeApi = pruntime_rpc.PhactoryAPI.create(
    async (method, requestData, callback) => {
      try {
        const resp = await fetch(
          `${baseURL}/prpc/PhactoryAPI.${method.name}`,
          {
            method: "POST",
            headers: {
              "Content-Type": "application/octet-stream"
            },
            body: new Uint8Array(requestData)
          }
        );
        const buffer = await (await resp.blob()).arrayBuffer();
        callback(null, new Uint8Array(buffer));
      } catch (err) {
        console.log("Error:", err);
        throw err;
      }
    }
  );
  return pruntimeApi;
};
async function create({
  api,
  baseURL,
  contractId,
  remotePubkey,
  autoDeposit = false
}) {
  await waitReady();
  const pruntimeApi = createPruntimeApi(baseURL);
  if (!remotePubkey) {
    const info = await pruntimeApi.getInfo({});
    if (!info || !info.publicKey)
      throw new Error("No remote pubkey");
    remotePubkey = hexAddPrefix2(info.publicKey);
  }
  const seed = hexToU8a2(hexAddPrefix2(randomHex(32)));
  const pair = sr25519KeypairFromSeed(seed);
  const [sk, pk] = [pair.slice(0, 64), pair.slice(64)];
  const queryAgreementKey = sr25519Agree(
    hexToU8a2(hexAddPrefix2(remotePubkey)),
    sk
  );
  const contractKey = (await api.query.phalaRegistry.contractKeys(contractId)).toString();
  if (!contractKey) {
    throw new Error(`No contract key for ${contractId}`);
  }
  const commandAgreementKey = sr25519Agree(hexToU8a2(contractKey), sk);
  const createEncryptedData3 = (data, agreementKey) => {
    const iv = hexAddPrefix2(randomHex(12));
    return {
      iv,
      pubkey: u8aToHex(pk),
      data: hexAddPrefix2(encrypt(data, agreementKey, hexToU8a2(iv)))
    };
  };
  let gasPrice = new BN(0);
  if (autoDeposit) {
    const contractInfo = await api.query.phalaPhatContracts.contracts(
      contractId
    );
    const cluster = contractInfo.unwrap().cluster;
    const clusterInfo = await api.query.phalaPhatContracts.clusters(
      cluster
    );
    gasPrice = new BN(
      clusterInfo.unwrap().gasPrice
    );
  }
  const query = async (encodedQuery, { certificate, pubkey, secret }) => {
    const encryptedData = createEncryptedData3(encodedQuery, queryAgreementKey);
    const encodedEncryptedData = api.createType("EncryptedData", encryptedData).toU8a();
    const signature = {
      signedBy: certificate,
      signatureType: pruntime_rpc.SignatureType.Sr25519,
      signature: sr25519Sign(pubkey, secret, encodedEncryptedData)
    };
    const requestData = {
      encodedEncryptedData,
      signature
    };
    return pruntimeApi.contractQuery(requestData).then((res) => {
      const { encodedEncryptedData: encodedEncryptedData2 } = res;
      const { data: encryptedData2, iv } = api.createType("EncryptedData", encodedEncryptedData2).toJSON();
      const data = decrypt(encryptedData2, queryAgreementKey, iv);
      return hexAddPrefix2(data);
    });
  };
  const sidevmQuery = async (bytes2, certificateData) => query(
    api.createType("InkQuery", {
      head: {
        nonce: hexAddPrefix2(randomHex(32)),
        id: contractId
      },
      data: {
        SidevmMessage: bytes2
      }
    }).toHex(),
    certificateData
  );
  const instantiate = async (payload, certificateData) => {
    const instantiateReturns = await query(
      api.createType("InkQuery", {
        head: {
          nonce: hexAddPrefix2(randomHex(32)),
          id: contractId
        },
        data: {
          InkInstantiate: payload
        }
      }).toHex(),
      certificateData
    );
    const response = api.createType("InkResponse", instantiateReturns);
    if (response.result.isErr) {
      return api.createType("InkQueryError", response.result.asErr.toHex());
    }
    return api.createType(
      "ContractInstantiateResult",
      response.result.asOk.asInkMessageReturn.toHex()
    );
  };
  const command = ({ contractId: contractId2, payload, deposit }) => {
    const encodedPayload = api.createType("CommandPayload", {
      encrypted: createEncryptedData3(payload, commandAgreementKey)
    }).toHex();
    try {
      return api.tx.phalaPhatContracts.pushContractMessage(
        contractId2,
        encodedPayload,
        deposit
      );
    } catch (err) {
      return api.tx.phalaMq.pushMessage(
        stringToHex(`phala/contract/${hexStripPrefix2(contractId2)}/command`),
        encodedPayload
      );
    }
  };
  const txContracts = (dest, value, gas, storageDepositLimit, encParams) => {
    let deposit = new BN(0);
    if (autoDeposit) {
      const gasFee = new BN(gas.refTime).mul(gasPrice);
      deposit = new BN(value).add(gasFee).add(new BN(storageDepositLimit || 0));
    }
    return command({
      contractId: dest.toHex(),
      payload: api.createType("InkCommand", {
        InkMessage: {
          nonce: hexAddPrefix2(randomHex(32)),
          // FIXME: unexpected u8a prefix
          message: api.createType("Vec<u8>", encParams).toHex(),
          transfer: value,
          gasLimit: gas.refTime,
          storageDepositLimit
        }
      }).toHex(),
      deposit
    });
  };
  Object.defineProperty(txContracts, "meta", {
    value: { args: [] },
    enumerable: true
  });
  const instantiateWithCode = () => null;
  instantiateWithCode.meta = { args: new Array(6) };
  Object.defineProperty(api.tx, "contracts", {
    value: {
      instantiateWithCode,
      call: txContracts
    },
    enumerable: true
  });
  Object.defineProperty(api.rx.call, "contractsApi", {
    value: {
      call: (origin, dest, value, gasLimit, storageDepositLimit, inputData) => {
        return (0, import_rxjs.from)(
          query(
            api.createType("InkQuery", {
              head: {
                nonce: hexAddPrefix2(randomHex(32)),
                id: dest
              },
              data: {
                InkMessage: {
                  payload: inputData,
                  deposit: 0,
                  transfer: value,
                  estimating: false
                }
              }
            }).toHex(),
            origin
          ).then((data) => {
            return api.createType(
              "ContractExecResult",
              api.createType("InkResponse", hexAddPrefix2(data)).toJSON().result.ok.inkMessageReturn
            );
          })
        );
      }
    },
    enumerable: true
  });
  Object.defineProperty(api.call, "contractsApi", {
    value: { call: () => null },
    enumerable: true
  });
  return { api, sidevmQuery, instantiate };
}
async function ready() {
  await waitReady();
}

// src/certificate.ts
import { hexAddPrefix as hexAddPrefix3, hexToU8a as hexToU8a3, u8aToHex as u8aToHex2 } from "@polkadot/util";
import { decodeAddress } from "@polkadot/util-crypto";
var isUsingSigner = (params) => params.signer !== void 0;
var signCertificate = async (params) => {
  var _a;
  await waitReady();
  const { api } = params;
  const generatedSeed = hexToU8a3(hexAddPrefix3(randomHex(32)));
  const generatedPair = sr25519KeypairFromSeed(generatedSeed);
  const [secret, pubkey] = [
    generatedPair.slice(0, 64),
    generatedPair.slice(64)
  ];
  const encodedCertificateBody = api.createType("CertificateBody", {
    pubkey: u8aToHex2(pubkey),
    ttl: 2147483647,
    // FIXME: max ttl is not safe
    config_bits: 0
  }).toU8a();
  let signerPubkey;
  let signatureType = params.signatureType;
  let signature;
  let address;
  if (isUsingSigner(params)) {
    const { account, signer } = params;
    address = account.address;
    signerPubkey = u8aToHex2(decodeAddress(address));
    if (!signatureType) {
      signatureType = getSignatureTypeFromAccount(account);
    }
    const signerResult = await ((_a = signer.signRaw) == null ? void 0 : _a.call(signer, {
      address,
      data: u8aToHex2(encodedCertificateBody),
      type: "bytes"
    }));
    if (signerResult) {
      signature = hexToU8a3(signerResult.signature);
    } else {
      throw new Error("Failed to sign certificate");
    }
  } else {
    const { pair } = params;
    address = pair.address;
    signerPubkey = u8aToHex2(pair.publicKey);
    if (!signatureType) {
      signatureType = getSignatureTypeFromPair(pair);
    }
    signature = pair.sign(encodedCertificateBody);
  }
  const certificate = {
    encodedBody: encodedCertificateBody,
    signature: {
      signedBy: {
        encodedBody: api.createType("CertificateBody", {
          pubkey: signerPubkey,
          ttl: 2147483647,
          // FIXME: max ttl is not safe
          config_bits: 0
        }).toU8a(),
        signature: null
      },
      signatureType,
      signature
    }
  };
  return {
    address,
    certificate,
    pubkey,
    secret
  };
};
var getSignatureTypeFromAccount = (account) => {
  const keypairType = account.type || "sr25519";
  switch (keypairType) {
    case "sr25519":
      return pruntime_rpc.SignatureType.Sr25519WrapBytes;
    case "ed25519":
      return pruntime_rpc.SignatureType.Ed25519WrapBytes;
    case "ecdsa":
      return pruntime_rpc.SignatureType.EcdsaWrapBytes;
  }
};
var getSignatureTypeFromPair = (pair) => {
  switch (pair.type) {
    case "sr25519":
      return pruntime_rpc.SignatureType.Sr25519;
    case "ed25519":
      return pruntime_rpc.SignatureType.Ed25519;
    case "ecdsa":
      return pruntime_rpc.SignatureType.Ecdsa;
    default:
      throw new Error("Unsupported keypair type");
  }
};

// src/contracts/PinkCode.ts
import { SubmittableResult as SubmittableResult2, toPromiseMethod as toPromiseMethod3 } from "@polkadot/api";
import { Abi as Abi3 } from "@polkadot/api-contract/Abi";
import { createBluePrintTx as createBluePrintTx2 } from "@polkadot/api-contract/base/util";
import { isUndefined as isUndefined2, isWasm, u8aToU8a } from "@polkadot/util";

// src/contracts/PinkBlueprint.ts
import { SubmittableResult } from "@polkadot/api";
import { BN_ZERO as BN_ZERO2, isUndefined, hexAddPrefix as hexAddPrefix5, u8aToHex as u8aToHex4, hexToU8a as hexToU8a5 } from "@polkadot/util";
import { createBluePrintTx, withMeta as withMeta2 } from "@polkadot/api-contract/base/util";
var import_rxjs3 = __toESM(require_cjs());
import { Abi as Abi2 } from "@polkadot/api-contract/Abi";
import { toPromiseMethod as toPromiseMethod2 } from "@polkadot/api";

// src/lib/assert.ts
function assert(expected, message) {
  if (!expected) {
    throw new Error(message);
  }
}

// src/contracts/PinkContract.ts
import { Abi } from "@polkadot/api-contract/Abi";
import { toPromiseMethod } from "@polkadot/api";
import { ContractSubmittableResult } from "@polkadot/api-contract/base/Contract";
import { applyOnEvent } from "@polkadot/api-contract/util";
import { withMeta, convertWeight } from "@polkadot/api-contract/base/util";
import { BN as BN2, BN_ZERO, hexAddPrefix as hexAddPrefix4, u8aToHex as u8aToHex3, hexToU8a as hexToU8a4 } from "@polkadot/util";
var import_rxjs2 = __toESM(require_cjs());
var PinkContractSubmittableResult = class extends ContractSubmittableResult {
  #registry;
  #isFinalized = false;
  constructor(registry, result, contractEvents) {
    super(result, contractEvents);
    this.#registry = registry;
  }
  async waitFinalized(timeout = 12e4) {
    if (this.#isFinalized) {
      return;
    }
    if (this.isInBlock || this.isFinalized) {
      const codeHash = this.status.asInBlock.toString();
      const block = await this.#registry.api.rpc.chain.getBlock(codeHash);
      const chainHeight = block.block.header.number.toNumber();
      const t0 = (/* @__PURE__ */ new Date()).getTime();
      while (true) {
        const result = await this.#registry.phactory.getInfo({});
        if (result.blocknum > chainHeight) {
          this.#isFinalized = true;
          return;
        }
        const t1 = (/* @__PURE__ */ new Date()).getTime();
        if (t1 - t0 > timeout) {
          throw new Error("Timeout");
        }
        await new Promise((resolve) => setTimeout(resolve, 1e3));
      }
    }
    throw new Error("Contract transaction submit failed.");
  }
};
function createQuery(meta, fn) {
  return withMeta(
    meta,
    (origin, options2, ...params) => fn(origin, options2, params)
  );
}
function createTx(meta, fn) {
  return withMeta(
    meta,
    (options2, ...params) => fn(options2, params)
  );
}
function createEncryptedData(pk, data, agreementKey) {
  const iv = hexAddPrefix4(randomHex(12));
  return {
    iv,
    pubkey: u8aToHex3(pk),
    data: hexAddPrefix4(encrypt(data, agreementKey, hexToU8a4(iv)))
  };
}
async function pinkQuery(api, pruntimeApi, pk, queryAgreementKey, encodedQuery, { certificate, pubkey, secret }) {
  const encryptedData = createEncryptedData(pk, encodedQuery, queryAgreementKey);
  const encodedEncryptedData = api.createType("EncryptedData", encryptedData).toU8a();
  const signature = {
    signedBy: certificate,
    signatureType: pruntime_rpc.SignatureType.Sr25519,
    signature: sr25519Sign(pubkey, secret, encodedEncryptedData)
  };
  const requestData = {
    encodedEncryptedData,
    signature
  };
  return pruntimeApi.contractQuery(requestData).then((res) => {
    const { encodedEncryptedData: encodedEncryptedData2 } = res;
    const { data: encryptedData2, iv } = api.createType("EncryptedData", encodedEncryptedData2).toJSON();
    const data = decrypt(encryptedData2, queryAgreementKey, iv);
    return hexAddPrefix4(data);
  });
}
var PinkContractPromise = class {
  constructor(api, phatRegistry, abi, address, contractKey) {
    this.#query = {};
    this.#tx = {};
    this.#inkQuery = (isEstimating, messageOrId, options2, params) => {
      const message = this.abi.findMessage(messageOrId);
      const api = this.api;
      const { cert } = options2;
      const seed = hexToU8a4(hexAddPrefix4(randomHex(32)));
      const pair = sr25519KeypairFromSeed(seed);
      const [sk, pk] = [pair.slice(0, 64), pair.slice(64)];
      const queryAgreementKey = sr25519Agree(
        hexToU8a4(hexAddPrefix4(this.phatRegistry.remotePubkey)),
        sk
      );
      const inkQueryInternal = async (origin) => {
        if (typeof origin === "string") {
          assert(origin === cert.address, "origin must be the same as the certificate address");
        } else if (origin.hasOwnProperty("verify") && origin.hasOwnProperty("adddress")) {
          throw new Error("Contract query expected AccountId as first parameter but since we got signer object here.");
        } else {
          assert(origin.toString() === cert.address, "origin must be the same as the certificate address");
        }
        const payload = api.createType("InkQuery", {
          head: {
            nonce: hexAddPrefix4(randomHex(32)),
            id: this.address
          },
          data: {
            InkMessage: {
              payload: message.toU8a(params),
              deposit: 0,
              transfer: null,
              estimating: isEstimating
            }
          }
        });
        const data = await pinkQuery(api, this.phatRegistry.phactory, pk, queryAgreementKey, payload.toHex(), cert);
        const { debugMessage, gasConsumed, gasRequired, result, storageDeposit } = api.createType(
          "ContractExecResult",
          api.createType("InkResponse", data).toJSON().result.ok.inkMessageReturn
        );
        return {
          debugMessage,
          gasConsumed,
          gasRequired: gasRequired && !convertWeight(gasRequired).v1Weight.isZero() ? gasRequired : gasConsumed,
          output: result.isOk && message.returnType ? this.abi.registry.createTypeUnsafe(message.returnType.lookupName || message.returnType.type, [result.asOk.data.toU8a(true)], { isPedantic: true }) : null,
          result,
          storageDeposit
        };
      };
      return {
        send: this._decorateMethod((origin) => (0, import_rxjs2.from)(inkQueryInternal(origin)))
      };
    };
    this.#inkCommand = (messageOrId, { gasLimit = BN_ZERO, storageDepositLimit = null, value = BN_ZERO }, params) => {
      const api = this.api;
      const seed = hexToU8a4(hexAddPrefix4(randomHex(32)));
      const pair = sr25519KeypairFromSeed(seed);
      const [sk, pk] = [pair.slice(0, 64), pair.slice(64)];
      const commandAgreementKey = sr25519Agree(hexToU8a4(this.contractKey), sk);
      const inkCommandInternal = (dest, value2, gas, storageDepositLimit2, encParams) => {
        const payload = api.createType("InkCommand", {
          InkMessage: {
            nonce: hexAddPrefix4(randomHex(32)),
            // FIXME: unexpected u8a prefix
            message: api.createType("Vec<u8>", encParams).toHex(),
            transfer: value2,
            gasLimit: gas.refTime,
            storageDepositLimit: storageDepositLimit2
          }
        });
        const encodedPayload = api.createType("CommandPayload", {
          encrypted: createEncryptedData(pk, payload.toHex(), commandAgreementKey)
        }).toHex();
        let deposit = new BN2(0);
        const gasFee = new BN2(gas.refTime).mul(this.phatRegistry.gasPrice);
        deposit = new BN2(value2).add(gasFee).add(new BN2(storageDepositLimit2 || 0));
        return api.tx.phalaPhatContracts.pushContractMessage(
          dest,
          encodedPayload,
          deposit
        );
      };
      return inkCommandInternal(
        this.address,
        // @ts-ignore
        value,
        convertWeight(gasLimit).v2Weight,
        storageDepositLimit,
        this.abi.findMessage(messageOrId).toU8a(params)
      ).withResultTransform((result) => {
        return new PinkContractSubmittableResult(
          this.phatRegistry,
          result,
          applyOnEvent(result, ["ContractEmitted", "ContractExecution"], (records) => {
            return records.map(({ event: { data: [, data] } }) => {
              try {
                return this.abi.decodeEvent(data);
              } catch (error) {
                console.error(`Unable to decode contract event: ${error.message}`);
                return null;
              }
            }).filter((decoded) => !!decoded);
          })
        );
      });
    };
    if (!api || !api.isConnected || !api.tx) {
      throw new Error("Your API has not been initialized correctly and is not connected to a chain");
    }
    if (!phatRegistry.isReady()) {
      throw new Error("Your phatRegistry has not been initialized correctly.");
    }
    this.abi = abi instanceof Abi ? abi : new Abi(abi, api.registry.getChainProperties());
    this.api = api;
    this._decorateMethod = toPromiseMethod;
    this.phatRegistry = phatRegistry;
    this.address = this.registry.createType("AccountId", address);
    this.contractKey = contractKey;
    this.abi.messages.forEach((m) => {
      if (m.isMutating) {
        this.#tx[m.method] = createTx(m, (o, p) => this.#inkCommand(m, o, p));
        this.#query[m.method] = createQuery(m, (f, c, p) => this.#inkQuery(true, m, c, p).send(f));
      } else {
        this.#query[m.method] = createQuery(m, (f, c, p) => this.#inkQuery(false, m, c, p).send(f));
      }
    });
  }
  #query;
  #tx;
  get registry() {
    return this.api.registry;
  }
  get query() {
    return this.#query;
  }
  get tx() {
    return this.#tx;
  }
  #inkQuery;
  #inkCommand;
};

// src/contracts/PinkBlueprint.ts
function createEncryptedData2(pk, data, agreementKey) {
  const iv = hexAddPrefix5(randomHex(12));
  return {
    iv,
    pubkey: u8aToHex4(pk),
    data: hexAddPrefix5(encrypt(data, agreementKey, hexToU8a5(iv)))
  };
}
async function pinkQuery2(api, pruntimeApi, pk, queryAgreementKey, encodedQuery, { certificate, pubkey, secret }) {
  const encryptedData = createEncryptedData2(pk, encodedQuery, queryAgreementKey);
  const encodedEncryptedData = api.createType("EncryptedData", encryptedData).toU8a();
  const signature = {
    signedBy: certificate,
    signatureType: pruntime_rpc.SignatureType.Sr25519,
    signature: sr25519Sign(pubkey, secret, encodedEncryptedData)
  };
  const requestData = {
    encodedEncryptedData,
    signature
  };
  return pruntimeApi.contractQuery(requestData).then((res) => {
    const { encodedEncryptedData: encodedEncryptedData2 } = res;
    const encryptedData2 = api.createType("EncryptedData", encodedEncryptedData2);
    const data = decrypt(encryptedData2.data.toString(), queryAgreementKey, encryptedData2.iv);
    return hexAddPrefix5(data);
  });
}
function createQuery2(meta, fn) {
  return withMeta2(
    meta,
    (origin, options2, ...params) => fn(origin, options2, params)
  );
}
var PinkBlueprintSubmittableResult = class extends SubmittableResult {
  constructor(result, abi, registry, contractId) {
    super(result);
    this.#isFinalized = false;
    this.registry = registry;
    this.abi = abi;
    this.contractId = contractId;
  }
  #isFinalized;
  #contract;
  async waitFinalized(timeout = 12e4) {
    if (this.#isFinalized) {
      return;
    }
    if (this.isInBlock || this.isFinalized) {
      let contractId;
      for (const event of this.events) {
        if (event.event.method === "Instantiating") {
          contractId = event.event.data.contract.toString();
          break;
        }
      }
      if (!contractId) {
        throw new Error("Failed to find contract ID in events, maybe instantiate failed.");
      }
      const t0 = (/* @__PURE__ */ new Date()).getTime();
      while (true) {
        const result1 = await this.registry.api.query.phalaPhatContracts.clusterContracts(this.registry.clusterId);
        const contractIds = result1.map((i) => i.toString());
        if (contractIds.indexOf(contractId) !== -1) {
          const result2 = await this.registry.api.query.phalaRegistry.contractKeys(contractId);
          if (result2.isSome) {
            this.#isFinalized = true;
            if (this.contractId) {
              const contractKey = await this.registry.getContractKeyOrFail(this.contractId);
              this.#contract = new PinkContractPromise(this.registry.api, this.registry, this.abi, this.contractId, contractKey);
            }
            return;
          }
        }
        const t1 = (/* @__PURE__ */ new Date()).getTime();
        if (t1 - t0 > timeout) {
          throw new Error("Timeout");
        }
        await new Promise((resolve) => setTimeout(resolve, 1e3));
      }
    }
    throw new Error(`instantiate failed for ${this.abi.info.source.wasmHash.toString()}`);
  }
  get contract() {
    return this.#contract;
  }
};
var PinkBlueprintPromise = class {
  constructor(api, phatRegistry, abi, codeHash) {
    this.#query = {};
    this.#tx = {};
    this.#deploy = (constructorOrId, { gasLimit = BN_ZERO2, storageDepositLimit = null, value = BN_ZERO2, salt }, params) => {
      if (!salt) {
        salt = randomHex(4);
      }
      const codeHash = this.abi.info.source.wasmHash.toString();
      return this.api.tx.phalaPhatContracts.instantiateContract(
        { "WasmCode": codeHash },
        this.abi.findConstructor(constructorOrId).toU8a(params),
        salt,
        this.phatRegistry.clusterId,
        0,
        // not transfer any token to the contract during initialization
        gasLimit,
        storageDepositLimit,
        0
      ).withResultTransform((result) => {
        let maybeContactId;
        const instantiateEvent = result.events.filter((i) => i.event.method === "Instantiating")[0];
        if (instantiateEvent) {
          const contractId = instantiateEvent.event.data.contract;
          if (contractId) {
            maybeContactId = contractId.toString();
          }
        }
        return new PinkBlueprintSubmittableResult(result, this.abi, this.phatRegistry, maybeContactId);
      });
    };
    this.#estimateGas = (constructorOrId, options2, params) => {
      const api = this.api;
      const seed = hexToU8a5(hexAddPrefix5(randomHex(32)));
      const pair = sr25519KeypairFromSeed(seed);
      const [sk, pk] = [pair.slice(0, 64), pair.slice(64)];
      const { cert } = options2;
      const queryAgreementKey = sr25519Agree(
        hexToU8a5(hexAddPrefix5(this.phatRegistry.remotePubkey)),
        sk
      );
      const inkQueryInternal = async (origin) => {
        var _a;
        if (typeof origin === "string") {
          assert(origin === cert.address, "origin must be the same as the certificate address");
        } else if (origin.hasOwnProperty("verify") && origin.hasOwnProperty("adddress")) {
          throw new Error("Contract query expected AccountId as first parameter but since we got signer object here.");
        } else {
          assert(origin.toString() === cert.address, "origin must be the same as the certificate address");
        }
        const salt = randomHex(4);
        const payload = api.createType("InkQuery", {
          head: {
            nonce: hexAddPrefix5(randomHex(32)),
            id: (_a = this.phatRegistry.clusterInfo) == null ? void 0 : _a.systemContract
          },
          data: {
            InkInstantiate: {
              codeHash: this.abi.info.source.wasmHash,
              salt,
              instantiateData: this.abi.findConstructor(constructorOrId).toU8a(params),
              deposit: 0,
              transfer: 0
            }
          }
        });
        const rawResponse = await pinkQuery2(api, this.phatRegistry.phactory, pk, queryAgreementKey, payload.toHex(), cert);
        const response = api.createType("InkResponse", rawResponse);
        if (response.result.isErr) {
          return api.createType(
            "InkQueryError",
            response.result.asErr.toHex()
          );
        }
        const result = api.createType(
          "ContractInstantiateResult",
          response.result.asOk.asInkMessageReturn.toHex()
        );
        result.salt = salt;
        return result;
      };
      return {
        send: this._decorateMethod((origin) => (0, import_rxjs3.from)(inkQueryInternal(origin)))
      };
    };
    if (!api || !api.isConnected || !api.tx) {
      throw new Error("Your API has not been initialized correctly and is not connected to a chain");
    }
    if (!phatRegistry.isReady()) {
      throw new Error("Your phatRegistry has not been initialized correctly.");
    }
    this.abi = abi instanceof Abi2 ? abi : new Abi2(abi, api.registry.getChainProperties());
    this.api = api;
    this._decorateMethod = toPromiseMethod2;
    this.phatRegistry = phatRegistry;
    this.codeHash = this.api.registry.createType("Hash", codeHash);
    this.abi.constructors.forEach((c) => {
      if (isUndefined(this.#tx[c.method])) {
        this.#tx[c.method] = createBluePrintTx(c, (o, p) => this.#deploy(c, o, p));
        this.#query[c.method] = createQuery2(c, (f, o, p) => this.#estimateGas(c, o, p).send(f));
      }
    });
  }
  #query;
  #tx;
  get tx() {
    return this.#tx;
  }
  get query() {
    return this.#query;
  }
  #deploy;
  #estimateGas;
};

// src/contracts/PinkCode.ts
var InkCodeSubmittableResult = class extends SubmittableResult2 {
  constructor(result, abi, registry) {
    super(result);
    this.#isFinalized = false;
    this.registry = registry;
    this.abi = abi;
    this.blueprint = new PinkBlueprintPromise(this.registry.api, this.registry, this.abi, this.abi.info.source.wasmHash);
  }
  #isFinalized;
  async waitFinalized(pair, cert, timeout = 1e4) {
    if (this.#isFinalized) {
      return;
    }
    if (this.isInBlock || this.isFinalized) {
      const system = this.registry.systemContract;
      const codeHash = this.abi.info.source.wasmHash.toString();
      const t0 = (/* @__PURE__ */ new Date()).getTime();
      while (true) {
        const { output } = await system.query["system::codeExists"](pair.address, { cert }, codeHash, "Ink");
        if (output && output.asOk.toPrimitive()) {
          this.#isFinalized = true;
          return;
        }
        const t1 = (/* @__PURE__ */ new Date()).getTime();
        if (t1 - t0 > timeout) {
          throw new Error("Timeout");
        }
        await new Promise((resolve) => setTimeout(resolve, 500));
      }
    }
    throw new Error("Not in block, your Code may upload failed.");
  }
};
var PinkCodePromise = class {
  constructor(api, phatRegistry, abi, wasm) {
    this.#tx = {};
    this.#instantiate = (_constructorOrId, _params) => {
      return this.api.tx.phalaPhatContracts.clusterUploadResource(
        this.phatRegistry.clusterId,
        "InkCode",
        this.code.toString()
      ).withResultTransform(
        (result) => {
          return new InkCodeSubmittableResult(result, this.abi, this.phatRegistry);
        }
      );
    };
    if (!api || !api.isConnected || !api.tx) {
      throw new Error("Your API has not been initialized correctly and is not connected to a chain");
    }
    if (!phatRegistry.isReady()) {
      throw new Error("Your phatRegistry has not been initialized correctly.");
    }
    this.abi = abi instanceof Abi3 ? abi : new Abi3(abi, api.registry.getChainProperties());
    this.api = api;
    this._decorateMethod = toPromiseMethod3;
    this.phatRegistry = phatRegistry;
    this.code = isWasm(this.abi.info.source.wasm) ? this.abi.info.source.wasm : u8aToU8a(wasm);
    if (!isWasm(this.code)) {
      throw new Error("No WASM code provided");
    }
    this.abi.constructors.forEach((c) => {
      if (isUndefined2(this.#tx[c.method])) {
        this.#tx[c.method] = createBluePrintTx2(c, (_o, p) => this.#instantiate(c, p));
      }
    });
  }
  #tx;
  get tx() {
    return this.#tx;
  }
  upload() {
    return this.#instantiate(0, []);
  }
  #instantiate;
};

// src/contracts/PinkLoggerContract.ts
import { Keyring } from "@polkadot/api";
import { hexAddPrefix as hexAddPrefix6, hexToU8a as hexToU8a6, stringToHex as stringToHex2, hexToString } from "@polkadot/util";

// src/contracts/Errors.ts
var ContractInitialError = class extends Error {
};

// src/contracts/PinkLoggerContract.ts
var PinkLoggerContractPromise = class _PinkLoggerContractPromise extends PinkContractPromise {
  #pair;
  static async create(api, registry, systemContract, pair) {
    let _pair = pair;
    if (!_pair) {
      const keyring = new Keyring({ type: "sr25519" });
      _pair = keyring.addFromUri("//Alice");
    }
    const cert = await signCertificate({ api, pair: _pair });
    const { output } = await systemContract.query["system::getDriver"](_pair.address, { cert }, "PinkLogger");
    const contractId = output.asOk.toHex();
    if (!contractId) {
      throw new ContractInitialError("No PinkLogger contract registered in the cluster.");
    }
    const contractKey = await registry.getContractKey(contractId);
    if (!contractKey) {
      throw new ContractInitialError("PinkLogger contract ID is incorrect and not found in the cluster.");
    }
    return new _PinkLoggerContractPromise(api, registry, log_server_default, contractId, contractKey, pair);
  }
  constructor(api, registry, abi, contractId, contractKey, pair) {
    super(api, registry, abi, contractId, contractKey);
    if (!pair) {
      const keyring = new Keyring({ type: "sr25519" });
      this.#pair = keyring.addFromUri("//Alice");
    } else {
      this.#pair = pair;
    }
  }
  async getLog(contractId, from4 = 0, counts = 100) {
    const api = this.api;
    const seed = hexToU8a6(hexAddPrefix6(randomHex(32)));
    const pair = sr25519KeypairFromSeed(seed);
    const [sk, pk] = [pair.slice(0, 64), pair.slice(64)];
    const encodedQuery = api.createType("InkQuery", {
      head: {
        nonce: hexAddPrefix6(randomHex(32)),
        id: this.address
      },
      data: {
        SidevmMessage: stringToHex2(JSON.stringify({
          action: "GetLog",
          contract: contractId,
          from: from4,
          count: counts
        }))
      }
    });
    const queryAgreementKey = sr25519Agree(
      hexToU8a6(hexAddPrefix6(this.phatRegistry.remotePubkey)),
      sk
    );
    const cert = await signCertificate({ pair: this.#pair, api });
    const response = await pinkQuery(api, this.phatRegistry.phactory, pk, queryAgreementKey, encodedQuery.toHex(), cert);
    const inkResponse = api.createType("InkResponse", response);
    if (inkResponse.result.isErr) {
      let error = `[${inkResponse.result.asErr.index}] ${inkResponse.result.asErr.type}`;
      if (inkResponse.result.asErr.type === "RuntimeError") {
        error = `${error}: ${inkResponse.result.asErr.value}`;
      }
      throw new Error(error);
    }
    const payload = inkResponse.result.asOk.asInkMessageReturn.toString();
    if (payload.substring(0, 2) === "0x") {
      return JSON.parse(hexToString(payload));
    }
    return JSON.parse(payload);
  }
};

// src/OnChainRegistry.ts
var UnexpectedEndpointError = class extends Error {
};
var OnChainRegistry = class _OnChainRegistry {
  constructor(api) {
    this.#ready = false;
    this.api = api;
  }
  #ready;
  #phactory;
  #systemContract;
  async getContractKey(contractId) {
    const contractKey = await this.api.query.phalaRegistry.contractKeys(contractId);
    if (!contractKey) {
      return void 0;
    }
    return contractKey.toString();
  }
  async getContractKeyOrFail(contractId) {
    const contractKey = await this.getContractKey(contractId);
    if (!contractKey) {
      throw new Error(`Contract ${contractId} not found in cluster.`);
    }
    return contractKey;
  }
  isReady() {
    return this.#ready;
  }
  get phactory() {
    if (!this.#ready || !this.#phactory) {
      throw new Error("You need initialize OnChainRegistry first.");
    }
    return this.#phactory;
  }
  get gasPrice() {
    if (!this.#ready || !this.clusterInfo || !this.clusterInfo.gasPrice) {
      throw new Error("You need initialize OnChainRegistry first.");
    }
    return this.clusterInfo.gasPrice;
  }
  /**
   * Static factory method returns a ready to use PhatRegistry object.
   */
  static async create(api, options2) {
    options2 = { autoConnect: true, ...options2 || {} };
    const instance = new _OnChainRegistry(api);
    await waitReady();
    if (options2.autoConnect) {
      await instance.connect(options2.clusterId, options2.workerId, options2.pruntimeURL, options2.systemContractId, !!options2.skipCheck);
    }
    return instance;
  }
  async getClusters(clusterId) {
    if (clusterId) {
      const result = await this.api.query.phalaPhatContracts.clusters(clusterId);
      if (result.isNone) {
        return null;
      }
      return result.unwrap();
    } else {
      const result = await this.api.query.phalaPhatContracts.clusters.entries();
      return result.map(([storageKey, value]) => {
        const clusterId2 = storageKey.args.map((i) => i.toPrimitive())[0];
        const clusterInfo = value.unwrap();
        return [clusterId2, clusterInfo];
      });
    }
  }
  async getEndpints(workerId) {
    if (workerId) {
      if (typeof workerId !== "string") {
        workerId = workerId.toHex();
      }
      return await this.api.query.phalaRegistry.endpoints(workerId);
    }
    const result = await this.api.query.phalaRegistry.endpoints.entries();
    return result.map(([storageKey, value]) => {
      const workerId2 = storageKey.args.map((i) => i.toPrimitive())[0];
      return [workerId2, value];
    });
  }
  /**
    * ClusterId: string | null  - Cluster ID, if empty, will try to use the first cluster found in the chain registry.
    * WorkerId: string | null - Worker ID, if empty, will try to use the first worker found in the cluster.
    * PruntimeURL: string | null - Pruntime URL, if empty, will try to use the pruntime URL of the selected worker.
    * systemContractId: string | AccountId | null - System contract ID, if empty, will try to use the system contract ID of the selected cluster.
    * skipCheck: boolean | undefined - Skip the check of cluster and worker has been registry on chain or not, it's for cluster
    *                      deployment scenario, where the cluster and worker has not been registry on chain yet.
    */
  async connect(clusterId, workerId, pruntimeURL, systemContractId, skipCheck = false) {
    this.#ready = false;
    let clusterInfo;
    if (!skipCheck) {
      if (clusterId) {
        clusterInfo = await this.getClusters(clusterId);
        if (!clusterInfo) {
          throw new Error(`Cluster not found: ${clusterId}`);
        }
      } else {
        const clusters = await this.getClusters();
        if (!clusters || !Array.isArray(clusters)) {
          throw new Error("No cluster found.");
        }
        if (clusters.length === 0) {
          throw new Error("No cluster found.");
        }
        clusterId = clusters[0][0];
        clusterInfo = clusters[0][1];
      }
      const endpoints = await this.getEndpints();
      if (!Array.isArray(endpoints) || endpoints.length === 0) {
        throw new Error("No worker found.");
      }
      if (!workerId && !pruntimeURL) {
        workerId = endpoints[0][0];
        pruntimeURL = endpoints[0][1].unwrap().asV1[0].toPrimitive();
      } else if (workerId) {
        const endpoint = endpoints.find(([id, _]) => id === workerId);
        if (!endpoint) {
          throw new Error(`Worker not found: ${workerId}`);
        }
        pruntimeURL = endpoint[1].unwrap().asV1[0].toPrimitive();
      } else if (pruntimeURL) {
        const endpoint = endpoints.find(([_, v]) => {
          const url = v.unwrap().asV1[0].toPrimitive();
          return url === pruntimeURL;
        });
        if (!endpoint) {
          throw new Error(`Worker not found: ${workerId}`);
        }
        workerId = endpoint[0];
      }
    }
    this.#phactory = createPruntimeApi(pruntimeURL);
    try {
      await this.#phactory.getInfo({});
    } catch (err) {
      throw new Error("Phactory API not compatible, you might need downgrade your @phala/sdk or connect to an up-to-date endpoint.");
    }
    this.clusterId = clusterId;
    this.remotePubkey = workerId;
    this.pruntimeURL = pruntimeURL;
    this.clusterInfo = clusterInfo;
    this.#ready = true;
    if (this.clusterInfo && this.clusterInfo.systemContract) {
      systemContractId = this.clusterInfo.systemContract;
    }
    if (systemContractId) {
      const systemContractKey = await this.getContractKey(systemContractId);
      if (systemContractKey) {
        this.#systemContract = new PinkContractPromise(this.api, this, system_default, systemContractId, systemContractKey);
      }
    }
  }
  get systemContract() {
    if (this.#systemContract) {
      return this.#systemContract;
    }
    console.warn("System contract not found, you might not connect to a health cluster.");
  }
  async getClusterBalance(pair, address) {
    const system = this.#systemContract;
    if (!system) {
      throw new Error("System contract not found, you might not connect to a health cluster.");
    }
    const signParams = pair.signer ? pair : { pair };
    const cert = await signCertificate({ ...signParams, api: this.api });
    const { output: totalBalanceOf } = await system.query["system::totalBalanceOf"](pair.address, { cert }, address);
    const { output: freeBalanceOf } = await system.query["system::freeBalanceOf"](pair.address, { cert }, address);
    return {
      total: totalBalanceOf.asOk.toBn(),
      free: freeBalanceOf.asOk.toBn()
    };
  }
  transferToCluster(address, amount) {
    return this.api.tx.phalaPhatContracts.transferToCluster(amount, this.clusterId, address);
  }
};

// src/options.ts
import { typeDefinitions } from "@polkadot/types";
function options(options2 = {}) {
  return {
    ...options2,
    types: {
      ...types,
      ...typeDefinitions,
      ...options2.types || {}
    }
  };
}

// src/index.ts
var PhactoryAPI = pruntime_rpc.PhactoryAPI;
var abis = { system: system_default, logServer: log_server_default };
export {
  InkCodeSubmittableResult,
  OnChainRegistry,
  PhactoryAPI,
  PinkBlueprintPromise,
  PinkBlueprintSubmittableResult,
  PinkCodePromise,
  PinkContractPromise,
  PinkLoggerContractPromise,
  UnexpectedEndpointError,
  abis,
  create,
  createPruntimeApi,
  options,
  pinkQuery,
  randomHex,
  ready,
  signCertificate,
  types
};
